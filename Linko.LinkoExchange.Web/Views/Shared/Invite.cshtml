@model Linko.LinkoExchange.Web.ViewModels.Shared.InviteViewModel
@using Linko.LinkoExchange.Core.Enum
@{
    ViewBag.Title = "Invite";
}

<section>
    <ol class="breadcrumb">
        @if (Model.InvitationType == InvitationType.AuthorityToAuthority)
        {
            <li><a href="#" onclick="location.href = '@Url.Action(actionName: "Index", controllerName: "Authority")'"><i class=""></i> Home </a></li>
            <li><a href="#" onclick="location.href = '@Url.Action(actionName: "AuthorityUsers", controllerName: "Authority")'"><i class=""></i> Users </a></li>
        }
        else if (Model.InvitationType == InvitationType.AuthorityToIndustry)
        {
            <li><a href="#" onclick="location.href = '@Url.Action(actionName: "Index", controllerName: "Authority")'"><i class=""></i> Home </a></li>
            <li><a href="#" onclick="location.href = '@Url.Action(actionName: "Industries", controllerName: "Authority")'"><i class=""></i> Industries </a></li>
            <li><a href="#" onclick="location.href = '@Url.Action(actionName: "IndustryDetails", controllerName: "Authority", routeValues: new { id = Model.OrgRegProgramUserId })'"><i class=""></i> Details </a></li>
            <li><a href="#" onclick="location.href = '@Url.Action(actionName: "IndustryUsers", controllerName: "Authority", routeValues: new { id = Model.OrgRegProgramUserId })'"><i class=""></i> Users </a></li>
        }
        else if (Model.InvitationType == InvitationType.IndustryToIndustry)
        {
            <li><a href="#" onclick="location.href = '@Url.Action(actionName: "Index", controllerName: "Industry")'"><i class=""></i> Home </a></li>
            <li><a href="#" onclick="location.href = '@Url.Action(actionName: "IndustryUsers", controllerName: "Industry")'"><i class=""></i> Users </a></li>
        }
        <li class="active">Invite</li>
    </ol>
</section>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.OrgRegProgramUserId)
    @Html.HiddenFor(model => model.InvitationType)

    <div class="box box-primary">
        <div class="box-header with-border">
            <h3 class="box-title">Search Email Address</h3>
            <div class="box-tools pull-right">
                <div class="pull-right">
                    @*<input type="submit" value="Search Email" class="btn btn-sm btn-primary" 
                           formaction="@Url.Action(actionName: "AuthorityUserLockUnLock", controllerName: "Authority")" formmethod="post" />*@
                    @*<input type="button" value="Cancel" class="btn btn-sm btn-primary" data-toggle="modal" data-target="#resetModal"/>*@                   
                      @*<input type="button" id="searchEmailBtn" value="Search Email" class="btn btn-sm btn-primary" />*@
                </div>
            </div><!-- /.box-tools -->
        </div>  @*.box-header*@

        <section class="box-body form-horizontal">

            @Html.ValidationSummary(excludePropertyErrors: true, message: "", htmlAttributes: new { @class = "alert alert-danger" })
            
            @if (ViewBag.ShowSuccessMessage!= null && ViewBag.ShowSuccessMessage)
            {
                <div class="alert alert-success alert-dismissible">
                    <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
                    <h5>
                        <i class="icon fa fa-check"></i>
                        @ViewBag.SuccessMessage
                    </h5>
                </div>
            }

            @*<div class="col-md-12 modal modal-info fade" id="resetModal" tabindex="-1" role="dialog" aria-labelledby="resetModalLabel">
                <div class="modal-dialog" role="document">
                    <div class="modal-content alert alert-info alert-dismissible">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">&times;</button>
                        <h4 class="box-title">Reset User Account</h4>

                        <section>
                            <p>
                                User will be required to re-register before they can log into LinkoExchange.
                                What email should be used in the Registration Profile?
                            </p>
                            <div class="form-group">
                                <div class="col-md-12">
                                    @Html.EditorFor(model => model.ResetEmail, new
                                    {
                                        htmlAttributes = new
                                        {
                                            @class = "form-control"
                                        }
                                    })

                                    @Html.ValidationMessageFor(model => model.ResetEmail, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </section>
                        <div>
                            <div class="form-group">
                                <div class="pull-right">
                                    <button type="submit" class="btn btn-sm btn-primary"
                                            formaction="@Url.Action(actionName: "AuthorityUserReset", controllerName: "Authority")" formmethod="post">
                                        Reset
                                    </button>
                                    <button type="button" class="btn btn-sm btn-primary" data-dismiss="modal" aria-label="Close">Cancel</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>*@

            <div id="noUserFoundMessage" style="display:none;">
                <div class="alert alert-success">
                    <h5>
                        <i class="icon fa fa-check"></i>
                        The user does not exist.  Enter a first and last name and click the 'Send Invite' button.

                    </h5>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.EmailAddress, htmlAttributes: new
                {
                    @class = "control-label col-md-2 required"
                })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.EmailAddress, new
                    {
                        htmlAttributes = new
                        {
                            @class = "form-control"
                        }
                    })
                    @Html.ValidationMessageFor(model => model.EmailAddress)
                    @Html.HiddenFor(model => model.EmailAddress)
                </div>

            </div>

            <div id="divNameContainer" style="display:none;">
                <div class="form-group">
                    @Html.LabelFor(model => model.FirstName, htmlAttributes: new
               {
                   @class = "control-label col-md-2 required"
               })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.FirstName, new
                        {
                            htmlAttributes = new
                            {
                                @class = "form-control"
                            }
                        })
                        @Html.ValidationMessageFor(model => model.FirstName)
                    </div>
                </div>
                <div class="form-group">
                        @Html.LabelFor(model => model.LastName, htmlAttributes: new
                   {
                       @class = "control-label col-md-2 required"
                   })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.LastName, new
                            {
                                htmlAttributes = new
                                {
                                    @class = "form-control"
                                }
                            })
                            @Html.ValidationMessageFor(model => model.LastName)
                        </div>
                </div>
             </div>



        </section>@*.box-body*@
        <div class="box-footer">
            <div class="form-group pull-right" >
                <input type="button" id="searchEmailBtn" value="Search Email" class="btn btn-sm btn-primary" />
                <input type="submit" id="sendInviteBtn" value="Send Invite" class="btn btn-sm btn-primary" style="display:none;"
                       formaction="@Url.Action(actionName: "Invite", controllerName: "Invite")" formmethod="post" />
                <input type="button" id="cancelInviteBtn" value="Cancel" class="btn btn-sm btn-primary" style="display:none;" />
            </div>
        </div><!-- box-footer -->
    </div><!-- /.box -->

    <div id="boxFoundUser" class="box box-primary" style="display:none;">
        <div class="box-header with-border">
            <h3 class="box-title">Found User</h3>
        </div>  @*.box-header*@

        <section class="box-body form-horizontal">

            @Html.ValidationSummary(excludePropertyErrors: true, message: "", htmlAttributes: new { @class = "alert alert-danger" })

            @if (ViewBag.ShowSuccessMessage != null && ViewBag.ShowSuccessMessage)
            {
                <div class="alert alert-success alert-dismissible">
                    <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
                    <h5>
                        <i class="icon fa fa-check"></i>
                        @ViewBag.SuccessMessage
                    </h5>
                </div>
            }

            
            <div>
                <div class="alert alert-warning">
                    <h5 id="foundUserMessage">
                        <i class="icon fa fa-check"></i>
                    </h5>
                </div>
            </div>

        

            <div class="form-group">
                @Html.LabelFor(model => model.FirstName, htmlAttributes: new
                {
                    @class = "control-label col-md-2"
                })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.FirstName, new
                    {
                        htmlAttributes = new
                        {
                            @class = "form-control",
                            @readonly = "readonly"
                        }
                    })
                </div>
            </div>
            <div class="form-group">
                    @Html.LabelFor(model => model.LastName, htmlAttributes: new
                    {
                        @class = "control-label col-md-2"
                    })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.LastName, new
                   {
                       htmlAttributes = new
                       {
                           @class = "form-control",
                           @readonly = "readonly"
                       }
                   })
                    </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.FacilityName, htmlAttributes: new
               {
                   @class = "control-label col-md-2"
               })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.FacilityName, new
               {
                   htmlAttributes = new
                   {
                       @class = "form-control",
                       @readonly = "readonly"
                   }
               })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new
               {
                   @class = "control-label col-md-2"
               })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.PhoneNumber, new
               {
                   htmlAttributes = new
                   {
                       @class = "form-control",
                       @readonly = "readonly"
                   }
               })
                </div>
            </div>






        </section>@*.box-body*@
        <div class="box-footer">
            <div class="form-group pull-right">
                <input id="foundUserInviteButton" type="submit" value="Send Invite" class="btn btn-sm btn-primary"
                       formaction='@Url.Action("Invite","Authority")' formmethod="post" />
                <input type="button" id="cancelInviteBtn" value="Cancel" class="btn btn-sm btn-primary" />
            </div>
        </div><!-- box-footer -->
    </div>

}
@using (Html.BeginForm())
{
    @Html.HiddenFor(model => model.OrgRegProgramUserId)
    @Html.HiddenFor(model => model.InvitationType)
    <div id="boxFoundUsers" class="box box-primary" style="display:none;">
        <div class="box-header with-border">
            <h3 class="box-title">Found Users</h3>
        </div>

        <section class="box-body form-horizontal">

            @Html.ValidationSummary(excludePropertyErrors: true, message: "", htmlAttributes: new { @class = "alert alert-danger" })

            @if (ViewBag.ShowSuccessMessage != null && ViewBag.ShowSuccessMessage)
            {
                <div class="alert alert-success alert-dismissible">
                    <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
                    <h5>
                        <i class="icon fa fa-check"></i>
                        @ViewBag.SuccessMessage
                    </h5>
                </div>
            }


            <div>
                <div class="alert alert-warning">
                    <h5>
                        <i class="icon fa fa-check"></i>
                        Found users in other organization regulatory programs.
                    </h5>
                </div>
            </div>


            <div class="form-group">
                <div class="col-md-12">
                    @(Html.Kendo().Grid<Linko.LinkoExchange.Web.ViewModels.Shared.InviteExistingUserViewModel>()
                    .Name(componentName: "gridExistingUsers")
                    .AutoBind(false)
                    .Columns(columns =>
                    {
                        columns.Bound(p => p.OrgRegProgramUserId).Hidden();
                        columns.Bound(c => c.FirstName);
                        columns.Bound(c => c.LastName);
                        columns.Bound(c => c.PhoneNumber);
                        columns.Bound(c => c.FacilityName);
                        columns.Template(m =>
                        {
                        })
                                .ClientTemplate(value: "<input type='submit' value='Send Invite' class='btn btn-sm btn-primary' formaction='/Invite/InviteExistingUser?orgRegProgUserIdString=#: OrgRegProgramUserId #&industryOrgRegProgramId=" + Model.OrgRegProgramUserId + "&invitationType=" + Model.InvitationType + "' formmethod='post' />")
                                .Width(pixelWidth: 90);
                    })
                    .Pageable(pageable => pageable.Enabled(false))
                    .Selectable(selectable => selectable.Enabled(false))
                    .Sortable(sortable => sortable.Enabled(false))
                    .Filterable(filterable => filterable.Enabled(false))
                    .Resizable(resizable => resizable.Columns(false))
                    .Scrollable(s => s.Height(value: "auto"))
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        .Model(model => model.Id(p => p.OrgRegProgramUserId))
                        .ServerOperation(enabled: false)
                        .Batch(enabled: true)
                    )
                    )
                </div>
            </div>


        </section>@*.box-body*@
        <div class="box-footer">
            <div class="form-group pull-right">
                @*<input id="foundUserInviteButton" type="submit" value="Send Invite" class="btn btn-sm btn-primary"
                       formaction='@Url.Action("Invite","Authority")' formmethod="post" />*@
                <input type="button" id="cancelInviteBtn" value="Cancel" class="btn btn-sm btn-primary" />
            </div>
        </div><!-- box-footer -->
    </div>

}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/invite")
}