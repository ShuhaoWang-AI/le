@using Linko.LinkoExchange.Core.Enum
@using Linko.LinkoExchange.Web.ViewModels.ReportPackage
@using Linko.LinkoExchange.Web.ViewModels.Shared
@{
    ViewBag.Title = "Report Packages";
}

<section>
    <ol class="breadcrumb">
        <li>
            <a href="#" onclick="location.href = '@Url.Action(actionName:"Index", controllerName:ViewBag.PortalName.ToLower().Equals(value:"authority") ? "Authority" : "Industry")'"><i class=""></i> Home </a>
        </li>
        <li class="active">@Label.ResourceManager.GetString(name:"Breadcrumb_" + ViewBag.ReportStatusName.ToString())</li>
    </ol>
</section>

<div class="box box-primary">
    <div class="box-header with-border">
        <h3 class="box-title">@Label.ResourceManager.GetString(name:"Breadcrumb_" + ViewBag.ReportStatusName.ToString())</h3>
        <div class="box-tools pull-right">
            @if (ViewBag.ReportStatusName == ReportStatusName.Draft)
            {
                <button class="btn btn-primary btn-sm" onclick="location.href = '@Url.Action(actionName:"NewReportPackage", controllerName:"ReportPackage")'">Create New</button>
            }
            <button class="btn btn-box-tool" data-widget="collapse">
                <i class="fa fa-minus"></i>
            </button>
        </div>
    </div>

    <section class="box-body form-horizontal">
        @Html.ValidationSummary(excludePropertyErrors:true, message:Message.ValidationSummaryHeaderText, htmlAttributes:new
                                                                                                                        {
                                                                                                                            @class = "alert alert-info"
                                                                                                                        })
        @{
            var vm = new ConfirmationMessageViewModal
                     {
                         ShowMessage = TempData[key:"ReportPackageDeletedSucceed"] != null,
                         Messaage = "Report package deleted successfully."
                     };

            @Html.Partial(partialViewName:"_ConfirmationMessageView", model:vm)
        }
        <div class="col-md-12 k-grid-header hidden">
            @*made hidden as Chris decided to park this feature for now*@
            <div class="pull-right" style="height: 35px; padding-top: 5px;">
                <a class="k-button" href="#" id="saveGridSetting">Save Grid Setting</a>
                <a class="k-button" href="#" id="loadGridSetting">Load Grid Setting</a>
                <a class="k-button" href="#" id="removeGridSetting">Remove Grid Setting</a>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-12">
                @* grid name should be start with grid for centralized error handling *@
                @(Html.Kendo().Grid<ReportPackageViewModel>()
                      .Name(componentName:"gridReportPackage")
                      .Columns(columns =>
                               {
                                   columns.Bound(c => c.OrganizationReferenceNumber)
                                          .Hidden(value:new[] {"Draft", "ReadyToSubmit", "Submitted", "Repudiated"}.Contains(value:(string) ViewBag.ReportStatusName.ToString()));
                                   columns.Bound(c => c.OrganizationName)
                                          .Hidden(value:new[] {"Draft", "ReadyToSubmit", "Submitted", "Repudiated"}.Contains(value:(string) ViewBag.ReportStatusName.ToString()));
                                   columns.Bound(c => c.Name);
                                   columns.Bound(c => c.PeriodStartDateTimeLocal).Format(value:"{0:MM-dd-yyyy}");
                                   columns.Bound(c => c.PeriodEndDateTimeLocal).Format(value:"{0:MM-dd-yyyy}");
                                   columns.Bound(c => c.SubmissionDateTimeLocal).Format(value:"{0:MM-dd-yyyy}")
                                          .Hidden(value:new[] {"Draft", "ReadyToSubmit"}.Contains(value:(string) ViewBag.ReportStatusName.ToString()));
                                   columns.Bound(c => c.Submitter)
                                          .Hidden(value:new[] {"Draft", "ReadyToSubmit", "SubmittedPendingReview", "RepudiatedPendingReview", "All"}.Contains(value:(string) ViewBag.ReportStatusName.ToString()));
                                   columns.Bound(c => c.RepudiationDateTimeLocal).Format(value:"{0:MM-dd-yyyy}")
                                          .Hidden(value:new[] {"Draft", "ReadyToSubmit", "Submitted", "SubmittedPendingReview"}.Contains(value:(string) ViewBag.ReportStatusName.ToString()));
                                   columns.Bound(c => c.Repudiator)
                                          .Hidden(value:new[] {"Draft", "ReadyToSubmit", "Submitted", "SubmittedPendingReview", "RepudiatedPendingReview", "All"}.Contains(value:(string) ViewBag.ReportStatusName.ToString()));
                                   columns.Bound(c => c.LastModificationDateTimeLocal).Format(value:"{0:MM-dd-yyyy}")
                                          .Hidden(value:new[] {"Submitted", "Repudiated", "SubmittedPendingReview", "RepudiatedPendingReview", "All"}.Contains(value:(string) ViewBag.ReportStatusName.ToString()));
                                   columns.Bound(c => c.LastModifierUserName)
                                          .Hidden(value:new[] {"Submitted", "Repudiated", "SubmittedPendingReview", "RepudiatedPendingReview", "All"}.Contains(value:(string) ViewBag.ReportStatusName.ToString()));
                                   columns.Bound(c => c.LastSentDateTimeLocal).Format(value:"{0:MM-dd-yyyy}")
                                          .Hidden(value:new[] {"Draft", "ReadyToSubmit", "Submitted", "Repudiated", "SubmittedPendingReview"}.Contains(value:(string) ViewBag.ReportStatusName.ToString()));
                                   columns.Template(m => { })
                                          .ClientTemplate(value:"<div class='fa fa-chevron-right pull-right'></div>")
                                          .Width(pixelWidth:30);
                               })
                      .Pageable(pageable => pageable
                                                .PageSizes(pageSizes:new List<object> {"all", 15, 25, 50, 75})
                                                .Refresh(enabled:true)
                                                .Input(enabled:true)
                                                .Numeric(enabled:false)
                      )
                      .Selectable(selectable =>
                                  {
                                      selectable.Mode(mode:GridSelectionMode.Single);
                                      selectable.Type(type:GridSelectionType.Row);
                                  })
                      .Sortable(sortable => { sortable.SortMode(value:GridSortMode.MultipleColumn); })
                      .Filterable(filterable =>
                                  {
                                      if (new[] {"Submitted", "Repudiated", "All"}.Contains(value:(string) ViewBag.ReportStatusName.ToString()))
                                      {
                                          filterable.Enabled(value:true).Mode(value:GridFilterMode.Row);
                                      }
                                      else
                                      {
                                          filterable.Enabled(value:false);
                                      }
                                  })
                      .Resizable(resizable => resizable.Columns(value:true))
                      .Scrollable(s => s.Height(value:"auto"))
                      .NoRecords(text:"No report package exists.")
                      .Events(events => { events.Change(handler:"gotoNextPage"); })
                      .DataSource(dataSource => dataSource
                                                    .Ajax()
                                                    .ServerOperation(enabled:true)
                                                    .Batch(enabled:true)
                                                    .Sort(sort =>
                                                          {
                                                              if (new[] {"Repudiated", "RepudiatedPendingReview", "All"}.Contains(value:(string) ViewBag.ReportStatusName.ToString()))
                                                              {
                                                                  sort.Add(memberName:"RepudiationDateTimeLocal").Descending();
                                                              }

                                                              if (new[] {"Submitted", "SubmittedPendingReview", "RepudiatedPendingReview", "All"}.Contains(value:(string) ViewBag.ReportStatusName.ToString()))
                                                              {
                                                                  sort.Add(memberName:"SubmissionDateTimeLocal").Descending();
                                                              }
                                                              sort.Add(memberName:"Name").Ascending();
                                                              sort.Add(memberName:"PeriodStartDateTimeLocal").Ascending();
                                                              sort.Add(memberName:"PeriodEndDateTimeLocal").Ascending();
                                                          }) // <-- initial sort expression
                                                    .Read(read => read.Action(actionName:"ReportPackages_Read", controllerName:"ReportPackage", routeValues:new
                                                                                                                                                            {
                                                                                                                                                                reportStatus = ViewBag.ReportStatusName
                                                                                                                                                            }))
                                                    .PageSize(pageSize:15)
                                                    .Events(events => events.Error(handler:"error_handler.bind({gridId: '#gridReportPackage'})"))
                      )
                      )
            </div>
        </div>
    </section>
</div>

@section Scripts {
    <script type="text/javascript">
        gotoNextPage = function() {
            var grid = $("#gridReportPackage").data("kendoGrid");
            var postUrl = "@Url.Action(actionName:"ReportPackages_Select", controllerName:"ReportPackage")";

            doAjaxAction(grid, postUrl, "", "Select a report package.");
        };

        $(function() {
            var gridId = "gridReportPackage";
            var grid = $("#" + gridId).data("kendoGrid");
            var localStorageKey = "@ViewBag.UserName.ToLower()" + "_" + "@ViewBag.PortalName.ToLower()" + "_" + "@ViewBag.ReportStatusName" + "_" + gridId + "_gridOptions";

            $("#saveGridSetting")
                .click(function(e) {
                    e.preventDefault();
                    localStorage[localStorageKey] = window.kendo.stringify(grid.getOptions());
                    $.notify({
                        // options
                        message: 'Grid setting saved in current browser successfully!'
                    }, {
                        type: 'success'
                    });
                });

            $("#loadGridSetting")
                .click(function(e) {
                    e.preventDefault();
                    var options = localStorage[localStorageKey];
                    if (options) {
                        grid.setOptions(JSON.parse(options));
                        $.notify({
                            // options
                            message: 'Grid setting loaded successfully!'
                        }, {
                            type: 'success'
                        });
                    } else {
                        $.notify({
                            // options
                            message: 'There is no grid setting was saved before to load!'
                        }, {
                            type: 'danger'
                        });
                    }
                });

            $("#removeGridSetting")
                .click(function(e) {
                    e.preventDefault();
                    var options = localStorage[localStorageKey];
                    if (options) {
                        localStorage.removeItem(localStorageKey);
                        $.notify({
                            // options
                            message: 'Grid setting removed from current browser successfully!'
                        }, {
                            type: 'success'
                        });
                    } else {
                        $.notify({
                            // options
                            message: 'There is no grid setting was saved before to removed!'
                        }, {
                            type: 'danger'
                        });
                    }
                });
        });

    </script>
}