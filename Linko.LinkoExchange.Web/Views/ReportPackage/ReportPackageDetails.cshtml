@using Linko.LinkoExchange.Core.Enum
@using Linko.LinkoExchange.Web.ViewModels.Shared
@model Linko.LinkoExchange.Web.ViewModels.ReportPackage.ReportPackageViewModel
@{
    ViewBag.Title = "Report Package Details";
}

@using (Html.BeginForm(actionName:null, controllerName:null, method:FormMethod.Post, htmlAttributes:new
                                                                                                    {
                                                                                                        id = "LinkoExchangeForm"
                                                                                                    }))
{
    @Html.AntiForgeryToken()

    <section>
        <ol class="breadcrumb">
            <li>
                <a href="#" onclick="location.href = '@Url.Action(actionName:"Index", controllerName:Model.IsCurrentPortalAuthority ? "Authority" : "Industry")'"><i class=""></i> Home </a>
            </li>
            <li>
                <a href="#" onclick="location.href = '@Url.Action(actionName:"ReportPackages", controllerName:"ReportPackage", routeValues:new {reportStatus = Model.Status})'"><i class=""></i> Report Package </a>
            </li>
            <li class="active">
                Details
            </li>
        </ol>
    </section>

    <div class="box box-primary">
        <div class="box-header with-border">
            <h3 class="box-title">
                Report
            </h3>

            <div class="box-tools pull-right">

                @switch (Model.Status)
                {
                    case ReportStatusName.Draft:
                        <strong class="bg-yellow btn-sm text-info"> &nbsp;&nbsp;@Label.ResourceManager.GetString(name:Model.Status.ToString())&nbsp; </strong>
                        break;
                    case ReportStatusName.ReadyToSubmit:
                        <strong class="bg-lime-active btn-sm text-info"> &nbsp;&nbsp;@Label.ResourceManager.GetString(name:Model.Status.ToString())&nbsp; </strong>
                        break;
                    case ReportStatusName.Submitted:
                        <strong class="bg-aqua btn-sm text-info"> &nbsp;&nbsp;@Label.ResourceManager.GetString(name:Model.Status.ToString())&nbsp; </strong>
                        break;
                    case ReportStatusName.Repudiated:
                        <strong class="bg-fuchsia btn-sm text-info"> &nbsp;&nbsp;@Label.ResourceManager.GetString(name:Model.Status.ToString())&nbsp; </strong>
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }

                <button class="btn btn-box-tool" data-widget="collapse">
                    <i class="fa fa-minus"></i>
                </button>
            </div>
        </div>

        <section class="box-body form-horizontal">
            @Html.ValidationSummary(excludePropertyErrors:false, message:Message.ValidationSummaryHeaderText, htmlAttributes:new
                                                                                                                             {
                                                                                                                                 @class = "alert alert-danger"
                                                                                                                             })
            @if (ViewBag.ShowSuccessMessage != null && ViewBag.ShowSuccessMessage)
            {
                <div class="alert alert-dismissible alert-success">
                    <button aria-hidden="true" class="close" data-dismiss="alert" type="button">&times;</button>
                    <h5>
                        <i class="fa fa-check icon"></i>
                        @ViewBag.SuccessMessage
                    </h5>
                </div>
            }

            <div aria-labelledby="DeleteSampleModalLabel" class="col-md-12 fade modal modal-info" id="DeleteSampleModal" role="dialog" tabindex="-1">
                <div class="modal-dialog" role="document">
                    <div class="alert alert-dismissible alert-info modal-content">
                        <button aria-label="Close" class="close" data-dismiss="modal" type="button">&times;</button>
                        <h4 class="box-title">Delete Report Package</h4>

                        <div>
                            <p>
                                Do you want to delete this report package?<br />
                            </p>
                            <div class="form-group">
                                <div class="pull-right">
                                    <button type="submit" class="btn btn-primary btn-sm" formaction="@Url.Action(actionName:"DeleteReportPackage", controllerName:"ReportPackage", routeValues:new {id = Model.Id})" formmethod="post">
                                        Yes
                                    </button>
                                    <button aria-label="Close" class="btn btn-primary btn-sm" data-dismiss="modal" type="button">No</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="form-group">
                @Html.HiddenFor(model => model.Id)
                @Html.HiddenFor(model => model.IsSubmissionBySignatoryRequired)
                @Html.HiddenFor(model => model.FailedCountPassword)
                @Html.HiddenFor(model => model.FailedCountKbq)

            </div>
            <div class="form-group">

                @Html.LabelFor(model => model.Name, htmlAttributes:new
                                                                   {
                                                                       @class = "control-label col-md-2"
                                                                   })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Name, additionalViewData:new
                                                                            {
                                                                                htmlAttributes = new
                                                                                                 {
                                                                                                     @class = "form-control",
                                                                                                     @readonly = "readonly"
                                                                                                 }
                                                                            })
                </div>

                @Html.LabelFor(model => model.ReportPeriod, htmlAttributes:new
                                                                           {
                                                                               @class = "control-label col-md-2"
                                                                           })

                <div class="col-md-4">
                    @Html.EditorFor(model => model.ReportPeriod, additionalViewData:new
                                                                                    {
                                                                                        htmlAttributes = new
                                                                                                         {
                                                                                                             @class = "form-control",
                                                                                                             @readonly = "readonly"
                                                                                                         }
                                                                                    })
                </div>
            </div>
            <div class="form-group">

                @Html.LabelFor(model => model.OrganizationName, htmlAttributes:new
                                                                               {
                                                                                   @class = "control-label col-md-2"
                                                                               })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.OrganizationName, additionalViewData:new
                                                                                        {
                                                                                            htmlAttributes = new
                                                                                                             {
                                                                                                                 @class = "form-control",
                                                                                                                 @readonly = "readonly"
                                                                                                             }
                                                                                        })
                </div>

                @Html.HiddenFor(model => model.OrganizationRegulatoryProgramId)
                @Html.LabelFor(model => model.OrganizationReferenceNumber, htmlAttributes:new
                                                                                          {
                                                                                              @class = "control-label col-md-2"
                                                                                          })

                <div class="col-md-4">
                    @Html.EditorFor(model => model.OrganizationReferenceNumber, additionalViewData:new
                                                                                                   {
                                                                                                       htmlAttributes = new
                                                                                                                        {
                                                                                                                            @class = "form-control",
                                                                                                                            @readonly = "readonly"
                                                                                                                        }
                                                                                                   })
                </div>
            </div>
            @if (Model.IsCurrentPortalAuthority)
            {
                <div class="form-group">

                    @Html.LabelFor(model => model.CtsEventTypeName, htmlAttributes:new
                                                                                   {
                                                                                       @class = "control-label col-md-2"
                                                                                   })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.CtsEventTypeName, additionalViewData:new
                                                                                            {
                                                                                                htmlAttributes = new
                                                                                                                 {
                                                                                                                     @class = "form-control",
                                                                                                                     @readonly = "readonly"
                                                                                                                 }
                                                                                            })
                    </div>
                </div>
            }
        </section>
    </div>

    foreach (var category in Model.ReportPackageTemplateElementCategories)
    {
        switch (category)
        {
            case ReportElementCategoryName.SamplesAndResults:
                foreach (var samplesAndResultType in Model.SamplesAndResultsTypes)
                {
                    <div class="box box-primary">
                        <div class="box-header with-border">
                            <h3 class="box-title">
                                @samplesAndResultType.Name
                            </h3>
                            <div class="box-tools pull-right">
                                <button class="btn btn-box-tool" data-widget="collapse">
                                    <i class="fa fa-minus"></i>
                                </button>
                            </div>
                        </div>

                        <section class="box-body form-horizontal">
                        </section>

                    </div>
                }
                break;
            case ReportElementCategoryName.Attachments:
                foreach (var attachmentType in Model.AttachmentTypes)
                {
                    <div class="box box-primary">
                        <div class="box-header with-border">
                            <h3 class="box-title">
                                @attachmentType.Name
                            </h3>
                            <div class="box-tools pull-right">
                                <button class="btn btn-box-tool" data-widget="collapse">
                                    <i class="fa fa-minus"></i>
                                </button>
                            </div>
                        </div>

                        <section class="box-body form-horizontal">
                            <div class="form-group">
                                <div class="col-md-12">
                                    @* grid name should be start with grid for centralized error handling *@
                                    @(Html.Kendo().Grid<AttachmentViewModel>()
                                          .Name(componentName: "gridAttachment_" + attachmentType.Id)
                                          .Columns(columns =>
                                          {
                                              if (Model.Status == ReportStatusName.Draft)
                                              {
                                                  columns.Template(c =>
                                                                   {
                                                                   })
                                                         .ClientTemplate(value:"<input type='checkbox' class='checkbox' />")
                                                         .HtmlAttributes(attributes:new
                                                                                    {
                                                                                        align = "center"
                                                                                    })
                                                         .Width(pixelWidth:40);
                                              }
                                              columns.Bound(c => c.Name)
                                                     .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators: false).Operator(defaultOperator: "contains")
                                                                                             .SuggestionOperator(filterType: FilterType.Contains)))
                                                                                             .ClientTemplate(value:Html.ActionLink(linkText: "#=Name#", actionName: "DownloadAttachment", routeValues: new
                                                                                             {
                                                                                                 id = "#=Id#"
                                                                                             }).ToHtmlString());
                                              columns.Bound(c => c.OriginalFileName)
                                                     .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators: false).Operator(defaultOperator: "contains")
                                                                                             .SuggestionOperator(filterType: FilterType.Contains)));
                                              columns.Bound(c => c.Description)
                                                     .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators: false).Operator(defaultOperator: "contains")
                                                                                             .SuggestionOperator(filterType: FilterType.Contains)));
                                              columns.Bound(c => c.UploadDateTimeLocal).Format(value: "{0:MM/dd/yyyy hh:mm tt}")
                                                     .Filterable(ftb => ftb.Enabled(value: true).Extra(value: true));
                                              columns.Bound(c => c.UploaderUserFullName)
                                                     .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators: false).Operator(defaultOperator: "contains")
                                                                                             .SuggestionOperator(filterType: FilterType.Contains)));
                                          })
                                          .Pageable(pageable => pageable
                                                                    .PageSizes(pageSizes: new List<object> { "all", 15, 25, 50, 75 })
                                                                    .Refresh(enabled: true)
                                                                    .Input(enabled: true)
                                                                    .Numeric(enabled: false)
                                          )
                                          .Selectable(selectable =>
                                          {
                                              selectable.Mode(mode: GridSelectionMode.Single);
                                              selectable.Type(type: GridSelectionType.Row);
                                          })
                                          .Sortable(sortable =>
                                          {
                                              sortable.SortMode(value: GridSortMode.MultipleColumn);
                                          })
                                          .Filterable(filterable => filterable.Enabled(value: false).Mode(value: GridFilterMode.Row))
                                          .Resizable(resizable => resizable.Columns(value: true))
                                          .Scrollable(s => s.Height(value: "auto"))
                                          .NoRecords(text: "No attachment exists.")
                                          .DataSource(dataSource => dataSource
                                                                        .Ajax()
                                                                        .ServerOperation(enabled: false)
                                                                        .Batch(enabled: true)
                                                                        .Sort(sort =>
                                                                        {
                                                                            sort.Add(memberName: "UploadDateTimeLocal").Descending();
                                                                            sort.Add(memberName: "Name").Ascending();
                                                                        }) // <-- initial sort expression
                                                                        .Read(read => read.Action(actionName: "Attachments_Read", controllerName: "ReportPackage", routeValues: new
                                                                        {
                                                                            reportPackageElementTypeId = attachmentType.Id.GetValueOrDefault(),
                                                                            reportStatusName = Model.Status
                                                                        }))
                                                                        .PageSize(pageSize: 15)
                                                                        .Events(events => events.Error(handler: "error_handler"))
                                          )
                                    )
                                </div>
                            </div>
                        </section>

                    </div>
                }
                break;
            case ReportElementCategoryName.Certifications:
                foreach (var certificationType in Model.CertificationTypes)
                {
                    <div class="box box-primary">
                        <div class="box-header with-border">
                            <h3 class="box-title">
                                @certificationType.Name
                            </h3>
                            <div class="box-tools pull-right">
                                <button class="btn btn-box-tool" data-widget="collapse">
                                    <i class="fa fa-minus"></i>
                                </button>
                            </div>
                        </div>

                        <section class="box-body form-horizontal">
                            <p class="text-justify">
                                @certificationType.Content
                            </p>
                        </section>
                    </div>
                }
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    }

    // Comments
    <div class="box box-primary">
        <div class="box-header with-border">
            <h3 class="box-title">Comments</h3>
            <div class="box-tools pull-right">
                <button class="btn btn-box-tool" data-widget="collapse">
                    <i class="fa fa-minus"></i>
                </button>
            </div>
        </div>
        <div class="box-body form-horizontal">
            <div class="form-group">
                <div class="col-md-12">
                    @if (Model.Status == ReportStatusName.Draft)
                    {
                        @Html.EditorFor(model => model.Comments, additionalViewData:new
                                                                                    {
                                                                                        htmlAttributes = new
                                                                                                         {
                                                                                                             @class = "form-control",
                                                                                                             placeholder = "Enter your Comments",
                                                                                                             rows = "3"
                                                                                                         }
                                                                                    })
                    }
                    else
                    {
                        <p class="text-justify">
                            @Model.Comments
                        </p>
                    }
                </div>
            </div>
        </div>
    </div>

    if (Model.CanCurrentUserSubmitAndReputiate && (Model.Status == ReportStatusName.ReadyToSubmit))
    {
        <div class="box box-primary" id="divSignAndSubmitReport">
            <div class="box-header with-border">
                <h3 class="box-title">Sign and Submit Report</h3>
                <div class="box-tools pull-right">
                    <button class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                </div>
            </div>
            <div class="box-body form-horizontal">
                @if (ViewBag.ShowSubmissionValidationErrorMessage != null && ViewBag.ShowSubmissionValidationErrorMessage)
                {
                    <div class="alert alert-dismissible alert-danger">
                        <button aria-hidden="true" class="close" data-dismiss="alert" type="button">&times;</button>
                        <h5>
                            <i class="fa fa-close icon"></i>
                            @ViewBag.SubmissionValidationErrorMessage
                        </h5>
                    </div>
                }

                <div class="form-group">
                    @Html.LabelFor(m => m.Password, htmlAttributes:new {@class = "col-md-4 control-label required"})
                    <div class="col-md-6">
                        @Html.PasswordFor(m => m.Password, htmlAttributes:new {@class = "form-control"})
                        @Html.ValidationMessageFor(m => m.Password, validationMessage:"", htmlAttributes:new {@class = "text-red"})
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Answer, labelText:Model.Question, htmlAttributes:new {@class = "col-md-4 control-label required"})
                    @Html.HiddenFor(model => model.Question)
                    @Html.HiddenFor(model => model.QuestionAnswerId)

                    <div class="col-md-6">
                        @Html.TextBoxFor(m => m.Answer, htmlAttributes:new {@class = "form-control", autocomplete = "off"})
                        @Html.ValidationMessageFor(m => m.Answer, validationMessage:"", htmlAttributes:new {@class = "text-red"})
                    </div>
                </div>
            </div>

            <div class="box-footer">
                <div class="form-group pull-right">
                    <input type="submit" value="Sign and Submit" class="btn btn-primary btn-sm" formaction="@Url.Action(actionName:"SignAndSubmit", controllerName:"ReportPackage", routeValues:new {id = Model.Id})#divSignAndSubmitReport" formmethod="post" />
                </div>
            </div>
        </div>
    }

    if ((Model.Status == ReportStatusName.Submitted)|| (Model.Status == ReportStatusName.Repudiated))
    {
        <div class="box box-primary" id="divSignAndSubmitReport">
            <div class="box-header with-border">
                <h3 class="box-title">Submission Confirmation</h3>
                <div class="box-tools pull-right">
                    <button class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                </div>
            </div>
            <div class="box-body form-horizontal">
                    <div class="form-group">
                        @Html.LabelFor(m => m.Submitter, htmlAttributes:new {@class = "col-md-2 control-label"})
                        <div class="col-md-4">
                             @Html.EditorFor(model => model.Submitter, additionalViewData:new
                                                                            {
                                                                                htmlAttributes = new
                                                                                                 {
                                                                                                     @class = "form-control",
                                                                                                     @readonly = "readonly"
                                                                                                 }
                                                                            })
                        </div>
                        @Html.LabelFor(m => m.SubmitterTitleRole, htmlAttributes:new {@class = "col-md-2 control-label"})
                        <div class="col-md-4">
                             @Html.EditorFor(model => model.SubmitterTitleRole, additionalViewData:new
                                                                            {
                                                                                htmlAttributes = new
                                                                                                 {
                                                                                                     @class = "form-control",
                                                                                                     @readonly = "readonly"
                                                                                                 }
                                                                            })
                        </div>
                    </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.SubmissionDateTimeLocal, htmlAttributes:new {@class = "col-md-2 control-label"})
                    <div class="col-md-4">
                        @(Html.Kendo().DateTimePicker()
                              .Name(componentName: "SubmissionDateTimeLocal")
                              .Value(date:Model.SubmissionDateTimeLocal)
                              .Format(format:"MM/dd/yyyy hh:mm tt")
                              .Max(date:DateTime.Now)
                              .HtmlAttributes(attributes:new
                                                         {
                                                             @readonly = true,
                                                             style = "width:210px;"
                                                         }))
                    </div>
                </div>
            </div>
        </div>
    }

    if (Model.CanCurrentUserSubmitAndReputiate && (Model.Status == ReportStatusName.Submitted))
    {
        <div class="box box-primary" id="divRepudiateReport">
            <div class="box-header with-border">
                <h3 class="box-title">Repudiate Report</h3>
                <div class="box-tools pull-right">
                    <button class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                </div>
            </div>
            <div class="box-body form-horizontal">
                @if (ViewBag.ShowRepudiateValidationErrorMessage != null && ViewBag.ShowRepudiateValidationErrorMessage)
                {
                    <div class="alert alert-dismissible alert-danger">
                        <button aria-hidden="true" class="close" data-dismiss="alert" type="button">&times;</button>
                        <h5>
                            <i class="fa fa-close icon"></i>
                            @ViewBag.RepudiateValidationErrorMessage
                        </h5>
                    </div>
                }

                <div class="form-group">
                    @Html.LabelFor(m => m.RepudiationReasonId, htmlAttributes:new {@class = "col-md-4 control-label"})
                    <div class="col-md-6">
                        @Html.DropDownList(name: "RepudiationReasonId", selectList: Model.AvailableRepudiationReasonNames, htmlAttributes: new
                       {
                           @class = "form-control input-sm"
                       })

                        @Html.HiddenFor(model => model.RepudiationReasonId)
                        @Html.HiddenFor(model => model.RepudiationReasonName)
                        @Html.ValidationMessageFor(m => m.RepudiationReasonId, validationMessage:"", htmlAttributes:new {@class = "text-red"})
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.RepudiationComments, htmlAttributes:new {@class = "col-md-4 control-label"})
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.RepudiationComments, additionalViewData:new
                                                                                    {
                                                                                        htmlAttributes = new
                                                                                                         {
                                                                                                             @class = "form-control",
                                                                                                             placeholder = "Enter your Comments",
                                                                                                             rows = "3"
                                                                                                         }
                                                                                    })
                        @Html.ValidationMessageFor(m => m.RepudiationComments, validationMessage:"", htmlAttributes:new {@class = "text-red"})
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Password, htmlAttributes:new {@class = "col-md-4 control-label required"})
                    <div class="col-md-6">
                        @Html.PasswordFor(m => m.Password, htmlAttributes:new {@class = "form-control"})
                        @Html.ValidationMessageFor(m => m.Password, validationMessage:"", htmlAttributes:new {@class = "text-red"})
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Answer, labelText:Model.Question, htmlAttributes:new {@class = "col-md-4 control-label required"})
                    @Html.HiddenFor(model => model.Question)
                    @Html.HiddenFor(model => model.QuestionAnswerId)

                    <div class="col-md-6">
                        @Html.TextBoxFor(m => m.Answer, htmlAttributes:new {@class = "form-control", autocomplete = "off"})
                        @Html.ValidationMessageFor(m => m.Answer, validationMessage:"", htmlAttributes:new {@class = "text-red"})
                    </div>
                </div>
            </div>

            <div class="box-footer">
                <div class="form-group pull-right">
                    <input type="submit" value="Repudiate" class="btn btn-primary btn-sm" formaction="@Url.Action(actionName:"RepudiateReport", controllerName:"ReportPackage", routeValues:new {id = Model.Id})#divRepudiateReport" formmethod="post" />
                </div>
            </div>
        </div>
    }

    if ((Model.Status == ReportStatusName.Repudiated))
    {
        <div class="box box-primary" id="divSignAndSubmitReport">
            <div class="box-header with-border">
                <h3 class="box-title">Repudiation Confirmation</h3>
                <div class="box-tools pull-right">
                    <button class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                </div>
            </div>
            <div class="box-body form-horizontal">
                <div class="form-group">
                    @Html.LabelFor(m => m.Repudiator, htmlAttributes:new {@class = "col-md-2 control-label"})
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.Repudiator, additionalViewData:new
                                                                                      {
                                                                                          htmlAttributes = new
                                                                                                           {
                                                                                                               @class = "form-control",
                                                                                                               @readonly = "readonly"
                                                                                                           }
                                                                                      })
                    </div>
                    @Html.LabelFor(m => m.RepudiatorTitleRole, htmlAttributes:new {@class = "col-md-2 control-label"})
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.RepudiatorTitleRole, additionalViewData:new
                                                                                               {
                                                                                                   htmlAttributes = new
                                                                                                                    {
                                                                                                                        @class = "form-control",
                                                                                                                        @readonly = "readonly"
                                                                                                                    }
                                                                                               })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.RepudiationDateTimeLocal, htmlAttributes:new {@class = "col-md-2 control-label"})
                    <div class="col-md-4">
                        @(Html.Kendo().DateTimePicker()
                              .Name(componentName: "RepudiationDateTimeLocal")
                              .Value(date:Model.RepudiationDateTimeLocal)
                              .Format(format:"MM/dd/yyyy hh:mm tt")
                              .Max(date:DateTime.Now)
                              .HtmlAttributes(attributes:new
                                                         {
                                                             @readonly = true,
                                                             style = "width:210px;"
                                                         }))
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.RepudiationReasonName, htmlAttributes:new {@class = "col-md-2 control-label"})
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.RepudiationReasonName, additionalViewData:new
                                                                                      {
                                                                                          htmlAttributes = new
                                                                                                           {
                                                                                                               @class = "form-control",
                                                                                                               @readonly = "readonly"
                                                                                                           }
                                                                                      })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.RepudiationComments, htmlAttributes:new {@class = "col-md-2 control-label"})
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.RepudiationComments, additionalViewData:new
                                                                                               {
                                                                                                   htmlAttributes = new
                                                                                                                    {
                                                                                                                        @class = "form-control",
                                                                                                                        @readonly = "readonly",
                                                                                                                        rows = "3"
                                                                                                                    }
                                                                                               })
                    </div>
                </div>
            </div>
        </div>
    }
    

    if (Model.IsCurrentPortalAuthority && ((Model.Status == ReportStatusName.Submitted) || (Model.Status == ReportStatusName.Repudiated)))
    {
        <div class="box box-primary" id="divSendToLinkoCTS">
            <div class="box-header with-border">
                <h3 class="box-title">Send to LinkoCTS</h3>
                <div class="box-tools pull-right">
                    <button class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                </div>
            </div>
            <div class="box-body form-horizontal">
                <div class="form-group">
                    @Html.LabelFor(m => m.LastSender, htmlAttributes:new {@class = "col-md-2 control-label"})
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.LastSender, additionalViewData:new
                                                                                      {
                                                                                          htmlAttributes = new
                                                                                                           {
                                                                                                               @class = "form-control",
                                                                                                               @readonly = "readonly"
                                                                                                           }
                                                                                      })
                    </div>
                    @Html.LabelFor(m => m.LastSentDateTimeLocal, htmlAttributes:new {@class = "col-md-2 control-label"})
                    <div class="col-md-4">
                        @(Html.Kendo().DateTimePicker()
                              .Name(componentName: "LastSentDateTimeLocal")
                              .Value(date:Model.LastSentDateTimeLocal)
                              .Format(format:"MM/dd/yyyy hh:mm tt")
                              .Max(date:DateTime.Now)
                              .HtmlAttributes(attributes:new
                                                         {
                                                             @readonly = true,
                                                             style = "width:210px;"
                                                         }))
                    </div>
                </div>
            </div>

            <div class="box-footer">
                <div class="form-group pull-right">
                    <input type="submit" value="Send to CTS" class="btn btn-primary btn-sm" formaction="@Url.Action(actionName:"SendToLinkoCTS", controllerName:"ReportPackage", routeValues:new {id = Model.Id})#divSendToLinkoCTS" formmethod="post" />
                </div>
            </div>
        </div>
    }
    // Buttons

    <div class="box box-default" id="divFooter">
        <div class="box-body form-horizontal">
           
            @if (ViewBag.ShowValidateCorMessage != null && ViewBag.ShowValidateCorMessage)
            {
                <div class="alert alert-dismissible alert-info">
                    <button aria-hidden="true" class="close" data-dismiss="alert" type="button">&times;</button>
                    <h5>
                        <i class="fa fa-info icon"></i>
                        @(ViewBag.VerifyResult.Valid ? "COR Validation Successful." : "COR Validation Failed.")
                    </h5>
                    <p>
                        @(ViewBag.VerifyResult.Valid ? "The COR is valid." : "The COR is invalid.")
                    </p>
                    <p style="word-wrap: break-word">
                        @("LinkoExchange COR Signature : " + ViewBag.VerifyResult.DigitalSignature)
                    </p>
                </div>
            }

            <div class="box-tools pull-right">

                @switch (Model.Status)
                {
                    case ReportStatusName.Draft:
                        <input type="submit" value="Save Draft" class="btn btn-primary btn-sm" formaction="@Url.Action(actionName:"ReportPackageDetails", controllerName:"ReportPackage", routeValues:new {id = Model.Id})" formmethod="post" />
                        <input type="submit" value="Ready to Submit" class="btn btn-primary btn-sm" formaction="@Url.Action(actionName:"ReadyToSubmit", controllerName:"ReportPackage", routeValues:new {id = Model.Id})" formmethod="post" />
                        <input class="btn btn-primary btn-sm" data-target="#DeleteSampleModal" data-toggle="modal" type="button" value="Delete Draft" />
                        break;
                    case ReportStatusName.ReadyToSubmit:
                        @Html.ActionLink(linkText:"Preview", actionName:"ReportPackagePreview", routeValues:new { id = Model.Id }, htmlAttributes:new { @class = "btn btn-primary btn-sm" })

                        <input type="submit" value="Enable Edit Report Package" class="btn btn-primary btn-sm" formaction="@Url.Action(actionName:"EnableReportPackage", controllerName:"ReportPackage")" formmethod="post" />

                        if (!Model.IsSubmissionBySignatoryRequired)
                        {
                            <input type="submit" value="Sign and Submit" class="btn btn-primary btn-sm" formaction="@Url.Action(actionName:"SignAndSubmit", controllerName:"ReportPackage", routeValues:new {id = Model.Id})" formmethod="post" />
                        }

                        <input class="btn btn-primary btn-sm" data-target="#DeleteSampleModal" data-toggle="modal" type="button" value="Delete Report Package" />
                        break;
                    case ReportStatusName.Submitted:
                    case ReportStatusName.Repudiated:
                        @Html.ActionLink(linkText:"Download COR", actionName:"DownloadCor", routeValues:new
                                                                                                        {
                                                                                                            id = Model.Id
                                                                                                        }, htmlAttributes:new
                                                                                                                          {
                                                                                                                              @class = "btn btn-primary btn-sm"
                                                                                                                          })
                        <input class="btn btn-primary btn-sm" type="submit" value="Validate COR" formaction="@Url.Action(actionName:"ValidateCor", controllerName:"ReportPackage", routeValues:new {id = Model.Id})#divFooter" formmethod="post" />
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }
            </div>
        </div>
    </div>

@section Scripts {
    @if (Model.CanCurrentUserSubmitAndReputiate && (Model.Status == ReportStatusName.Submitted))
    {
        <script>
             $(document)
            .ready(function()
            {
                $("#LinkoExchangeForm")
                    .submit(function(e)
                    {
                        //if (e.originalEvent.explicitOriginalTarget.id == "myButton")
                        //{
                        //    return true;
                        //}

                        try
                        {
                            $("#RepudiationReasonName").val($("#RepudiationReasonId option:selected").text());

                            return true;
                        }
                        catch (err)
                        {
                            alert(err);
                            return false;
                        }
                    });
            });
        </script>
    }
}}