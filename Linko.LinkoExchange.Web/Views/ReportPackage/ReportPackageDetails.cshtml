@using Linko.LinkoExchange.Core.Enum
@model Linko.LinkoExchange.Web.ViewModels.ReportPackage.ReportPackageViewModel
@{
    ViewBag.Title = "Report Package Details";
}

@using (Html.BeginForm(actionName:null, controllerName:null, method:FormMethod.Post, htmlAttributes:new
                                                                                                    {
                                                                                                        id = "ReportPackageDetailsForm"
                                                                                                    }))
{
    @Html.AntiForgeryToken()

    <section>
        <ol class="breadcrumb">
            <li>
                <a href="#" onclick="location.href = '@Url.Action(actionName:"Index", controllerName:ViewBag.PortalName.ToLower().Equals(value:"authority") ? "Authority" : "Industry")'"><i class=""></i> Home </a>
            </li>
            <li>
                <a href="#" onclick="location.href = '@Url.Action(actionName:"ReportPackages", controllerName:"ReportPackage", routeValues:new {reportStatus = Model.Status})'"><i class=""></i> Report Package </a>
            </li>
            <li class="active">
                Details
            </li>
        </ol>
    </section>

    <div class="box box-primary">
        <div class="box-header with-border">
            <h3 class="box-title">
                Report
            </h3>

            <div class="box-tools pull-right">

                @switch (Model.Status)
                {
                    case ReportStatusName.Draft:
                        <strong class="bg-yellow btn-sm text-info"> &nbsp;&nbsp;@Label.ResourceManager.GetString(name:Model.Status.ToString())&nbsp; </strong>
                        break;
                    case ReportStatusName.ReadyToSubmit:
                        <strong class="bg-lime-active btn-sm text-info"> &nbsp;&nbsp;@Label.ResourceManager.GetString(name:Model.Status.ToString())&nbsp; </strong>
                        break;
                    case ReportStatusName.SubmittedPendingReview:
                    case ReportStatusName.Submitted:
                        <strong class="bg-aqua btn-sm text-info"> &nbsp;&nbsp;@Label.ResourceManager.GetString(name:Model.Status.ToString())&nbsp; </strong>
                        break;
                    case ReportStatusName.RepudiatedPendingReview:
                    case ReportStatusName.Repudiated:
                        <strong class="bg-fuchsia btn-sm text-info"> &nbsp;&nbsp;@Label.ResourceManager.GetString(name:Model.Status.ToString())&nbsp; </strong>
                        break;
                    case ReportStatusName.All:
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }

                <button class="btn btn-box-tool" data-widget="collapse">
                    <i class="fa fa-minus"></i>
                </button>
            </div>
        </div>

        <section class="box-body form-horizontal">
            @Html.ValidationSummary(excludePropertyErrors:false, message:Message.ValidationSummaryHeaderText, htmlAttributes:new
                                                                                                                             {
                                                                                                                                 @class = "alert alert-danger"
                                                                                                                             })
            @if (ViewBag.ShowSuccessMessage != null && ViewBag.ShowSuccessMessage)
            {
                <div class="alert alert-dismissible alert-success">
                    <button aria-hidden="true" class="close" data-dismiss="alert" type="button">&times;</button>
                    <h5>
                        <i class="fa fa-check icon"></i>
                        @ViewBag.SuccessMessage
                    </h5>
                </div>
            }

            <div aria-labelledby="DeleteSampleModalLabel" class="col-md-12 fade modal modal-info" id="DeleteSampleModal" role="dialog" tabindex="-1">
                <div class="modal-dialog" role="document">
                    <div class="alert alert-dismissible alert-info modal-content">
                        <button aria-label="Close" class="close" data-dismiss="modal" type="button">&times;</button>
                        <h4 class="box-title">Delete Report Package</h4>

                        <div>
                            <p>
                                Do you want to delete this report package?<br />
                            </p>
                            <div class="form-group">
                                <div class="pull-right">
                                    <button type="submit" class="btn btn-primary btn-sm" formaction="@Url.Action(actionName:"DeleteReportPackage", controllerName:"ReportPackage", routeValues:new {id = Model.Id})" formmethod="post">
                                        Yes
                                    </button>
                                    <button aria-label="Close" class="btn btn-primary btn-sm" data-dismiss="modal" type="button">No</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.HiddenFor(model => model.Id)
            </div>
            <div class="form-group">

                @Html.LabelFor(model => model.Name, htmlAttributes:new
                                                                   {
                                                                       @class = "control-label col-md-2"
                                                                   })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Name, additionalViewData:new
                                                                            {
                                                                                htmlAttributes = new
                                                                                                 {
                                                                                                     @class = "form-control",
                                                                                                     @readonly = "readonly"
                                                                                                 }
                                                                            })
                </div>

                @Html.LabelFor(model => model.ReportPeriod, htmlAttributes:new
                                                                           {
                                                                               @class = "control-label col-md-2"
                                                                           })

                <div class="col-md-4">
                    @Html.EditorFor(model => model.ReportPeriod, additionalViewData:new
                                                                                    {
                                                                                        htmlAttributes = new
                                                                                                         {
                                                                                                             @class = "form-control",
                                                                                                             @readonly = "readonly"
                                                                                                         }
                                                                                    })
                </div>
            </div>
            <div class="form-group">

                @Html.LabelFor(model => model.OrganizationName, htmlAttributes:new
                                                                               {
                                                                                   @class = "control-label col-md-2"
                                                                               })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.OrganizationName, additionalViewData:new
                                                                                        {
                                                                                            htmlAttributes = new
                                                                                                             {
                                                                                                                 @class = "form-control",
                                                                                                                 @readonly = "readonly"
                                                                                                             }
                                                                                        })
                </div>

                @Html.HiddenFor(model => model.OrganizationRegulatoryProgramId)
                @Html.LabelFor(model => model.OrganizationReferenceNumber, htmlAttributes:new
                                                                                          {
                                                                                              @class = "control-label col-md-2"
                                                                                          })

                <div class="col-md-4">
                    @Html.EditorFor(model => model.OrganizationReferenceNumber, additionalViewData:new
                                                                                                   {
                                                                                                       htmlAttributes = new
                                                                                                                        {
                                                                                                                            @class = "form-control",
                                                                                                                            @readonly = "readonly"
                                                                                                                        }
                                                                                                   })
                </div>
            </div>
            @if (ViewBag.PortalName.ToLower().Equals(value:"authority"))
            {
                <div class="form-group">

                    @Html.LabelFor(model => model.CtsEventTypeName, htmlAttributes:new
                                                                                   {
                                                                                       @class = "control-label col-md-2"
                                                                                   })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.CtsEventTypeName, additionalViewData:new
                                                                                            {
                                                                                                htmlAttributes = new
                                                                                                                 {
                                                                                                                     @class = "form-control",
                                                                                                                     @readonly = "readonly"
                                                                                                                 }
                                                                                            })
                    </div>
                </div>
            }
        </section>
    </div>

    foreach (var category in Model.ReportPackageTemplateElementCategories)
    {
        switch (category)
        {
            case ReportElementCategoryName.SamplesAndResults:
                foreach (var samplesAndResultType in Model.SamplesAndResultsTypes)
                {
                    <div class="box box-primary">
                        <div class="box-header with-border">
                            <h3 class="box-title">
                                @samplesAndResultType.Name
                            </h3>
                            <div class="box-tools pull-right">
                                <button class="btn btn-box-tool" data-widget="collapse">
                                    <i class="fa fa-minus"></i>
                                </button>
                            </div>
                        </div>

                        <section class="box-body form-horizontal"></section>
                    </div>
                }
                break;
            case ReportElementCategoryName.Attachments:
                foreach (var attachmentType in Model.AttachmentTypes)
                {
                    <div class="box box-primary">
                        <div class="box-header with-border">
                            <h3 class="box-title">
                                @attachmentType.Name
                            </h3>
                            <div class="box-tools pull-right">
                                <button class="btn btn-box-tool" data-widget="collapse">
                                    <i class="fa fa-minus"></i>
                                </button>
                            </div>
                        </div>

                        <section class="box-body form-horizontal"></section>
                    </div>
                }
                break;
            case ReportElementCategoryName.Certifications:
                foreach (var certificationType in Model.CertificationTypes)
                {
                    <div class="box box-primary">
                        <div class="box-header with-border">
                            <h3 class="box-title">
                                @certificationType.Name
                            </h3>
                            <div class="box-tools pull-right">
                                <button class="btn btn-box-tool" data-widget="collapse">
                                    <i class="fa fa-minus"></i>
                                </button>
                            </div>
                        </div>

                        <section class="box-body form-horizontal">
                            <p class="text-justify">
                                @certificationType.Content
                            </p>
                        </section>
                    </div>
                }
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    }

    // Comments
    <div class="box box-primary">
        <div class="box-header with-border">
            <h3 class="box-title">Comments</h3>
            <div class="box-tools pull-right">
                <button class="btn btn-box-tool" data-widget="collapse">
                    <i class="fa fa-minus"></i>
                </button>
            </div>
        </div>
        <div class="box-body form-horizontal">
            <div class="form-group">
                <div class="col-md-12">
                    @if (Model.Status == ReportStatusName.Draft)
                    {
                        @Html.EditorFor(model => model.Comments, additionalViewData:new
                                                                                    {
                                                                                        htmlAttributes = new
                                                                                                         {
                                                                                                             @class = "form-control",
                                                                                                             placeholder = "Enter your Comments",
                                                                                                             rows = "3"
                                                                                                         }
                                                                                    })
                    }
                    else
                    {
                        <p class="text-justify">
                            @Model.Comments
                        </p>
                    }
                </div>
            </div>
        </div>
    </div>

    if (Model.IsSubmissionBySignatoryRequired && Model.IsCurrentUserSignatory && (Model.Status == ReportStatusName.ReadyToSubmit))
    {
        <div class="box box-primary">
            <div class="box-header with-border">
                <h3 class="box-title">Sign and Submit Report</h3>
                <div class="box-tools pull-right">
                    <button class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                </div>
            </div>
            <div class="box-body form-horizontal">
                <div class="form-group">
                </div>
            </div>

            <div class="box-footer">
                <div class="form-group pull-right">
                    <input type="submit" value="Save Draft" class="btn btn-primary btn-sm" formaction="@Url.Action(actionName:"SignAndSubmit", controllerName:"ReportPackage", routeValues:new {id = Model.Id})" formmethod="post" />
                </div>
            </div>
        </div>
    }

    // Buttons

    <div class="box box-default">
        <div class="box-body">
            <strong>&nbsp;</strong>
            <div class="box-tools pull-right">

                @switch (Model.Status)
                {
                    case ReportStatusName.Draft:
                        <input type="submit" value="Save Draft" class="btn btn-primary btn-sm" formaction="@Url.Action(actionName:"ReportPackageDetails", controllerName:"ReportPackage", routeValues:new {id = Model.Id})" formmethod="post" />
                        <input type="submit" value="Ready to Submit" class="btn btn-primary btn-sm" formaction="@Url.Action(actionName:"ReadyToSubmit", controllerName:"ReportPackage", routeValues:new {id = Model.Id})" formmethod="post" />
                        <input class="btn btn-primary btn-sm" data-target="#DeleteSampleModal" data-toggle="modal" type="button" value="Delete Draft" />
                        break;
                    case ReportStatusName.ReadyToSubmit:
                        @Html.ActionLink(linkText:"Preview", actionName:"ReportPackagePreview", routeValues:new { id = Model.Id }, htmlAttributes:new { @class = "btn btn-primary btn-sm" })

                        <input type="submit" value="Enable Edit Report Package" class="btn btn-primary btn-sm" formaction="@Url.Action(actionName:"EnableReportPackage", controllerName:"ReportPackage")" formmethod="post" />

                        if (!Model.IsSubmissionBySignatoryRequired)
                        {
                            <input type="submit" value="Save Draft" class="btn btn-primary btn-sm" formaction="@Url.Action(actionName:"SignAndSubmit", controllerName:"ReportPackage", routeValues:new {id = Model.Id})" formmethod="post" />
                        }

                        <input class="btn btn-primary btn-sm" data-target="#DeleteSampleModal" data-toggle="modal" type="button" value="Delete Report Package" />
                        break;
                    case ReportStatusName.Submitted:
                    case ReportStatusName.Repudiated:
                    case ReportStatusName.SubmittedPendingReview:
                    case ReportStatusName.RepudiatedPendingReview:
                    case ReportStatusName.All:
                        @Html.ActionLink(linkText:"Download COR", actionName:"DownloadCor", routeValues:new
                                                                                                        {
                                                                                                            id = Model.Id
                                                                                                        }, htmlAttributes:new
                                                                                                                          {
                                                                                                                              @class = "btn btn-primary btn-sm"
                                                                                                                          })
                        <input class="btn btn-primary btn-sm" type="button" value="Validate COR" formaction="@Url.Action(actionName:"ValidateCor", controllerName:"ReportPackage", routeValues:new {id = Model.Id})" formmethod="post" />
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }
            </div>
        </div>
    </div>
}