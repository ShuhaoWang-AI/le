@using Linko.LinkoExchange.Core.Enum
@using Linko.LinkoExchange.Web.ViewModels.Shared
@model Linko.LinkoExchange.Web.ViewModels.ReportPackage.ReportPackageViewModel
@{
    ViewBag.Title = "Report Package Details";
}

@using (Html.BeginForm(actionName:null, controllerName:null, method:FormMethod.Post, htmlAttributes:new
                                                                                                    {
                                                                                                        id = "LinkoExchangeForm"
                                                                                                    }))
{
    @Html.AntiForgeryToken()

    <section>
        <ol class="breadcrumb">
            <li>
                <a href="#" onclick="location.href = '@Url.Action(actionName:"Index", controllerName:Model.IsCurrentPortalAuthority ? "Authority" : "Industry")'"><i class=""></i> Home </a>
            </li>
            <li>
                @if (Model.IsCurrentPortalAuthority)
                {
                    if (Model.Status == ReportStatusName.Submitted && !Model.SubmissionReviewDateTimeLocal.HasValue)
                    {
                        <a href="#" onclick="location.href = '@Url.Action(actionName:"ReportPackages", controllerName:"ReportPackage", routeValues:new {reportStatus = ReportStatusName.SubmittedPendingReview})'">
                            <i class=""></i>
                            @Label.ResourceManager.GetString(name:"Breadcrumb_" + ReportStatusName.SubmittedPendingReview)
                        </a>
                    }
                    else if (Model.Status == ReportStatusName.Repudiated && !Model.RepudiationReviewDateTimeLocal.HasValue)
                    {
                        <a href="#" onclick="location.href = '@Url.Action(actionName:"ReportPackages", controllerName:"ReportPackage", routeValues:new {reportStatus = ReportStatusName.RepudiatedPendingReview})'">
                            <i class=""></i>
                            @Label.ResourceManager.GetString(name:"Breadcrumb_" + ReportStatusName.RepudiatedPendingReview)
                        </a>
                    }
                    else
                    {
                        <a href="#" onclick="location.href = '@Url.Action(actionName:"ReportPackages", controllerName:"ReportPackage", routeValues:new {reportStatus = ReportStatusName.All})'">
                            <i class=""></i>
                            @Label.ResourceManager.GetString(name:"Breadcrumb_" + ReportStatusName.All)
                        </a>
                    }
                }
                else
                {
                    <a href="#" onclick="location.href = '@Url.Action(actionName:"ReportPackages", controllerName:"ReportPackage", routeValues:new {reportStatus = Model.Status})'">
                        <i class=""></i>
                        @Label.ResourceManager.GetString(name:"Breadcrumb_" + Model.Status)
                    </a>
                }
            </li>
            <li class="active">
                Details
            </li>
        </ol>
    </section>

    <div class="box box-primary">
        <div class="box-header with-border">
            <h3 class="box-title">
                Report
            </h3>

            <div class="box-tools pull-right">

                @switch (Model.Status)
                {
                    case ReportStatusName.Draft:
                        <strong class="bg-yellow btn-sm text-info"> &nbsp;&nbsp;@Label.ResourceManager.GetString(name:Model.Status.ToString())&nbsp; </strong>
                        break;
                    case ReportStatusName.ReadyToSubmit:
                        <strong class="bg-green-active btn-sm text-info"> &nbsp;&nbsp;@Label.ResourceManager.GetString(name:Model.Status.ToString())&nbsp; </strong>
                        break;
                    case ReportStatusName.Submitted:
                        <strong class="bg-purple btn-sm text-info"> &nbsp;&nbsp;@Label.ResourceManager.GetString(name:Model.Status.ToString())&nbsp; </strong>
                        break;
                    case ReportStatusName.Repudiated:
                        <strong class="bg-red btn-sm text-info"> &nbsp;&nbsp;@Label.ResourceManager.GetString(name:Model.Status.ToString())&nbsp; </strong>
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }

                <button class="btn btn-box-tool" data-widget="collapse">
                    <i class="fa fa-minus"></i>
                </button>
            </div>
        </div>

        <div aria-labelledby="Delete Report Package" class="col-md-12 fade modal modal-info" id="DeleteReportPackageModal" role="dialog" tabindex="-1">
            <div class="modal-dialog" role="document">
                <div class="alert alert-dismissible alert-info modal-content">
                    <button aria-label="Close" class="close" data-dismiss="modal" type="button">&times;</button>
                    <h4 class="box-title">Delete Report Package</h4>

                    <div class="form-horizontal">
                        <p>
                            Do you want to delete this report package?<br />
                        </p>
                        <div class="form-group">
                            <div class="pull-right">
                                <button type="submit" class="btn btn-primary btn-sm" formaction="@Url.Action(actionName:"DeleteReportPackage", controllerName:"ReportPackage", routeValues:new {id = Model.Id})" formmethod="post">
                                    Yes
                                </button>
                                <button aria-label="Close" class="btn btn-primary btn-sm" data-dismiss="modal" type="button">No</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <section class="box-body form-horizontal">
            @Html.ValidationSummary(excludePropertyErrors:false, message:Message.ValidationSummaryHeaderText, htmlAttributes:new
                                                                                                                             {
                                                                                                                                 @class = "alert alert-danger"
                                                                                                                             })
            @if (ViewBag.ShowSuccessMessage != null && ViewBag.ShowSuccessMessage)
            {
                <div class="alert alert-dismissible alert-success">
                    <button aria-hidden="true" class="close" data-dismiss="alert" type="button">&times;</button>
                    <h5>
                        <i class="fa fa-check icon"></i>
                        @ViewBag.SuccessMessage
                    </h5>
                </div>
            }

            <div class="form-group">
                @Html.HiddenFor(model => model.Id)
                @Html.HiddenFor(model => model.IsSubmissionBySignatoryRequired)
                @Html.HiddenFor(model => model.FailedCountPassword)
                @Html.HiddenFor(model => model.FailedCountKbq)
                @Html.Hidden(name:"SelectedSamples", value:Html.Raw(value:Json.Encode(value:Model.SelectedSamples)))
                @Html.Hidden(name:"SelectedAttachments", value:Html.Raw(value: Json.Encode(value: Model.SelectedAttachments)))
                @Html.Hidden(name:"IncludedCertifications", value:Html.Raw(value: Json.Encode(value:Model.IncludedCertifications)))

            </div>
            <div class="form-group">

                @Html.LabelFor(model => model.Name, htmlAttributes:new
                                                                   {
                                                                       @class = "control-label col-md-2"
                                                                   })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Name, additionalViewData:new
                                                                            {
                                                                                htmlAttributes = new
                                                                                                 {
                                                                                                     @class = "form-control",
                                                                                                     @readonly = "readonly"
                                                                                                 }
                                                                            })
                </div>

                @Html.LabelFor(model => model.ReportPeriod, htmlAttributes:new
                                                                           {
                                                                               @class = "control-label col-md-2"
                                                                           })

                <div class="col-md-4">
                    @Html.EditorFor(model => model.ReportPeriod, additionalViewData:new
                                                                                    {
                                                                                        htmlAttributes = new
                                                                                                         {
                                                                                                             @class = "form-control",
                                                                                                             @readonly = "readonly"
                                                                                                         }
                                                                                    })
                </div>
            </div>
            <div class="form-group">

                @Html.LabelFor(model => model.OrganizationName, htmlAttributes:new
                                                                               {
                                                                                   @class = "control-label col-md-2"
                                                                               })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.OrganizationName, additionalViewData:new
                                                                                        {
                                                                                            htmlAttributes = new
                                                                                                             {
                                                                                                                 @class = "form-control",
                                                                                                                 @readonly = "readonly"
                                                                                                             }
                                                                                        })
                </div>

                @Html.HiddenFor(model => model.OrganizationRegulatoryProgramId)
                @Html.LabelFor(model => model.OrganizationReferenceNumber, htmlAttributes:new
                                                                                          {
                                                                                              @class = "control-label col-md-2"
                                                                                          })

                <div class="col-md-4">
                    @Html.EditorFor(model => model.OrganizationReferenceNumber, additionalViewData:new
                                                                                                   {
                                                                                                       htmlAttributes = new
                                                                                                                        {
                                                                                                                            @class = "form-control",
                                                                                                                            @readonly = "readonly"
                                                                                                                        }
                                                                                                   })
                </div>
            </div>
            @if (Model.IsCurrentPortalAuthority)
            {
                <div class="form-group">

                    @Html.LabelFor(model => model.Id, htmlAttributes:new
                                                                     {
                                                                         @class = "control-label col-md-2"
                                                                     })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.Id, additionalViewData:new
                                                                              {
                                                                                  htmlAttributes = new
                                                                                                   {
                                                                                                       @class = "form-control",
                                                                                                       @readonly = "readonly"
                                                                                                   }
                                                                              })
                    </div>

                    @Html.LabelFor(model => model.CtsEventTypeName, htmlAttributes:new
                                                                                   {
                                                                                       @class = "control-label col-md-2"
                                                                                   })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.CtsEventTypeName, additionalViewData:new
                                                                                            {
                                                                                                htmlAttributes = new
                                                                                                                 {
                                                                                                                     @class = "form-control",
                                                                                                                     @readonly = "readonly"
                                                                                                                 }
                                                                                            })
                    </div>
                </div>
            }
        </section>
    </div>

    foreach (var category in Model.ReportPackageTemplateElementCategories)
    {
        switch (category)
        {
            case ReportElementCategoryName.SamplesAndResults:
                foreach (var samplesAndResultType in Model.SamplesAndResultsTypes)
                {
                    <div class="box box-primary">
                        <div class="box-header with-border">
                            <h3 class="box-title">
                                @samplesAndResultType.Name<span style="color: red;display:@( Model.Status == ReportStatusName.Draft && samplesAndResultType.IsRequired ? "inline-block" : "none");">&nbsp;(Required)</span>
                            </h3>
                            <div class="box-tools pull-right">
                                <button class="btn btn-box-tool" data-widget="collapse">
                                    <i class="fa fa-minus"></i>
                                </button>
                            </div>
                        </div>

                        <section class="box-body form-horizontal">
                            @* grid name should be start with grid for centralized error handling *@
                            @(Html.Kendo().Grid<SampleViewModel>()
                                  .Name(componentName:"gridSample_" + samplesAndResultType.Id)
                                  .Columns(columns =>
                                  {
                                      if (Model.Status == ReportStatusName.Draft)
                                      {
                                          columns.Bound(c => c.IsAssociatedWithReportPackage)
                                                 .ClientTemplate(value:"<input type='checkbox' name='ckgridSample_" + samplesAndResultType.Id + "' class='checkbox' #=IsAssociatedWithReportPackage ? checked='checked' : '' #/>")
                                                 .HtmlAttributes(attributes:new
                                                 {
                                                     align = "center"
                                                 })
                                                 .Filterable(f => f.Enabled(value:false))
                                                 .Width(pixelWidth:40);
                                      }
                                      columns.Bound(c => c.SampleOverallCompliance)
                                             .ClientTemplate(
                                                             "# if (SampleOverallCompliance == 'Bad') { #" +
                                                                "<i class='fa fa-lg fa-exclamation-circle' style='color:red' " +
                                                             "# } else { #" +
                                                                "<i class='fa fa-lg fa-check-circle' style='color:green' " +
                                                             "# } #" +
                                                             "aria-hidden='true' data-placement='top' data-toggle='tooltip' title='#= SampleOverallComplianceComment #' />"
                                             )
                                             .HtmlAttributes(attributes:new
                                             {
                                                 align = "center"
                                             })
                                             .Filterable(f => f.Enabled(value:false))
                                             .Width(pixelWidth:40);


                                      columns.Bound(c => c.MonitoringPointName)
                                             .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators:false).Operator(defaultOperator:"contains")
                                                                                     .SuggestionOperator(filterType:FilterType.Contains)));
                                      columns.Bound(c => c.CtsEventTypeName)
                                             .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators:false).Operator(defaultOperator:"contains")
                                                                                     .SuggestionOperator(filterType:FilterType.Contains)));
                                      columns.Bound(c => c.CollectionMethodName)
                                             .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators:false).Operator(defaultOperator:"contains")
                                                                                     .SuggestionOperator(filterType:FilterType.Contains)));
                                      columns.Bound(c => c.StartDateTimeLocal)
                                             .ClientTemplate(value:"#= (kendo.toString(StartDateTimeLocal,'hh:mm tt')=='12:00 AM') ? kendo.toString(StartDateTimeLocal,'MM/dd/yyyy') : kendo.toString(StartDateTimeLocal,'MM/dd/yyyy hh:mm tt')#")
                                             .Filterable(ftb => ftb.Enabled(value:true).Extra(value:true));
                                      columns.Bound(c => c.EndDateTimeLocal)
                                             .ClientTemplate(value:"#= (kendo.toString(EndDateTimeLocal,'hh:mm tt')=='12:00 AM') ? kendo.toString(EndDateTimeLocal,'MM/dd/yyyy') : kendo.toString(EndDateTimeLocal,'MM/dd/yyyy hh:mm tt')#")
                                             .Filterable(ftb => ftb.Enabled(value:true).Extra(value:true));
                                      columns.Bound(c => c.LabSampleIdentifier)
                                             .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators:false).Operator(defaultOperator:"contains")
                                                                                     .SuggestionOperator(filterType:FilterType.Contains)));
                                      if (Model.Status == ReportStatusName.Draft || Model.Status == ReportStatusName.ReadyToSubmit)
                                      {
                                          columns.Bound(c => c.LastSubmitted).Format(value:"{0:MM/dd/yyyy hh:mm tt}")
                                                 .Filterable(ftb => ftb.Enabled(value:true).Extra(value:true));
                                      }
                                  })
                                  .Pageable(pageable => pageable
                                                            .PageSizes(pageSizes:new List<object> {"all", 15, 25, 50, 75})
                                                            .Refresh(enabled:true)
                                                            .Input(enabled:true)
                                                            .Numeric(enabled:false)
                                  )
                                  .ClientDetailTemplateId(id:"template")
                                  .Sortable(sortable => { sortable.SortMode(value:GridSortMode.MultipleColumn); })
                                  .Filterable(filterable =>
                                  {
                                      if (Model.Status == ReportStatusName.Draft)
                                      {
                                          filterable.Enabled(value:true).Mode(value:GridFilterMode.Row);
                                      }
                                      else
                                      {
                                          filterable.Enabled(value:false);
                                      }
                                  })
                                  .Resizable(resizable => resizable.Columns(value:true))
                                  .Scrollable(s => s.Height(value:"auto"))
                                  .NoRecords(text:"No sample exists.")
                                  .Events(events =>
                                  {
                                      if (Model.Status == ReportStatusName.Draft)
                                      {
                                          events.DataBound(handler:"onGridDataBound");
                                      }
                                  })
                                  .DataSource(dataSource => dataSource
                                                                .Ajax()
                                                                .ServerOperation(enabled:true)
                                                                .Batch(enabled:true)
                                                                .Sort(sort =>
                                                                {
                                                                    sort.Add(memberName:"StartDateTimeLocal").Ascending();
                                                                    sort.Add(memberName:"MonitoringPointName").Ascending();
                                                                    sort.Add(memberName:"CollectionMethodName").Ascending();
                                                                }) // <-- initial sort expression
                                                                .Read(read => read.Action(actionName:"Samples_Read", controllerName:"ReportPackage", routeValues:new
                                                                {
                                                                    reportPackageElementTypeId = samplesAndResultType.Id.GetValueOrDefault(),
                                                                    reportStatusName = Model.Status
                                                                }))
                                                                .PageSize(pageSize:15)
                                                                .Events(events => events.Error(handler:"error_handler.bind({gridId: '#gridSample_" + samplesAndResultType.Id + "'})"))
                                  )
                                  )
                        </section>
                        <script id="template" type="text/kendo-tmpl">
                            @(Html.Kendo().Grid<SampleResultViewModel>()
                                  .Name(componentName:"gridSampleResult_#=Id#")
                                  .Columns(columns =>
                                  {
                                      columns.Bound(c => c.ParameterName);
                                      columns.Bound(c => c.Value)
                                          .HtmlAttributes(attributes: new { align = "right" })
                                          .ClientTemplate(value: "\\#=Value\\#&nbsp;&nbsp;<i "
                                                         + "\\#if(ConcentrationResultCompliance==\"Good\") { \\#"
                                                         + "class='fa fa-lg fa-check-circle' style='color:green' "
                                                         + "\\# } else if(ConcentrationResultCompliance==\"Unknown\") { \\#"
                                                         + "class='fa fa-lg fa-circle' style='color:green' "
                                                         + "\\# } else if(ConcentrationResultCompliance==\"Bad\") { \\#"
                                                         + "class='fa fa-lg fa-exclamation-circle' style='color:red' "
                                                         + "\\# } \\#"
                                                         + "aria-hidden='true' data-placement='top' "
                                                         + "data-toggle='tooltip' title='\\#=ConcentrationResultComplianceComment\\#'></i>");

                                      columns.Bound(c => c.MassLoadingValue)
                                              .HtmlAttributes(attributes: new {align = "right"})
                                              .ClientTemplate(value:
                                                            "\\#if(IsCalcMassLoading==0) { \\#"
                                                           + "\\# } else { \\#"
                                                           + "\\#=MassLoadingValue\\#&nbsp;&nbsp;<i "
                                                           + "\\#if(MassResultCompliance==\"Good\") { \\#"
                                                           + "class='fa fa-lg fa-check-circle' style='color:green' "
                                                           + "\\# } else if(MassResultCompliance==\"Unknown\") { \\#"
                                                           + "class='fa fa-lg fa-circle' style='color:green' "
                                                            + "\\# } else if(MassResultCompliance==\"Bad\") { \\#"
                                                            + "class='fa fa-lg fa-exclamation-circle' style='color:red' "
                                                            + "\\# } \\#"
                                                           + "aria-hidden='true' data-placement='top' "
                                                           + "data-toggle='tooltip' title='\\#=MassResultComplianceComment\\#'></i>"
                                                           + "\\# } \\#");

                                      columns.Bound(c => c.AnalysisMethod);
                                      columns.Bound(c => c.EnteredMethodDetectionLimit).HtmlAttributes(attributes: new {align = "right"});
                                      columns.Bound(c => c.AnalysisDateTimeLocal)
                                             .ClientTemplate(value: "\\#= AnalysisDateTimeLocal == null ? '' : ((kendo.toString(AnalysisDateTimeLocal,'hh:mm tt')=='12:00 AM') ? kendo.toString(AnalysisDateTimeLocal,'MM/dd/yyyy') : kendo.toString(AnalysisDateTimeLocal,'MM/dd/yyyy hh:mm tt'))\\#");
                                  })
                                  .Pageable()
                                  .Sortable(sortable => { sortable.SortMode(value:GridSortMode.MultipleColumn); })
                                  .Scrollable(s => s.Height(value:"auto"))
                                  .NoRecords(text:"No sample result exists.")
                                  .DataSource(dataSource => dataSource
                                                                .Ajax()
                                                                .ServerOperation(enabled:true)
                                                                .Read(read => read.Action(actionName:"SampleResults_Read", controllerName:"ReportPackage", routeValues:new
                                                                {
                                                                    sampleId = "#=Id#"
                                                                }))
                                  )
                                  .ToClientTemplate()
                                  )
                        </script>

                    </div>
                }

                break;
            case ReportElementCategoryName.Attachments:
                foreach (var attachmentType in Model.AttachmentTypes)
                {
                    <div class="box box-primary">
                        <div class="box-header with-border">
                            <h3 class="box-title">
                                @attachmentType.Name<div style="color: red;display:@( Model.Status == ReportStatusName.Draft && attachmentType.IsRequired ? "inline-block" : "none");">&nbsp;(Required)</div>
                            </h3>
                            <div class="box-tools pull-right">
                                <button class="btn btn-box-tool" data-widget="collapse">
                                    <i class="fa fa-minus"></i>
                                </button>
                            </div>
                        </div>
                        <section class="box-body form-horizontal">
                            <div class="form-group">
                                <div class="col-md-12">
                                    @* grid name should be start with grid for centralized error handling *@
                                    @(Html.Kendo().Grid<AttachmentViewModel>()
                                          .Name(componentName:"gridAttachment_" + attachmentType.Id)
                                          .Columns(columns =>
                                                   {
                                                       if (Model.Status == ReportStatusName.Draft)
                                                       {
                                                           columns.Bound(c => c.IsAssociatedWithReportPackage)
                                                                  .ClientTemplate(value:"<input type='checkbox' name='ckgridAttachment_" + attachmentType.Id + "' class='checkbox' #=IsAssociatedWithReportPackage ? checked='checked' : '' # />")
                                                                  .HtmlAttributes(attributes:new
                                                                                             {
                                                                                                 align = "center"
                                                                                             })
                                                                  .Filterable(f => f.Enabled(value:false))
                                                                  .Width(pixelWidth:40);
                                                       }
                                                       columns.Bound(c => c.Name)
                                                              .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators:false).Operator(defaultOperator:"contains")
                                                                                                      .SuggestionOperator(filterType:FilterType.Contains)))
                                                              .ClientTemplate(value:Html.ActionLink(linkText:"#=Name#", actionName:"DownloadAttachment", routeValues:new
                                                                                                                                                                     {
                                                                                                                                                                         id = "#=Id#"
                                                                                                                                                                     }).ToHtmlString());
                                                       columns.Bound(c => c.OriginalFileName)
                                                              .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators:false).Operator(defaultOperator:"contains")
                                                                                                      .SuggestionOperator(filterType:FilterType.Contains)));
                                                       columns.Bound(c => c.Description)
                                                              .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators:false).Operator(defaultOperator:"contains")
                                                                                                      .SuggestionOperator(filterType:FilterType.Contains)));
                                                       columns.Bound(c => c.UploadDateTimeLocal).Format(value:"{0:MM/dd/yyyy hh:mm tt}")
                                                              .Filterable(ftb => ftb.Enabled(value:true).Extra(value:true));
                                                       columns.Bound(c => c.UploaderUserFullName)
                                                              .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators:false).Operator(defaultOperator:"contains")
                                                                                                      .SuggestionOperator(filterType:FilterType.Contains)));
                                                       if (Model.Status == ReportStatusName.Draft || Model.Status == ReportStatusName.ReadyToSubmit)
                                                       {
                                                           columns.Bound(c => c.LastSubmitted).Format(value:"{0:MM/dd/yyyy hh:mm tt}")
                                                                  .Filterable(ftb => ftb.Enabled(value:true).Extra(value:true));
                                                       }
                                                   })
                                          .Pageable(pageable => pageable
                                                                    .PageSizes(pageSizes:new List<object> {"all", 15, 25, 50, 75})
                                                                    .Refresh(enabled:true)
                                                                    .Input(enabled:true)
                                                                    .Numeric(enabled:false)
                                          )
                                          .Sortable(sortable => { sortable.SortMode(value:GridSortMode.MultipleColumn); })
                                          .Filterable(filterable =>
                                                      {
                                                          if (Model.Status == ReportStatusName.Draft)
                                                          {
                                                              filterable.Enabled(value:true).Mode(value:GridFilterMode.Row);
                                                          }
                                                          else
                                                          {
                                                              filterable.Enabled(value:false);
                                                          }
                                                      })
                                          .Resizable(resizable => resizable.Columns(value:true))
                                          .Scrollable(s => s.Height(value:"auto"))
                                          .NoRecords(text:"No attachment exists.")
                                          .Events(events =>
                                                  {
                                                      if (Model.Status == ReportStatusName.Draft)
                                                      {
                                                          events.DataBound(handler:"onGridDataBound");
                                                      }
                                                  })
                                          .DataSource(dataSource => dataSource
                                                                        .Ajax()
                                                                        .ServerOperation(enabled:true)
                                                                        .Batch(enabled:true)
                                                                        .Sort(sort =>
                                                                              {
                                                                                  sort.Add(memberName:"UploadDateTimeLocal").Descending();
                                                                                  sort.Add(memberName:"Name").Ascending();
                                                                              }) // <-- initial sort expression
                                                                        .Read(read => read.Action(actionName:"Attachments_Read", controllerName:"ReportPackage", routeValues:new
                                                                                                                                                                             {
                                                                                                                                                                                 reportPackageElementTypeId = attachmentType.Id.GetValueOrDefault(),
                                                                                                                                                                                 reportStatusName = Model.Status
                                                                                                                                                                             }))
                                                                        .PageSize(pageSize:15)
                                                                        .Events(events => events.Error(handler:"error_handler.bind({gridId: '#gridAttachment_" + attachmentType.Id + "'})"))
                                          )
                                          )
                                </div>
                            </div>
                        </section>

                    </div>
                }

                break;
            case ReportElementCategoryName.Certifications:
                
                foreach (var certificationType in Model.CertificationTypes)
                {
                    if (Model.Status == ReportStatusName.Draft || certificationType.IsIncluded)
                    {
                        //Show this certification in Draft mode only or if Included in other states

                        <div class="box box-primary">
                            <div class="box-header with-border">
                                @if (Model.Status == ReportStatusName.Draft)
                                {
                                    //Show checkbox in draft mode only
                                    <div class="checkbox" style="display: inline-block;">
                                        <input type="checkbox" checked="@( certificationType.IsIncluded ? true : false)" name="ckIncludedCertification_@certificationType.Id" />
                                    </div>
                                }
                                <h3 class="box-title" style="display: inline-block;">
                                    @certificationType.Name<span style="color: red;display:@( Model.Status == ReportStatusName.Draft && certificationType.IsRequired ? "inline-block" : "none");">&nbsp;(Required)</span>
                                </h3>
                            
                                <div class="box-tools pull-right">
                                    <button class="btn btn-box-tool" data-widget="collapse">
                                        <i class="fa fa-minus"></i>
                                    </button>
                                </div>
                            </div>

                            <section class="box-body form-horizontal">
                                <p style="white-space: pre-wrap;">@certificationType.Content</p>
                            </section>
                        </div>
                    }

                    
                }

                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    }

    // Comments
    <div class="box box-primary">
        <div class="box-header with-border">
            <h3 class="box-title">Comments</h3>
            <div class="box-tools pull-right">
                <button class="btn btn-box-tool" data-widget="collapse">
                    <i class="fa fa-minus"></i>
                </button>
            </div>
        </div>
        <div class="box-body form-horizontal">
            <div class="form-group">
                <div class="col-md-12">
                    @if (Model.Status == ReportStatusName.Draft)
                    {
                        @Html.EditorFor(model => model.Comments, additionalViewData:new
                                                                                    {
                                                                                        htmlAttributes = new
                                                                                                         {
                                                                                                             @class = "form-control",
                                                                                                             placeholder = "Enter your Comments",
                                                                                                             rows = "3",
                                                                                                             maxlength = 500
                                                                                                         }
                                                                                    })
                    }
                    else
                    {
                        <p style="white-space: pre-wrap;">@Model.Comments</p>
                    }
                </div>
            </div>
        </div>
    </div>

    // Report Summary
    <div class="box box-primary">
        <div class="box-header with-border">
            <h3 class="box-title">Report Summary</h3>
            <div class="box-tools pull-right">
                @if (Model.Status == ReportStatusName.Draft)
                {
                    <button formaction="@Url.Action(actionName:"ReportPackageDetails", controllerName:"ReportPackage", routeValues:new {id = Model.Id})" formmethod="post" class="btn btn-box-tool" data-placement="top" data-toggle="tooltip" title="" data-original-title="refresh">
                        <i class="fa fa-refresh" aria-hidden="true"></i>
                    </button>
                }
                <button class="btn btn-box-tool" data-widget="collapse">
                    <i class="fa fa-minus"></i>
                </button>
            </div>
        </div>
        
        <div class="box-body box-collapse collapse form-horizontal in" style="display: block;">
            <div class="box box-group box-solid collapsed-box">
                <div class="box-header">
                    <button class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-plus"></i>
                    </button>
                    &nbsp;
                    <h3 class="box-title">Report Content Review</h3>
                    <div class="box-tools pull-right progress-group" style="width: 450px;">
                        <span class="progress-text">@Model.ReportSummaryViewModel.RequiredAndPresentItemCount of @Model.ReportSummaryViewModel.RequiredItemCount required report elements are present</span>
                        <span class="progress-number">&nbsp;</span>
                        @{
                            int reportContentPercentageComplete;
                            if (Model.ReportSummaryViewModel.RequiredItemCount == 0)
                            {
                                reportContentPercentageComplete = 100;
                            }
                            else
                            {
                                reportContentPercentageComplete = Convert.ToInt32((Convert.ToDecimal(Model.ReportSummaryViewModel.RequiredAndPresentItemCount) / Convert.ToDecimal(Model.ReportSummaryViewModel.RequiredItemCount)) * 100);
                            }
                        }
                        <div class="active progress progress-xs"style="height: 7px;">
                            <div class="progress-bar progress-bar-green" style="width: @(reportContentPercentageComplete)%; background-color: #00a65a;"></div>
                            <div class="progress-bar progress-bar-danger" style="width: @(100 - reportContentPercentageComplete)%"></div>
                        </div>
                    </div>
                </div>
                <div class="box-body box-collapse collapse form-horizontal in" style="padding: 0px 40px; display: none;">
                    <table class="dataTable table table-bordered table-condensed table-striped text-center">
                        <tbody>
                            <tr>
                                <th style="width: 10px">#</th>
                                <th>Report Element</th>
                                <th>Required</th>
                                <th>Present in Report</th>
                                <th></th>
                            </tr>
                            
                            @for (int index = 0; index < Model.ReportSummaryViewModel.ReportContentReviewItems.Count; index++)
                            {
                                var reportContentReviewItem = Model.ReportSummaryViewModel.ReportContentReviewItems[index];
                                <tr>
                                    <td>@(index + 1).</td>
                                    <td>@reportContentReviewItem.ReportElementName</td>
                                    <td>@(@reportContentReviewItem.IsRequired ? "Yes" : "No")</td>
                                    <td>@(@reportContentReviewItem.IsPresentInReport ? "Yes" : "No")</td>
                                    <td>
                                        @if (reportContentReviewItem.IsRequired)
                                        {
                                            if (reportContentReviewItem.IsPresentInReport)
                                            {
                                                <i aria-hidden="true" class="fa fa-check-circle fa-lg" data-placement="top" data-toggle="tooltip" style="color: green"></i>
                                            }
                                            else
                                            {
                                                <i aria-hidden="true" class="fa fa-times-circle fa-lg" data-placement="top" data-toggle="tooltip" style="color: red"></i>
                                            }
                                        }
                                        
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>    
        </div>

        <div class="box-body box-collapse collapse form-horizontal in">
            <div class="box box-group box-solid" style="padding: 0px 0px 0px 40px;">
                <div class="box-header">
                    &nbsp;
                    <h3 class="box-title">Sample Result Compliance Summary </h3>
                    <div class="box-tools pull-right progress-group" style="width: 450px;">
                        @{
                            int total = Model.ReportSummaryViewModel.SampleResultsInComplianceCount + Model.ReportSummaryViewModel.SampleResultsNonComplianceCount;
                            int sampleResultPercentageComplete;
                            if (total == 0)
                            {
                                sampleResultPercentageComplete = 100;
                            }
                            else
                            {
                                sampleResultPercentageComplete = Convert.ToInt32((Convert.ToDecimal(Model.ReportSummaryViewModel.SampleResultsInComplianceCount) / Convert.ToDecimal(total)) * 100);
                            }

                        }
                        <span class="progress-text">@Model.ReportSummaryViewModel.SampleResultsInComplianceCount of @total sample results are in compliance</span>
                        <span class="progress-number">&nbsp;</span>
                        <div class="active progress progress-xs" style="height: 7px;">
                            <div class="progress-bar progress-bar-green" style="width: @(sampleResultPercentageComplete)%; background-color: #00a65a;"></div>
                            <div class="progress-bar progress-bar-danger" style="width: @(100 - sampleResultPercentageComplete)%"></div>
                        </div>
                    </div>
                </div>
                <div class="box-body box-collapse collapse form-horizontal in" style="padding: 0 40px ;">
                </div>
                <div class="box-footer">
                    * Please see the Samples and Results section to view each parameter.
                </div>
            </div> 
        </div>
        
        <div class="box-body box-collapse collapse form-horizontal in" style="display: block;">
            <div class="box box-group box-solid collapsed-box">
                <div class="box-header">
                    <button class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-plus"></i>
                    </button>
                    &nbsp;
                    <h3 class="box-title">Sampling Requirements Summary</h3>
                    <div class="box-tools pull-right progress-group" style="width: 450px;">
                        @{
                            var totalRequiredCount = Model.ReportSummaryViewModel.SamplingRequirementsItems.Select(sr => sr.ExpectedSampleCount).Sum();
                            var totalIncludedCount = Model.ReportSummaryViewModel.SamplingRequirementsItems.Select(sr => sr.IncludedSampleCount).Sum();
                            var totalMissingCount = totalRequiredCount - totalIncludedCount;
                            int allRequirementsPercentageMet;
                            if (totalMissingCount < 0 || totalRequiredCount == 0)
                            {
                                totalMissingCount = 0;
                                allRequirementsPercentageMet = 100;
                            }
                            else
                            {
                                allRequirementsPercentageMet = Convert.ToInt32((Convert.ToDecimal(totalIncludedCount) / Convert.ToDecimal(totalRequiredCount)) * 100);
                            }
                        }
                        <span class="progress-text">@totalIncludedCount of @totalRequiredCount parameters have the expected # of samples</span>
                        <span class="progress-number">&nbsp;</span>
                        <div class="active progress progress-xs" style="height: 7px;">
                            <div class="progress-bar progress-bar-green" style="width:@(allRequirementsPercentageMet)%; background-color: #00a65a;"></div>
                            <div class="progress-bar progress-bar-danger" style="width:@(100 - allRequirementsPercentageMet)%"></div>
                        </div>
                    </div>
                </div>
                <div class="box-body box-collapse collapse form-horizontal in" style="padding: 0px 40px; display: none;">
                    @if (Model.ReportSummaryViewModel.SamplingRequirementsItems.Count > 0)
                    {
                        <table class="dataTable table table-bordered table-condensed table-striped text-center">
                            <tbody>
                                <tr>
                                    <th>Monitoring Point</th>
                                    <th>Parameter</th>
                                    <th>Progress</th>
                                    <th>Expected # of Samples</th>
                                    <th>Included # of Samples</th>
                                </tr>

                                @foreach (var samplingRequirement in Model.ReportSummaryViewModel.SamplingRequirementsItems)
                                {
                                    <tr>
                                        <td>@(samplingRequirement.MonitoringPointName)</td>
                                        <td>@(samplingRequirement.ParameterName)</td>
                                        <td>
                                            <div class="active progress progress-xs" style="height: 7px;">
                                                @{
                                                    int requirementPercentageMet = Convert.ToInt32((Convert.ToDecimal(samplingRequirement.IncludedSampleCount) / Convert.ToDecimal(samplingRequirement.ExpectedSampleCount)) * 100);
                                                    if (samplingRequirement.IncludedSampleCount > samplingRequirement.ExpectedSampleCount)
                                                    {
                                                        requirementPercentageMet = 100;
                                                    }

                                                }
                                                <div class="progress-bar progress-bar-green" style="width: @(requirementPercentageMet)%; background-color: #00a65a;"></div>
                                            </div>
                                        </td>
                                        <td>@(samplingRequirement.ExpectedSampleCount)</td>
                                        <td>@(samplingRequirement.IncludedSampleCount)</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <p>
                            No sampling requirements found matching the Report Period Start and End Dates
                        </p>
                    }
                </div>
                <div class="box-footer">
                    * Expected # of Samples may be incorrect for weekly samples.
                </div>
            </div>
        </div>
    </div>

    // Sign and Submit Report
    if (Model.CanCurrentUserSubmitAndReputiate && Model.Status == ReportStatusName.ReadyToSubmit)
    {
        <div class="box box-primary" id="divSignAndSubmitReport">
            <div class="box-header with-border">
                <h3 class="box-title">Sign and Submit Report</h3>
                <div class="box-tools pull-right">
                    <button class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                </div>
            </div>
            <div class="box-body form-horizontal">
                @if (ViewBag.ShowSubmissionValidationErrorMessage != null && ViewBag.ShowSubmissionValidationErrorMessage && ViewBag.SubmissionValidationErrorMessage != null)
                {
                    <div class="alert alert-danger alert-dismissible">
                        <button aria-hidden="true" class="close" data-dismiss="alert" type="button">&times;</button>
                        <h5>
                            <i class="fa fa-close icon"></i>
                            @ViewBag.SubmissionValidationErrorMessage
                        </h5>
                    </div>
                }

                <div class="form-group">
                    @Html.LabelFor(m => m.Password, htmlAttributes:new {@class = "col-md-4 control-label required"})
                    <div class="col-md-6">
                        @Html.PasswordFor(m => m.Password, htmlAttributes:new {@class = "form-control"})
                        @Html.ValidationMessageFor(m => m.Password, validationMessage:"", htmlAttributes:new {@class = "text-red"})
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Answer, labelText:Model.Question, htmlAttributes:new {@class = "col-md-4 control-label required"})
                    @Html.HiddenFor(model => model.QuestionAnswerId)

                    <div class="col-md-6">
                        @Html.PasswordFor(m => m.Answer, htmlAttributes:new {@class = "form-control", autocomplete = "off"})
                        @Html.ValidationMessageFor(m => m.Answer, validationMessage:"", htmlAttributes:new {@class = "text-red"})
                    </div>
                </div>
            </div>

            <div class="box-footer">
                <div class="form-group pull-right">
                    <input type="submit" value="Sign and Submit" class="btn btn-primary btn-sm" formaction="@Url.Action(actionName:"SignAndSubmit", controllerName:"ReportPackage", routeValues:new {id = Model.Id})#divSignAndSubmitReport" formmethod="post" />
                </div>
            </div>
        </div>
    }

    // Submission Confirmation
    if (Model.Status == ReportStatusName.Submitted || Model.Status == ReportStatusName.Repudiated)
    {
        <div class="box box-primary" id="divSubmissionConfirmation">
            <div class="box-header with-border">
                <h3 class="box-title">Submission Confirmation</h3>
                <div class="box-tools pull-right">
                    <button class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                </div>
            </div>
            <div class="box-body form-horizontal">
                @if (ViewBag.ShowSubmissionConfirmationMessage != null && ViewBag.ShowSubmissionConfirmationMessage)
                {
                    <div class="alert alert-dismissible alert-success">
                        <button aria-hidden="true" class="close" data-dismiss="alert" type="button">&times;</button>
                        <h5>
                            <i class="fa fa-check icon"></i>
                            @ViewBag.SubmissionConfirmationMessage
                        </h5>
                    </div>
                }
                <div class="form-group">
                    @Html.LabelFor(m => m.Submitter, htmlAttributes:new {@class = "col-md-2 control-label"})
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.Submitter, additionalViewData:new
                                                                                     {
                                                                                         htmlAttributes = new
                                                                                                          {
                                                                                                              @class = "form-control",
                                                                                                              @readonly = "readonly"
                                                                                                          }
                                                                                     })
                    </div>
                    @Html.LabelFor(m => m.SubmitterTitleRole, htmlAttributes:new {@class = "col-md-2 control-label"})
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.SubmitterTitleRole, additionalViewData:new
                                                                                              {
                                                                                                  htmlAttributes = new
                                                                                                                   {
                                                                                                                       @class = "form-control",
                                                                                                                       @readonly = "readonly"
                                                                                                                   }
                                                                                              })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.SubmissionDateTimeLocal, htmlAttributes:new {@class = "col-md-2 control-label"})
                    <div class="col-md-4">
                        @(Html.Kendo().DateTimePicker()
                              .Name(componentName:"SubmissionDateTimeLocal")
                              .Value(date:Model.SubmissionDateTimeLocal)
                              .Format(format:"MM/dd/yyyy hh:mm tt")
                              .Max(date:DateTime.Now)
                              .HtmlAttributes(attributes:new
                                                         {
                                                             @readonly = true,
                                                             style = "width:210px; background-color: #eee;"
                                                         }))
                    </div>
                </div>
            </div>
        </div>
    }

    // Repudiate Report
    if (Model.CanCurrentUserSubmitAndReputiate && Model.Status == ReportStatusName.Submitted)
    {
        <div class="box box-primary" id="divRepudiateReport">
            <div class="box-header with-border">
                <h3 class="box-title">Repudiate Report</h3>
                <div class="box-tools pull-right">
                    <button class="btn btn-box-tool" data-widget="collapse">
                        @if (Model.Status == ReportStatusName.Repudiated || ViewBag.ShowRepudiateValidationErrorMessage != null && ViewBag.ShowRepudiateValidationErrorMessage)
                        {
                            // if Model.Status is Repudiated or showing any error for repudiation then open the repudiation box onload, otherwise collapse
                            <i class="fa fa-minus"></i>
                        }
                        else
                        {
                            <i class="fa fa-plus"></i>
                        }
                    </button>
                </div>
            </div>
            <div class="box-body form-horizontal">
                @if (ViewBag.ShowRepudiateValidationErrorMessage != null && ViewBag.ShowRepudiateValidationErrorMessage && ViewBag.RepudiateValidationErrorMessage != null)
                {
                    <div class="alert alert-danger alert-dismissible">
                        <button aria-hidden="true" class="close" data-dismiss="alert" type="button">&times;</button>
                        <h5>
                            <i class="fa fa-close icon"></i>
                            @ViewBag.RepudiateValidationErrorMessage
                        </h5>
                    </div>
                }

                <div aria-labelledby="Repudiate Report Package" class="col-md-12 fade modal modal-info" id="RepudiateReportPackage" role="dialog" tabindex="-1">
                    <div class="modal-dialog" role="document">
                        <div class="alert alert-dismissible alert-info modal-content">
                            <button aria-label="Close" class="close" data-dismiss="modal" type="button">&times;</button>
                            <h4 class="box-title">Repudiate Report Package</h4>

                            <div>
                                <p>
                                    Are you sure you want to repudiate this report package?<br />
                                </p>
                                <div class="form-group">
                                    <div class="pull-right">
                                        <button type="submit" class="btn btn-primary btn-sm" formaction="@Url.Action(actionName:"RepudiateReport", controllerName:"ReportPackage", routeValues:new {id = Model.Id})#divRepudiateReport" formmethod="post">
                                            Yes
                                        </button>
                                        <button aria-label="Close" class="btn btn-primary btn-sm" data-dismiss="modal" type="button">No</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                @if (Model.HasRepudiationTimeExpired)
                {
                    <h5>Repudiation no longer available. The report repudiation time period has passed.</h5>
                }

                <div class="form-group">
                    @Html.LabelFor(m => m.RepudiationReasonId, htmlAttributes:new {@class = "col-md-4 control-label required"})
                    <div class="col-md-6">
                        @Html.DropDownList(name:"RepudiationReasonId", selectList:Model.AvailableRepudiationReasonNames, htmlAttributes:new
                                                                                                                                        {
                                                                                                                                            @class = "form-control input-sm"
                                                                                                                                        })

                        @Html.HiddenFor(model => model.RepudiationReasonId)
                        @Html.HiddenFor(model => model.RepudiationReasonName)
                        @Html.ValidationMessageFor(m => m.RepudiationReasonId, validationMessage:"", htmlAttributes:new {@class = "text-red"})
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.RepudiationComments, htmlAttributes:new {@class = "col-md-4 control-label"})
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.RepudiationComments, additionalViewData:new
                                                                                               {
                                                                                                   htmlAttributes = new
                                                                                                                    {
                                                                                                                        @class = "form-control",
                                                                                                                        placeholder = "Enter your Comments",
                                                                                                                        rows = "3",
                                                                                                                        maxlength = 500
                                                                                                                    }
                                                                                               })
                        @Html.ValidationMessageFor(m => m.RepudiationComments, validationMessage:"", htmlAttributes:new {@class = "text-red"})
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Password, htmlAttributes:new {@class = "col-md-4 control-label required"})
                    <div class="col-md-6">
                        @Html.PasswordFor(m => m.Password, htmlAttributes:new {@class = "form-control"})
                        @Html.ValidationMessageFor(m => m.Password, validationMessage:"", htmlAttributes:new {@class = "text-red"})
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Answer, labelText:Model.Question, htmlAttributes:new {@class = "col-md-4 control-label required"})
                    @Html.HiddenFor(model => model.QuestionAnswerId)

                    <div class="col-md-6">
                        @Html.PasswordFor(m => m.Answer, htmlAttributes:new {@class = "form-control", autocomplete = "off"})
                        @Html.ValidationMessageFor(m => m.Answer, validationMessage:"", htmlAttributes:new {@class = "text-red"})
                    </div>
                </div>
            </div>

            <div class="box-footer">
                <div class="form-group pull-right">
                    <input class="btn btn-primary btn-sm" data-target="#RepudiateReportPackage" data-toggle="modal" id="btnRepudiate" type="button" value="Repudiate" />
                </div>
            </div>

            @if (Model.HasRepudiationTimeExpired)
            {
                <script>
                    $("#RepudiationReasonId").prop('disabled', true);
                    $("#RepudiationComments").prop('readonly', true);
                    $("#Password").prop('readonly', true);
                    $("#Answer").prop('readonly', true);
                    $("#btnRepudiate").prop("disabled", true);
                </script>
            }
        </div>
    }

    // Submission Review
    if (Model.IsCurrentPortalAuthority && (Model.Status == ReportStatusName.Submitted || Model.Status == ReportStatusName.Repudiated))
    {
        <div class="box box-primary" id="divSubmissionReview">
            <div class="box-header with-border">
                <h3 class="box-title">Submission Review</h3>
                <div class="box-tools pull-right">
                    <button class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                </div>
            </div>
            <div class="box-body form-horizontal">
                @if (ViewBag.ShowSubmissionReviewConfirmationMessage != null && ViewBag.ShowSubmissionReviewConfirmationMessage)
                {
                    <div class="alert alert-dismissible alert-success">
                        <button aria-hidden="true" class="close" data-dismiss="alert" type="button">&times;</button>
                        <h5>
                            <i class="fa fa-check icon"></i>
                            @ViewBag.SubmissionReviewConfirmationMessage
                        </h5>
                    </div>
                }
                @if (Model.SubmissionReviewDateTimeLocal.HasValue)
                {
                    <div class="form-group">
                        @Html.LabelFor(m => m.SubmissionReviewer, htmlAttributes:new {@class = "col-md-2 control-label"})
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.SubmissionReviewer, additionalViewData:new
                                                                                                  {
                                                                                                      htmlAttributes = new
                                                                                                                       {
                                                                                                                           @class = "form-control",
                                                                                                                           @readonly = "readonly"
                                                                                                                       }
                                                                                                  })
                        </div>
                        @Html.LabelFor(m => m.SubmissionReviewDateTimeLocal, htmlAttributes:new {@class = "col-md-2 control-label"})
                        <div class="col-md-4">
                            @(Html.Kendo().DateTimePicker()
                                  .Name(componentName:"SubmissionReviewDateTimeLocal")
                                  .Value(date:Model.LastSentDateTimeLocal)
                                  .Format(format:"MM/dd/yyyy hh:mm tt")
                                  .Max(date:DateTime.Now)
                                  .HtmlAttributes(attributes:new
                                                             {
                                                                 @readonly = true,
                                                                 style = "width:210px; background-color: #eee;"
                                                             }))
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.SubmissionReviewComments, htmlAttributes:new
                                                                                       {
                                                                                           @class = "col-md-2 control-label"
                                                                                       })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.SubmissionReviewComments, additionalViewData:new
                                                                                                        {
                                                                                                            htmlAttributes = new
                                                                                                                             {
                                                                                                                                 @class = "form-control",
                                                                                                                                 @readonly = "readonly",
                                                                                                                                 rows = "3"
                                                                                                                             }
                                                                                                        })

                        </div>
                    </div>
                }
                else
                {
                    <div class="form-group">
                        @Html.LabelFor(m => m.SubmissionReviewComments, htmlAttributes:new
                                                                                       {
                                                                                           @class = "col-md-2 control-label"
                                                                                       })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.SubmissionReviewComments, additionalViewData:new
                                                                                                        {
                                                                                                            htmlAttributes = new
                                                                                                                             {
                                                                                                                                 @class = "form-control",
                                                                                                                                 rows = "3",
                                                                                                                                 maxlength = 500
                                                                                                                             }
                                                                                                        })

                        </div>
                    </div>
                }
            </div>
            @if (!Model.SubmissionReviewDateTimeLocal.HasValue)
            {
                <div class="box-footer">
                    <div class="form-group pull-right">
                        <input type="submit" value="Submission Review Complete" class="btn btn-primary btn-sm" formaction="@Url.Action(actionName:"ReviewSubmission", controllerName:"ReportPackage", routeValues:new {id = Model.Id})" formmethod="post" />
                    </div>
                </div>
            }
        </div>
    }

    // Repudiation Confirmation
    if (Model.Status == ReportStatusName.Repudiated)
    {
        <div class="box box-primary" id="divRepudiationConfirmation">
            <div class="box-header with-border">
                <h3 class="box-title">Repudiation Confirmation</h3>
                <div class="box-tools pull-right">
                    <button class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                </div>
            </div>
            <div class="box-body form-horizontal">
                @if (ViewBag.ShowRepudiationConfirmationMessage != null && ViewBag.ShowRepudiationConfirmationMessage)
                {
                    <div class="alert alert-dismissible alert-success">
                        <button aria-hidden="true" class="close" data-dismiss="alert" type="button">&times;</button>
                        <h5>
                            <i class="fa fa-check icon"></i>
                            <span>@Html.Raw(ViewBag.RepudiationConfirmationMessage)</span>
                        </h5>
                    </div>
                }
                <div class="form-group">
                    @Html.LabelFor(m => m.Repudiator, htmlAttributes:new {@class = "col-md-2 control-label"})
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.Repudiator, additionalViewData:new
                                                                                      {
                                                                                          htmlAttributes = new
                                                                                                           {
                                                                                                               @class = "form-control",
                                                                                                               @readonly = "readonly"
                                                                                                           }
                                                                                      })
                    </div>
                    @Html.LabelFor(m => m.RepudiatorTitleRole, htmlAttributes:new {@class = "col-md-2 control-label"})
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.RepudiatorTitleRole, additionalViewData:new
                                                                                               {
                                                                                                   htmlAttributes = new
                                                                                                                    {
                                                                                                                        @class = "form-control",
                                                                                                                        @readonly = "readonly"
                                                                                                                    }
                                                                                               })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.RepudiationDateTimeLocal, htmlAttributes:new {@class = "col-md-2 control-label"})
                    <div class="col-md-4">
                        @(Html.Kendo().DateTimePicker()
                              .Name(componentName:"RepudiationDateTimeLocal")
                              .Value(date:Model.RepudiationDateTimeLocal)
                              .Format(format:"MM/dd/yyyy hh:mm tt")
                              .Max(date:DateTime.Now)
                              .HtmlAttributes(attributes:new
                                                         {
                                                             @readonly = true,
                                                             style = "width:210px; background-color: #eee;"
                                                         }))
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.RepudiationReasonName, htmlAttributes:new {@class = "col-md-2 control-label"})
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.RepudiationReasonName, additionalViewData:new
                                                                                                 {
                                                                                                     htmlAttributes = new
                                                                                                                      {
                                                                                                                          @class = "form-control",
                                                                                                                          @readonly = "readonly"
                                                                                                                      }
                                                                                                 })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.RepudiationComments, htmlAttributes:new {@class = "col-md-2 control-label"})
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.RepudiationComments, additionalViewData:new
                                                                                               {
                                                                                                   htmlAttributes = new
                                                                                                                    {
                                                                                                                        @class = "form-control",
                                                                                                                        @readonly = "readonly",
                                                                                                                        rows = "3"
                                                                                                                    }
                                                                                               })
                    </div>
                </div>
            </div>
        </div>
    }

    // Repudiation Review
    if (Model.IsCurrentPortalAuthority && Model.Status == ReportStatusName.Repudiated)
    {
        <div class="box box-primary" id="divRepudiationReview">
            <div class="box-header with-border">
                <h3 class="box-title">Repudiation Review</h3>
                <div class="box-tools pull-right">
                    <button class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                </div>
            </div>
            <div class="box-body form-horizontal">
                @if (ViewBag.ShowRepudiationReviewConfirmationMessage != null && ViewBag.ShowRepudiationReviewConfirmationMessage)
                {
                    <div class="alert alert-dismissible alert-success">
                        <button aria-hidden="true" class="close" data-dismiss="alert" type="button">&times;</button>
                        <h5>
                            <i class="fa fa-check icon"></i>
                            @ViewBag.RepudiationReviewConfirmationMessage
                        </h5>
                    </div>
                }
                @if (Model.RepudiationReviewDateTimeLocal.HasValue)
                {
                    <div class="form-group">
                        @Html.LabelFor(m => m.RepudiationReviewer, htmlAttributes:new {@class = "col-md-2 control-label"})
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.RepudiationReviewer, additionalViewData:new
                                                                                                   {
                                                                                                       htmlAttributes = new
                                                                                                                        {
                                                                                                                            @class = "form-control",
                                                                                                                            @readonly = "readonly"
                                                                                                                        }
                                                                                                   })
                        </div>
                        @Html.LabelFor(m => m.RepudiationReviewDateTimeLocal, htmlAttributes:new {@class = "col-md-2 control-label"})
                        <div class="col-md-4">
                            @(Html.Kendo().DateTimePicker()
                                  .Name(componentName:"RepudiationReviewDateTimeLocal")
                                  .Value(date:Model.LastSentDateTimeLocal)
                                  .Format(format:"MM/dd/yyyy hh:mm tt")
                                  .Max(date:DateTime.Now)
                                  .HtmlAttributes(attributes:new
                                                             {
                                                                 @readonly = true,
                                                                 style = "width:210px; background-color: #eee;"
                                                             }))
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.RepudiationReviewComments, htmlAttributes:new
                                                                                        {
                                                                                            @class = "col-md-2 control-label"
                                                                                        })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.RepudiationReviewComments, additionalViewData:new
                                                                                                         {
                                                                                                             htmlAttributes = new
                                                                                                                              {
                                                                                                                                  @class = "form-control",
                                                                                                                                  @readonly = "readonly",
                                                                                                                                  rows = "3"
                                                                                                                              }
                                                                                                         })

                        </div>
                    </div>
                }
                else
                {
                    <div class="form-group">
                        @Html.LabelFor(m => m.RepudiationReviewComments, htmlAttributes:new
                                                                                        {
                                                                                            @class = "col-md-2 control-label required"
                                                                                        })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.RepudiationReviewComments, additionalViewData:new
                                                                                                         {
                                                                                                             htmlAttributes = new
                                                                                                                              {
                                                                                                                                  @class = "form-control",
                                                                                                                                  rows = "3",
                                                                                                                                  maxlength = 500
                                                                                                                              }
                                                                                                         })
                            @Html.ValidationMessageFor(m => m.RepudiationReviewComments, validationMessage:"", htmlAttributes:new {@class = "text-red"})

                        </div>
                    </div>
                }
            </div>
            @if (!Model.RepudiationReviewDateTimeLocal.HasValue)
            {
                <div class="box-footer">
                    <div class="form-group pull-right">
                        <input type="submit" value="Repudiation Review Complete" class="btn btn-primary btn-sm" formaction="@Url.Action(actionName:"ReviewRepudiation", controllerName:"ReportPackage", routeValues:new {id = Model.Id})" formmethod="post" />
                    </div>
                </div>
            }
        </div>
    }

    // Send to LinkoCTS
    if (Model.IsCurrentPortalAuthority && ((Model.Status == ReportStatusName.Submitted && Model.SubmissionReviewDateTimeLocal != null) || Model.Status == ReportStatusName.Repudiated))
    {
        <div class="box box-primary" id="divSendToLinkoCTS">
            <div class="box-header with-border">
                <h3 class="box-title">Send to LinkoCTS</h3>
                <div class="box-tools pull-right">
                    <button class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                </div>
            </div>
            <div class="box-body form-horizontal">
                @if (ViewBag.ShowSendToLinkoCTSSuccessMessage != null && ViewBag.ShowSendToLinkoCTSSuccessMessage)
                {
                    <div class="alert alert-dismissible alert-success">
                        <button aria-hidden="true" class="close" data-dismiss="alert" type="button">&times;</button>
                        <h5>
                            <i class="fa fa-check icon"></i>
                            @ViewBag.SendToLinkoCTSSuccessMessage
                        </h5>
                    </div>
                }

                <div aria-labelledby="Send to LinkoCTS" class="col-md-12 fade modal modal-info" id="SendToLinkoCTSModal" role="dialog" tabindex="-1">
                    <div class="modal-dialog" role="document">
                        <div class="alert alert-dismissible alert-info modal-content">
                            <button aria-label="Close" class="close" data-dismiss="modal" type="button">&times;</button>
                            <h4 class="box-title">Send Report Package to LinkoCTS</h4>

                            <div class="form-horizontal">
                                <p>
                                    <span id="msgForSendToLinkoCTSModal"></span><br />
                                </p>
                                <div class="form-group">
                                    <div class="pull-right">
                                        <button type="submit" class="btn btn-primary btn-sm" formaction="@Url.Action(actionName: "SendToLinkoCTS", controllerName: "ReportPackage", routeValues: new {id = Model.Id})" formmethod="post">
                                            Yes
                                        </button>
                                        <button aria-label="Close" class="btn btn-primary btn-sm" data-dismiss="modal" type="button">No</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.LastSender, htmlAttributes:new {@class = "col-md-2 control-label"})
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.LastSender, additionalViewData:new
                                                                                      {
                                                                                          htmlAttributes = new
                                                                                                           {
                                                                                                               @class = "form-control",
                                                                                                               @readonly = "readonly"
                                                                                                           }
                                                                                      })
                    </div>
                    @Html.LabelFor(m => m.LastSentDateTimeLocal, htmlAttributes:new {@class = "col-md-2 control-label"})
                    <div class="col-md-4">
                        @(Html.Kendo().DateTimePicker()
                              .Name(componentName:"LastSentDateTimeLocal")
                              .Value(date:Model.LastSentDateTimeLocal)
                              .Format(format:"MM/dd/yyyy hh:mm tt")
                              .Max(date:DateTime.Now)
                              .HtmlAttributes(attributes:new
                                                         {
                                                             @readonly = true,
                                                             style = "width:210px; background-color: #eee;"
                                                         }))
                    </div>
                </div>
            </div>

            <div class="box-footer">
                <div class="form-group pull-right">
                    @if (Model.CtsEventTypeId.HasValue)
                    {
                        <input class="btn btn-primary btn-sm" id="btnSendToLinkoCTS" type="button" value="Send to CTS" />

                        <script>
                            $("#btnSendToLinkoCTS")
                                .click(function()
                                {
                                    var getUrl =
                                        "@Url.Action(actionName:"IsSimilarReportPackageSubmittedAfter", controllerName:"ReportPackage", routeValues:new {id = Model.Id})";

                                    $.ajax({
                                        type: "GET",
                                        url: getUrl,
                                        success: function(response)
                                        {
                                            if (response.toUpperCase() === "TRUE")
                                            {
                                                $("#msgForSendToLinkoCTSModal")
                                                    .html(
                                                        "A newer Report Package exists for this reporting period.<br/>Do you still want to send this Report Package to LinkoCTS?");
                                            }
                                            else
                                            {
                                                $("#msgForSendToLinkoCTSModal")
                                                    .text("Do you want to Send Report Package to LinkoCTS?");
                                            }

                                            $('#SendToLinkoCTSModal').modal('show');
                                        }
                                        //, error: function()
                                        //    {}
                                    });
                                });

                        </script>
                    }
                    else
                    {
                        <input class="btn btn-primary btn-sm" disabled="disabled" type="button" value="Send to CTS" title="The Report Package Template must have a CTS Event Type assigned to show up in LinkoCTS" />
                    }
                </div>
            </div>
        </div>
    }

    // Buttons
    <div class="box box-default" id="divFooter">
        <div class="box-body form-horizontal">

            @if (ViewBag.ShowValidateCorMessage != null && ViewBag.ShowValidateCorMessage)
            {
                <div class="alert alert-dismissible" id="divValidateCorMessage">
                    <button aria-hidden="true" class="close" data-dismiss="alert" type="button">&times;</button>
                    <h5>
                        <i class="fa fa-info icon"></i>
                        @(ViewBag.VerifyResult.Valid ? "COR Validation Successful." : "COR Validation Failed.")
                    </h5>
                    <p>
                        @(ViewBag.VerifyResult.Valid ? "The COR is valid." : "The COR is invalid.")
                    </p>
                    <p style="word-wrap: break-word">
                        @("LinkoExchange COR Signature : " + ViewBag.VerifyResult.DigitalSignature)
                    </p>
                </div>
                <script>
                    $("#divValidateCorMessage")
                        .addClass("@(ViewBag.VerifyResult.Valid ? "alert-success" : "alert-danger")");
                </script>
            }

            <div class="box-tools pull-right">

                @switch (Model.Status)
                {
                    case ReportStatusName.Draft:
                        <input type="submit" value="Save Draft" class="btn btn-primary btn-sm" formaction="@Url.Action(actionName:"ReportPackageDetails", controllerName:"ReportPackage", routeValues:new {id = Model.Id})" formmethod="post" />
                        <input type="submit" value="Ready to Submit" class="btn btn-primary btn-sm" formaction="@Url.Action(actionName:"ReadyToSubmit", controllerName:"ReportPackage", routeValues:new {id = Model.Id})" formmethod="post" />
                        <input class="btn btn-primary btn-sm" data-target="#DeleteReportPackageModal" data-toggle="modal" type="button" value="Delete Draft" />
                        break;
                    case ReportStatusName.ReadyToSubmit:
                        @Html.ActionLink(linkText:"Preview", actionName:"ReportPackagePreview", routeValues:new {id = Model.Id}, htmlAttributes:new {@class = "btn btn-primary btn-sm"})

                        <input type="submit" value="Enable Edit Report Package" class="btn btn-primary btn-sm" formaction="@Url.Action(actionName:"EnableReportPackage", controllerName:"ReportPackage")" formmethod="post" />

                        if (!Model.IsSubmissionBySignatoryRequired)
                        {
                            <input type="submit" value="Sign and Submit" class="btn btn-primary btn-sm" formaction="@Url.Action(actionName:"SignAndSubmit", controllerName:"ReportPackage", routeValues:new {id = Model.Id})" formmethod="post" />
                        }

                        <input class="btn btn-primary btn-sm" data-target="#DeleteReportPackageModal" data-toggle="modal" type="button" value="Delete Report Package" />
                        break;
                    case ReportStatusName.Submitted:
                    case ReportStatusName.Repudiated:
                        @Html.ActionLink(linkText:"Download COR", actionName:"DownloadCor", routeValues:new
                                                                                                        {
                                                                                                            id = Model.Id
                                                                                                        }, htmlAttributes:new
                                                                                                                          {
                                                                                                                              @class = "btn btn-primary btn-sm"
                                                                                                                          })
                        <input class="btn btn-primary btn-sm" type="submit" value="Validate COR" formaction="@Url.Action(actionName:"ValidateCor", controllerName:"ReportPackage", routeValues:new {id = Model.Id})#divFooter" formmethod="post" />
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }
            </div>
        </div>
    </div>

@section Scripts {

    @if (Model.CanCurrentUserSubmitAndReputiate && Model.Status == ReportStatusName.Submitted && ViewBag.ShowRepudiateValidationErrorMessage == null)
    {
        <script>
            // if Model.Status is Submitted and not showing Repudiation validation error message, then collapse the repudiation box onload
            $('#divRepudiateReport').addClass('collapsed-box');
        </script>
    }

    @if (Model.CanCurrentUserSubmitAndReputiate && Model.Status == ReportStatusName.Submitted)
    {
        <script>
            $(document)
                .ready(function()
                {
                    $("#LinkoExchangeForm")
                        .submit(function()
                        {
                            try
                            {
                                $("#RepudiationReasonName").val($("#RepudiationReasonId option:selected").text());

                                return true;
                            }
                            catch (err)
                            {
                                alert(err);
                                return false;
                            }
                        });
                });
        </script>
    }

    @if (Model.Status == ReportStatusName.Draft)
    {
        <script>
            var selectedSamples = $.parseJSON($("#SelectedSamples").val());
            var selectedAttachments = $.parseJSON($("#SelectedAttachments").val());
            var includedCertifications = $.parseJSON($("#IncludedCertifications").val());

            //console.log("selectedSamples: " + $("#SelectedSamples").val());
            //console.log("selectedAttachments: " + $("#SelectedAttachments").val());
            //console.log("includedCertifications: " + $("#IncludedCertifications").val());

            var idField = "Id";

            //on click of the checkbox:gridId
            $(document)
                .on('click', "input[name^='ckgrid']", function()
                {
                    var checked = this.checked;
                    var row = $(this).closest("tr");
                    var gridId = this.name.substring(2); // remove 'ck' from the name to get the grid id
                    var grid = $('[id=' + gridId + ']').data("kendoGrid");
                    var dataItem = grid.dataItem(row);
                    var isFound = false;
                    var id, selectedObj, selectedObjsFromAllGrids;

                    if (gridId.startsWith("gridSample_"))
                    {
                        id = parseInt(gridId.replace('gridSample_', ''));
                        selectedObjsFromAllGrids = selectedSamples;
                    }
                    else
                    {
                        id = parseInt(gridId.replace('gridAttachment_', ''));
                        selectedObjsFromAllGrids = selectedAttachments;
                    }

                    for (var itemIndex = 0; itemIndex < selectedObjsFromAllGrids.length; itemIndex++)
                    {
                        if (selectedObjsFromAllGrids[itemIndex].Id === id)
                        {
                            selectedObj = selectedObjsFromAllGrids[itemIndex];
                            isFound = true;
                            break;
                        }
                    }

                    if (!isFound)
                    {
                        // there was no row selected for the grid. Need to create the selected object
                        selectedObj = {};
                        selectedObj.Id = id;
                        selectedObj.ChildElements = [];

                        if (gridId.startsWith("gridSample_"))
                        {
                            selectedSamples.push(selectedObj);
                        }
                        else
                        {
                            selectedAttachments.push(selectedObj);
                        }
                    }

                    if (selectedObj.Id === id)
                    {
                        if (checked)
                        {
                            //-select the row
                            //row.addClass("k-state-selected");
                            var childElement = {};
                            childElement.Id = dataItem[idField];
                            selectedObj.ChildElements.push(childElement);
                            //console.log(selectedObj.ChildElements);
                        }
                        else
                        {
                            //-remove selection
                            //row.removeClass("k-state-selected");
                            var newArray = selectedObj.ChildElements.filter(function(obj)
                            {
                                return obj.Id !== dataItem[idField];
                            });

                            selectedObj.ChildElements = newArray;

                            //console.log(selectedObj.ChildElements);
                        }
                    }
                });

            //on check of required certificate "Include" checkbox
            $(document)
                .on('ifChecked', "input[name^='ckIncludedCertification']", function()
                {
                    var id = parseInt(this.name.replace('ckIncludedCertification_', ''));
                    includedCertifications[id] = true;
                });
            $(document)
                .on('ifUnchecked', "input[name^='ckIncludedCertification']", function()
                {
                    var id = parseInt(this.name.replace('ckIncludedCertification_', ''));
                    includedCertifications[id] = false;
                });

            //on dataBound event restore previous selected rows:
            function onGridDataBound(e)
            {
                var grid = e.sender;
                var gridId = grid.element[0].id;
                var id;
                var selectedItems;

                if (gridId.startsWith("gridSample_"))
                {
                    id = parseInt(gridId.replace('gridSample_', ''));
                    selectedItems = selectedSamples;
                }
                else
                {
                    id = parseInt(gridId.replace('gridAttachment_', ''));
                    selectedItems = selectedAttachments;
                }

                //console.log("grid id: " + grid.element[0].id);
                var previouslySelectedItemIds = [];

                for (var i = 0; i < selectedItems.length; i++)
                {
                    var item = selectedItems[i];

                    if ((item.Id === id) && (item.ChildElements != null))
                    {
                        for (var j = 0; j < item.ChildElements.length; j++)
                        {
                            var childElement = item.ChildElements[j];
                            previouslySelectedItemIds.push(childElement.Id);
                        }
                    }
                }

                //console.log("previouslySelectedItemIds: " + previouslySelectedItemIds);

                var items = grid.items();
                items.each(function(idx, row)
                {
                    var dataItem = grid.dataItem(row);
                    //The $.inArray() method is similar to JavaScript's native .indexOf() method in that it returns -1 when it doesn't find a match.

                    var isPreviouslySelected = ($.inArray(dataItem[idField], previouslySelectedItemIds) !== -1);

                    if (isPreviouslySelected)
                    {
                        $(row).find(".checkbox").attr('checked', true);
                    }
                    else
                    {
                        $(row).find(".checkbox").attr('checked', false);
                    }
                });
            }

            $(document)
                .ready(function()
                {
                    $("#LinkoExchangeForm")
                        .submit(function()
                        {
                            try
                            {
                                $("#SelectedSamples").val(JSON.stringify(selectedSamples));
                                $("#SelectedAttachments").val(JSON.stringify(selectedAttachments));
                                $("#IncludedCertifications").val(JSON.stringify(includedCertifications));

                                //console.log("SelectedSamples: " + $("#SelectedSamples").val());
                                //console.log("SelectedAttachments: " + $("#SelectedAttachments").val());

                                return true;
                            }
                            catch (err)
                            {
                                alert(err);
                                return false;
                            }
                        });
                });
        </script>
    }
}}

<style>
    /*
        NOTE: this is a specific fix for the problem of tooltips
        not displaying outside the sample results table rows container 
    */ 
    .k-grid-content {
    position:static;
    }
</style>