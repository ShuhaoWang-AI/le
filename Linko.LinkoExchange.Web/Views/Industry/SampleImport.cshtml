@using Linko.LinkoExchange.Core.Domain
@using Linko.LinkoExchange.Core.Enum
@using Linko.LinkoExchange.Services.Dto
@using Linko.LinkoExchange.Web.ViewModels.Industry
@using Linko.LinkoExchange.Web.ViewModels.Shared
@model Linko.LinkoExchange.Web.ViewModels.Industry.SampleImportViewModel

@{
    ViewBag.Title = "Import Samples";
    var isStepSelectDataProvider = Model.CurrentSampleImportStep == SampleImportViewModel.SampleImportStep.SelectDataSource;
    var isStepSelectFile = Model.CurrentSampleImportStep == SampleImportViewModel.SampleImportStep.SelectFile||
                           Model.CurrentSampleImportStep == SampleImportViewModel.SampleImportStep.FileValidation;
    var isStepSelectDataDefault = Model.CurrentSampleImportStep == SampleImportViewModel.SampleImportStep.SelectDataDefault;
    var isStepDataTranslations = Model.CurrentSampleImportStep == SampleImportViewModel.SampleImportStep.DataTranslations;
    var isStepPreview = Model.CurrentSampleImportStep == SampleImportViewModel.SampleImportStep.ShowPreImportOutput ||
                        Model.CurrentSampleImportStep == SampleImportViewModel.SampleImportStep.DataValidation;
    var isStepImport = Model.CurrentSampleImportStep == SampleImportViewModel.SampleImportStep.ShowImportOutput;
}

@using (Html.BeginForm(actionName:"SampleImport", controllerName:"Industry", method:FormMethod.Post, htmlAttributes:new {id = "LinkoExchangeForm"}))
{
    @Html.AntiForgeryToken()

    <section>
        <ol class="breadcrumb">
            <li>
                <a href="#" onclick="location.href = '@Url.Action(actionName:"Index", controllerName:"Industry")'"><i class=""></i> Home </a>
            </li>
            <li>
                <a href="#" onclick="location.href = '@Url.Action(actionName:"Samples", controllerName:"Industry", routeValues:new {sampleStatus = SampleStatusName.Draft})'"><i class=""></i> Samples - @Label.ResourceManager.GetString(name:SampleStatusName.Draft.ToString())</a>
            </li>
            <li class="active">
                Import Samples
            </li>
        </ol>
    </section>

    @Html.HiddenFor(model => model.CurrentSampleImportStep)

    <div class="stepwizard">
        <div class="stepwizard-row">
            <div class="stepwizard-step col-xs-2">
                <span class="btn @( isStepSelectDataProvider? "btn-primary" : "btn-default" ) stepwizard-btn-circle"
                      @( isStepSelectDataProvider ? "" : "disabled=\"disabled\"" )>1</span>
                <p><small>Select Data Provider</small></p>
            </div>
            <div class="stepwizard-step col-xs-2">
                <span class="btn @( isStepSelectFile? "btn-primary" : "btn-default" ) stepwizard-btn-circle"
                      @( isStepSelectFile ? "" : "disabled=\"disabled\"" )>2</span>
                <p><small>Select File</small></p>
            </div>
            <div class="stepwizard-step col-xs-2">
                <span class="btn @( isStepSelectDataDefault? "btn-primary" : "btn-default" ) stepwizard-btn-circle"
                      @( isStepSelectDataDefault ? "" : "disabled=\"disabled\"" )>3</span>
                <p><small>Select Data Default</small></p>
            </div>
            <div class="stepwizard-step col-xs-2">
                <span class="btn @( isStepDataTranslations? "btn-primary" : "btn-default" ) stepwizard-btn-circle"
                      @( isStepDataTranslations ? "" : "disabled=\"disabled\"" )>4</span>
                <p><small>Data Translation</small></p>
            </div>
            <div class="stepwizard-step col-xs-2">
                <span class="btn @( isStepPreview? "btn-primary" : "btn-default" ) stepwizard-btn-circle"
                      @( isStepPreview ? "" : "disabled=\"disabled\"" )>5</span>
                <p><small>Preview</small></p>
            </div>
            <div class="stepwizard-step col-xs-2">
                <span class="btn @( isStepImport? "btn-primary" : "btn-default" ) stepwizard-btn-circle"
                      @( isStepImport ? "" : "disabled=\"disabled\"" )>6</span>
                <p><small>Import</small></p>
            </div>
        </div>
    </div>

    // SampleImportStep.SelectDataSource
    <section class="box box-primary">
        <div class="box-header with-border">
            <h3 class="box-title">Select Data Provider</h3>
            <div class="box-tools pull-right">
                @if (isStepSelectDataProvider)
                {
                    <button class="btn btn-primary btn-sm" onclick="location.href = '@Url.Action(actionName:"NewDataSourceDetails", controllerName:"Industry")'">
                        Create New Data Provider
                    </button>
                }
                <button class="btn btn-box-tool" data-widget="collapse">
                    <i class="fa fa-minus"></i>
                </button>
            </div>
        </div>
        <div class="box-body form-horizontal">
            @if (isStepSelectDataProvider)
            {
                @Html.ValidationSummary(excludePropertyErrors:false, message:Message.ValidationSummaryHeaderText, 
                    htmlAttributes:new { @class = "alert alert-danger" })

                if (Model.StepSelectDataSource.AvailableDataSources.Count <= 1)
                {
                    <div class="alert alert-info">
                        <h5>
                            You can import sample data from an .xlsx file, but you must create a data source first. Click the Create New Data Source button to be taken to the Industry Account - Data Sources screen to create one.
                        </h5>
                    </div>
                }

                <div class="form-group">
                    @Html.LabelFor(model => model.SelectedDataSourceId, htmlAttributes: new { @class = "control-label col-md-2 required" })
                    <div class="col-md-4">
                        @Html.HiddenFor(model => model.SelectedDataSourceName)
                        @Html.DropDownList(name: "SelectedDataSourceId", selectList: Model.StepSelectDataSource.AvailableDataSources,
                            htmlAttributes: new { @class = "form-control" })
                    </div>
                </div>

                <script>
                    $(document)
                        .ready(function() {
                            $("#LinkoExchangeForm")
                                .submit(function() {
                                    $("#SelectedDataSourceName").val($("#SelectedDataSourceId option:selected").text());
                                    return true;
                                });
                        });
                </script>

                <div class="box-footer">
                    <div class="form-group pull-right">
                        <input class="btn btn-primary btn-sm" type="submit" value="Next" />
                    </div>
                </div>
            }
            else
            {
                <div class="form-group">
                    @Html.LabelFor(model => model.SelectedDataSourceId, htmlAttributes:new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.HiddenFor(model => model.SelectedDataSourceId)
                        @Html.EditorFor(model => model.SelectedDataSourceName, 
                            additionalViewData:new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    </div>
                </div>
            }
        </div>
    </section>

    // SampleImportStep.SelectFile
    if (Model.CurrentSampleImportStep > SampleImportViewModel.SampleImportStep.SelectDataSource)
    {
        <section class="box box-primary">
            <div class="box-header with-border">
                <h3 class="box-title">Select File</h3>
                <div class="box-tools pull-right">
                    <button class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                </div>
            </div>

            <div class="box-body form-horizontal">
                @Html.HiddenFor(model => model.ImportTempFileId)
                @Html.HiddenFor(model => model.SelectedFileName)

                @if (Model.CurrentSampleImportStep == SampleImportViewModel.SampleImportStep.SelectFile)
                {
                    <div class="alert alert-danger validation-summary-valid" id="validationSummarySelectFile">
                        <h5>
                            @Message.ValidationSummaryHeaderText
                        </h5>
                        <ul></ul>
                    </div>

                    <div class="alert alert-info">
                        <h5>
                            Select an .xlsx file to upload or drag and drop the file into the area below.
                        </h5>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.SelectedFileName, htmlAttributes:new
                                                                                       {
                                                                                           @class = "control-label col-md-2"
                                                                                       })
                        <div class="col-md-8">
                            <input id="upload" name="upload" style="width: 100%;" type="file" />
                        </div>
                    </div>
                }
                else
                {
                    <div class="form-group">
                        @Html.LabelFor(model => model.SelectedFileName, htmlAttributes:new
                                                                                       {
                                                                                           @class = "control-label col-md-2"
                                                                                       })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.SelectedFileName, additionalViewData:new
                                                                                                {
                                                                                                    htmlAttributes = new
                                                                                                                     {
                                                                                                                         @class = "form-control",
                                                                                                                         @readonly = "readonly"
                                                                                                                     }
                                                                                                })
                        </div>
                    </div>
                }
            </div>

            @if (Model.CurrentSampleImportStep == SampleImportViewModel.SampleImportStep.SelectFile)
            {
                @Scripts.Render(paths:"~/bundles/jqueryval")

                <script>
                    var allowedFileExtensions = [".xlsx"];

                    $("#upload")
                        .kendoUpload({
                            async: {
                                saveUrl: "@Url.Action(actionName:"ImportSampleFile", controllerName:"Industry")",
                                autoUpload: false
                            },
                            upload: function(e) {
                                var additional = {
                                    "CurrentSampleImportStep": "@Model.CurrentSampleImportStep",
                                    "SelectedDataSourceId": "@Model.SelectedDataSourceId",
                                    "SelectedDataSourceName": "@Model.SelectedDataSourceName"
                                };
                                e.data = additional;
                            },
                            multiple: false,
                            localization: {
                                "select": "Select file to upload...",
                                dropFilesHere: "Drop file here to upload"
                            },
                            validation: {
                                allowedExtensions: allowedFileExtensions,
                                maxFileSize: @ViewBag.MaxFileSize,
                                minFileSize: 1
                            },
                            success: function(e) {
                                var result = e.response;
                                $("#ImportTempFileId").val(result.ImportTempFileId);
                                $("#SelectedFileName").val(result.SelectedFileName);
                                $("#LinkoExchangeForm").submit();
                            },
                            error: onFileUploadError,
                            progress: onFileUploadProgress
                        });

                    function onFileUploadError(e) {
                        var errorData = eval(e.XMLHttpRequest.response);
                        var errorMessages = [];
                        errorData.forEach(function(item, index) {
                            errorMessages.push("<li>" + item + "</li>");
                        });


                        var validationSummary = $("#validationSummarySelectFile");

                        validationSummary.removeClass("validation-summary-valid");
                        validationSummary.addClass("validation-summary-errors");

                        validationSummary.find("ul").empty(); // remove li elements from the validation Summary list. valid form also have empty li element

                        validationSummary.find("ul").append(errorMessages);
                    }

                    function onFileUploadProgress(e) {
                        console.log("Upload progress :: " + e.percentComplete + "% :: ");
                    }
                </script>
            }
        </section>
    }

    // SampleImportStep.FileValidation
    if (Model.CurrentSampleImportStep == SampleImportViewModel.SampleImportStep.FileValidation)
    {
        <section class="box box-primary">
            <div class="box-header with-border">
                <h3 class="box-title">File Validation</h3>
                <div class="box-tools pull-right">
                    <button class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                </div>
            </div>
            <div class="box-body form-horizontal">
                @Html.ValidationSummary(excludePropertyErrors:false, message:Message.ValidationSummaryHeaderText, 
                    htmlAttributes:new { @class = "alert alert-danger" })
                
                @if (Model.StepFileValidation != null && Model.StepFileValidation.Errors != null)
                {
                    <div class="alert alert-danger">
                        <h5>
                            File import failed! Check the errors below.
                        </h5>
                    </div>
                    <div class="form-group">
                        <div class="col-md-12">
                            @(Html.Kendo().Grid(dataSource:Model.StepFileValidation.Errors)
                                  .Name(componentName:"gridFileValidationErrors")
                                  .Columns(columns =>
                                           {
                                               columns.Bound(c => c.ErrorMessage).Title(text:"Error");
                                               columns.Bound(c => c.RowNumbers).Title(text:"Row Number(s)");
                                           })
                                  .Scrollable(s => s.Height(value:"auto")))
                        </div>
                    </div>
                }
            </div>
        </section>
    }

    //SampleImportStep.SelectDataDefault
    if (Model.CurrentSampleImportStep > SampleImportViewModel.SampleImportStep.FileValidation)
    {
        <section class="box box-primary">
            <div class="box-header with-border">
                <h3 class="box-title">Select Data Default</h3>
                <div class="box-tools pull-right">
                    <button class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                </div>
            </div>
            <div class="box-body form-horizontal">
                @if (isStepSelectDataDefault)
                {
                    @Html.ValidationSummary(excludePropertyErrors: false, message: Message.ValidationSummaryHeaderText,
                        htmlAttributes: new { @class = "alert alert-danger" })

                    var requiredDefaultMonitoringPoint = Model.SampleImportDto.RequiredDefaultValues.Find(x => x.SampleImportColumnName == SampleImportColumnName.MonitoringPoint);
                    var requiredDefaultCollectionMethod = Model.SampleImportDto.RequiredDefaultValues.Find(x => x.SampleImportColumnName == SampleImportColumnName.CollectionMethod);
                    var requiredDefaultSampleType = Model.SampleImportDto.RequiredDefaultValues.Find(x => x.SampleImportColumnName == SampleImportColumnName.SampleType);
                    if (requiredDefaultMonitoringPoint != null)
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.SelectedDefaultMonitoringPointId, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.HiddenFor(model => model.SelectedDefaultMonitoringPointName)
                                @Html.DropDownList(name: "SelectedDefaultMonitoringPointId", 
                                    selectList: new SelectList(items:requiredDefaultMonitoringPoint.Options, dataValueField:"Id", dataTextField:"DisplayValue"),
                                    htmlAttributes: new { @class = "form-control" })
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(model => model.SelectedDefaultMonitoringPointId)
                        @Html.HiddenFor(model => model.SelectedDefaultMonitoringPointName)
                    }
                    if (requiredDefaultCollectionMethod != null)
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.SelectedDefaultCollectionMethodId, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.HiddenFor(model => model.SelectedDefaultCollectionMethodName)
                                @Html.DropDownList(name: "SelectedDefaultCollectionMethodId",
                                    selectList: new SelectList(items:requiredDefaultCollectionMethod.Options, dataValueField: "Id", dataTextField: "DisplayValue"),
                                    htmlAttributes: new { @class = "form-control" })
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(model => model.SelectedDefaultCollectionMethodId)
                        @Html.HiddenFor(model => model.SelectedDefaultCollectionMethodName)
                    }
                    if (requiredDefaultSampleType != null)
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.SelectedDefaultSampleTypeId, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.HiddenFor(model => model.SelectedDefaultSampleTypeName)
                                @Html.DropDownList(name: "SelectedDefaultSampleTypeId",
                                    selectList: new SelectList(items: requiredDefaultSampleType.Options, dataValueField: "Id", dataTextField: "DisplayValue"),
                                    htmlAttributes: new { @class = "form-control" })
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(model => model.SelectedDefaultSampleTypeId)
                        @Html.HiddenFor(model => model.SelectedDefaultSampleTypeName)
                    }

                    <script>
                        $(document)
                            .ready(function() {
                                $("#LinkoExchangeForm")
                                    .submit(function() {
                                        var defaultMonitoringPoitnNameFromDropdown = $("#SelectedDefaultMonitoringPointId option:selected").text();
                                        if (defaultMonitoringPoitnNameFromDropdown) {
                                            $("#SelectedDefaultMonitoringPointName").val(defaultMonitoringPoitnNameFromDropdown);
                                        }
                                        var defaultCollectionMethodNameFromDropdown = $("#SelectedDefaultCollectionMethodId option:selected").text();
                                        if (defaultCollectionMethodNameFromDropdown) {
                                            $("#SelectedDefaultCollectionMethodName").val(defaultCollectionMethodNameFromDropdown);
                                        }
                                        var defaultCollectionSampleTypeFromDropdown = $("#SelectedDefaultSampleTypeId option:selected").text();
                                        if (defaultCollectionSampleTypeFromDropdown) {
                                            $("#SelectedDefaultSampleTypeName").val(defaultCollectionSampleTypeFromDropdown);
                                        }
                                        return true;
                                    });
                            });
                    </script>
                    <div class="box-footer">
                        <div class="form-group pull-right">
                            <input class="btn btn-primary btn-sm" type="submit" value="Next" />
                        </div>
                    </div>
                }
                else
                {
                    if (!(Model.SelectedDefaultMonitoringPointId > 0 || Model.SelectedDefaultCollectionMethodId > 0 || Model.SelectedDefaultSampleTypeId > 0))
                    {
                        <div class="alert-light" role="alert">
                            Not Applicable. No empty recommended fields require Default Value from the import file.
                        </div>
                    }

                    if (Model.SelectedDefaultMonitoringPointId > 0)
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.SelectedDefaultMonitoringPointId, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.HiddenFor(model => model.SelectedDefaultMonitoringPointId)
                                @Html.EditorFor(model => model.SelectedDefaultMonitoringPointName, 
                                    additionalViewData:new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(model => model.SelectedDefaultMonitoringPointId)
                        @Html.HiddenFor(model => model.SelectedDefaultMonitoringPointName)
                    }
                    if (Model.SelectedDefaultCollectionMethodId > 0)
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.SelectedDefaultCollectionMethodId, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.HiddenFor(model => model.SelectedDefaultCollectionMethodId)
                                @Html.EditorFor(model => model.SelectedDefaultCollectionMethodName, 
                                    additionalViewData:new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(model => model.SelectedDefaultCollectionMethodId)
                        @Html.HiddenFor(model => model.SelectedDefaultCollectionMethodName)
                    }
                    if (Model.SelectedDefaultSampleTypeId > 0)
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.SelectedDefaultSampleTypeId, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-4">
                                @Html.HiddenFor(model => model.SelectedDefaultSampleTypeId)
                                @Html.EditorFor(model => model.SelectedDefaultSampleTypeName,
                                    additionalViewData: new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(model => model.SelectedDefaultSampleTypeId)
                        @Html.HiddenFor(model => model.SelectedDefaultSampleTypeName)
                    }
                }
            </div>
        </section>
    }

    //SampleImportStep.DataTranslation
    if (Model.CurrentSampleImportStep > SampleImportViewModel.SampleImportStep.SelectDataDefault)
    {
        <section class="box box-primary">
            <div class="box-header with-border">
                <h3 class="box-title">Data Translation</h3>
                <div class="box-tools pull-right">
                    <button class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                </div>
            </div>
            <div class="box-body form-horizontal">
                @if (isStepDataTranslations)
                {
                    @Html.ValidationSummary(excludePropertyErrors:true, message:Message.ValidationSummaryHeaderText,
                        htmlAttributes:new {@class = "alert alert-danger", @id= "validationSummaryDataTranslations" })

                    <div class="alert alert-info">
                        <h5>
                            There is data in the file we don't recognize.  Tell us what this data is and we'll use it instead. Plus we'll remember it for next time so we won't have to ask you again.
                        </h5>
                        <h5>
                            The following Import file term(s) must be translated to LinkoExchange term(s) before proceed to next step.
                        </h5>
                    </div>

                    <h4>@(Model.MissingTranslation.Title)</h4>
                    <div class="form-group">
                        <div class="col-md-12">
                        @(Html.Kendo().Grid<DataSourceTranslationViewModel>(dataSource:Model.MissingTranslation.MisstingTranslations)
                              .Name(componentName: "gridMissingTranslation")
                              .Columns(columns =>
                              {
                                  columns.Bound(c => c.DataSourceTerm)
                                         .HtmlAttributes(attributes: new { @class = "col-sm-2" })
                                         .HeaderHtmlAttributes(attributes: new { @class = "col-sm-2" });
                                  columns.Bound(c => c.TranslatedItem)
                                         .ClientTemplate(value: "#= (TranslatedItem==null)? '' : TranslatedItem.DisplayName #")
                                         .HtmlAttributes(attributes: new { @class = "col-sm-4" })
                                         .HeaderHtmlAttributes(attributes: new { @class = "col-sm-4" });
                                  columns.Command(command => { command.Edit().UpdateText("Save"); });
                              })
                              .Editable(editable => editable.Mode(GridEditMode.InLine))
                              .Pageable(pager => pager.Enabled(value:false))
                              .Scrollable(s => s.Enabled(value: false))
                              .Sortable(sortable => { sortable.SortMode(value: GridSortMode.MultipleColumn); })
                              .Resizable(resizable => resizable.Columns(value: true))
                              .NoRecords(text: "No translation requried.")
                              .DataSource(dataSource =>
                                          dataSource.Ajax()
                                                    .ServerOperation(enabled: false)
                                                    .Batch(enabled: false)
                                                    .Sort(sort => { sort.Add(memberName: "DataSourceTerm").Ascending(); })
                                                    .PageSize(pageSize: 100)
                                                    .Update(update => update.Action(actionName: "SampleImportAddMissingTranslation", controllerName: "Industry"))
                                                    .Model(model =>
                                                    {
                                                        model.Id(p => p.DataSourceTerm);
                                                        model.Field(p => p.DataSourceTerm).Editable(enabled: false);
                                                        model.Field(p => p.Id).Editable(enabled: false);
                                                        model.Field(p => p.DataSourceId).Editable(enabled: false);
                                                        model.Field(p => p.TranslationType).Editable(enabled: false);
                                                        model.Field(p => p.TranslatedItem).DefaultValue(ViewData[key: "defaultLinkoExchangeTerm"] as DropdownOptionViewModel);
                                                    })
                            ))
                        </div>
                    </div>
                }
                else
                {
                    <div class="alert-light" role="alert">
                        Not Applicable. No new Data Translation is not implemented yet
                    </div>
                }
            </div>
            @if (isStepDataTranslations)
            {
                <div class="box-footer">
                    <div class="form-group pull-right">
                        <input class="btn btn-primary btn-sm" type="submit" value="Next" />
                    </div>
                </div>
            }
        </section>
    }

    // SampleImportStep.DataValidation
    if (Model.CurrentSampleImportStep == SampleImportViewModel.SampleImportStep.DataValidation)
    {
        <section class="box box-primary">
            <div class="box-header with-border">
                <h3 class="box-title">Data Validation</h3>
                <div class="box-tools pull-right">
                    <button class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                </div>
            </div>
            <div class="box-body form-horizontal">
                <div class="alert alert-danger">
                    <h5>
                        Data Validation failed!  Correct the errors below in the file and try the import again.
                    </h5>
                </div>
                <div class="form-group">
                    <div class="col-md-12">
                        @if (Model.StepDataValidation != null && Model.StepDataValidation.Errors != null)
                        {
                            @(Html.Kendo().Grid(dataSource: Model.StepDataValidation.Errors)
                                  .Name(componentName: "gridDataValidationErrors")
                                  .Columns(columns =>
                                  {
                                      columns.Bound(c => c.ErrorMessage).Title(text: "Error");
                                      columns.Bound(c => c.RowNumbers).Title(text: "Row Number(s)");
                                  })
                                  .Scrollable(s => s.Height(value: "auto")))
                        }
                    </div>
                </div>
            </div>
        </section>
    }

    // SampleImportStep.ShowPreImportOutput
    if (Model.CurrentSampleImportStep == SampleImportViewModel.SampleImportStep.ShowPreImportOutput)
    {
        var rowCount = Model.SampleImportDto.Rows.Count;
        <section class="box box-primary">
            <div class="box-header with-border">
                <h3 class="box-title">Preview Import</h3>
                <div class="box-tools pull-right">
                    <button class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                </div>
            </div>
            <div class="box-body form-horizontal">
                <div class="alert alert-info">
                    <h5>
                        Sample file is ready to import
                    </h5>
                </div>
                <div class="form-group">
                    <div class="col-md-12">
                        <div class="box box-group box-solid" style="padding: 0 0 0 10px;">
                            <div class="box-header">
                                <button class="btn btn-box-tool" data-widget="collapse">
                                    <i class="fa fa-minus"></i>
                                </button>
                                &nbsp;
                                <h3 class="box-title">Preview Summary </h3>
                            </div>
                            <div class="box-body box-collapse collapse form-horizontal in" style="padding: 0 60px;">
                                @(rowCount) sample result(s) are ready to import. <br /> <br />

                                @if (Model.SampleImportDto.SampleDtos != null)
                                {
                                    var newSampleAddCount = Model.SampleImportDto.SampleDtos.Count(x => !x.SampleId.HasValue);

                                    if (newSampleAddCount > 0)
                                    {
                                        <span>@newSampleAddCount new draft sample(s) are ready to create. <br /></span>
                                    }

                                    var existingSampleUpdateCount = Model.SampleImportDto.SampleDtos.Count(x => x.SampleId.HasValue);

                                    if (existingSampleUpdateCount > 0)
                                    {
                                        <span>@existingSampleUpdateCount existing draft sample(s) are ready to update. <br /></span>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
                
                <script>
                    $(document)
                        .ready(function() {
                            $("#LinkoExchangeForm")
                                .submit(function() {
                                    $("#CurrentSampleImportStep").val(@((int)SampleImportViewModel.SampleImportStep.ShowImportOutput));
                                    return true;
                                });
                        });
                </script>
                <div class="box-footer">
                    <div class="form-group pull-right">
                        
                        <input class="btn btn-primary btn-sm" type="submit" value="Import" />
                    </div>
                </div>
            </div>
        </section>
    }

    if (Model.CurrentSampleImportStep == SampleImportViewModel.SampleImportStep.ShowImportOutput)
    {
        // SampleImportStep.ShowImportOutput
        <section class="box box-primary">
            <div class="box-header with-border">
                <h3 class="box-title">Data Imported</h3>
                <div class="box-tools pull-right">
                    <button class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                </div>
            </div>
            <div class="box-body form-horizontal">
                <div class="alert alert-success">
                    <h5>
                        Samples imported successfully!
                    </h5>
                </div>
                <div class="form-group">
                    <div class="col-md-12">
                        <div class="box box-group box-solid" style="padding: 0 0 0 10px;">
                            <div class="box-header">
                                <button class="btn btn-box-tool" data-widget="collapse">
                                    <i class="fa fa-minus"></i>
                                </button>
                                &nbsp;
                                <h3 class="box-title">Import Summary </h3>
                            </div>
                            <div class="box-body box-collapse collapse form-horizontal in" style="padding: 0 60px;">
                                @Model.SampleImportDto.Rows.Count sample result(s) imported. <br /> <br />

                                @if (Model.SampleImportDto.SampleDtos != null)
                                {
                                    var newSampleAddCount = Model.SampleImportDto.SampleDtos.Count(x => !x.SampleId.HasValue);

                                    if (newSampleAddCount > 0)
                                    {
                                        <span>@newSampleAddCount new draft sample(s) created. <br /></span>
                                    }

                                    var existingSampleUpdateCount = Model.SampleImportDto.SampleDtos.Count(x => x.SampleId.HasValue);

                                    if (existingSampleUpdateCount > 0)
                                    {
                                        <span>@existingSampleUpdateCount existing draft sample(s) updated. <br /></span>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    }
}
