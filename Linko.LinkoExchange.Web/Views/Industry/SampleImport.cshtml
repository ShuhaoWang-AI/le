@using Linko.LinkoExchange.Core.Domain
@using Linko.LinkoExchange.Core.Enum
@using Linko.LinkoExchange.Core.Validation
@using Linko.LinkoExchange.Services.ImportSampleFromFile
@using Linko.LinkoExchange.Web.Shared
@using Linko.LinkoExchange.Web.ViewModels.Industry
@using Linko.LinkoExchange.Web.ViewModels.Shared
@model Linko.LinkoExchange.Web.ViewModels.Industry.SampleImportViewModel

@{
    ViewBag.Title = "Import Samples";
    var isStepSelectDataProvider = Model.CurrentSampleImportStep == SampleImportViewModel.SampleImportStep.SelectDataSource;
    var isStepSelectFile = Model.CurrentSampleImportStep == SampleImportViewModel.SampleImportStep.SelectFile ||
                           Model.CurrentSampleImportStep == SampleImportViewModel.SampleImportStep.FileValidation;
    var isStepSelectDataDefault = Model.CurrentSampleImportStep == SampleImportViewModel.SampleImportStep.SelectDataDefault;
    var isStepDataTranslations = Model.CurrentSampleImportStep == SampleImportViewModel.SampleImportStep.DataTranslations;
    var isStepPreview = Model.CurrentSampleImportStep == SampleImportViewModel.SampleImportStep.ShowPreImportOutput ||
                        Model.CurrentSampleImportStep == SampleImportViewModel.SampleImportStep.DataValidation;
    var isStepImport = Model.CurrentSampleImportStep == SampleImportViewModel.SampleImportStep.ShowImportOutput;
}

@using (Html.BeginForm(actionName:"SampleImport", controllerName:"Industry", method:FormMethod.Post, htmlAttributes:new {id = "LinkoExchangeForm"}))
{
    @Html.AntiForgeryToken()

    <section>
        <ol class="breadcrumb">
            <li>
                <a href="#" onclick="location.href = '@Url.Action(actionName:"Index", controllerName:"Industry")'"><i class=""></i> Home </a>
            </li>
            <li>
                <a href="#" onclick="location.href = '@Url.Action(actionName:"Samples", controllerName:"Industry", routeValues:new {sampleStatus = SampleStatusName.Draft})'"><i class=""></i> Samples - @Label.ResourceManager.GetString(name:SampleStatusName.Draft.ToString())</a>
            </li>
            <li class="active">
                Import Samples
            </li>
        </ol>
    </section>

    @Html.HiddenFor(model => model.ImportId)
    @Html.HiddenFor(model => model.CurrentSampleImportStep)

	if (Model.CurrentSampleImportStep != SampleImportViewModel.SampleImportStep.ShowImportOutput)
	{
		<div class="stepwizard">
			<div class="stepwizard-row">
				<div class="col-xs-1"></div>
				<div class="col-xs-2 stepwizard-step">
					<span class="btn @(isStepSelectDataProvider ? "btn-primary" : "btn-default") stepwizard-btn-circle"
						  @(isStepSelectDataProvider ? "" : "disabled=\"disabled\"")>1</span>
					<p><small>Select Data Provider</small></p>
				</div>
				<div class="col-xs-2 stepwizard-step">
					<span class="btn @(isStepSelectFile ? "btn-primary" : "btn-default") stepwizard-btn-circle"
						  @(isStepSelectFile ? "" : "disabled=\"disabled\"")>2</span>
					<p><small>Select File</small></p>
				</div>
				<div class="col-xs-2 stepwizard-step">
					<span class="btn @(isStepSelectDataDefault ? "btn-primary" : "btn-default") stepwizard-btn-circle"
						  @(isStepSelectDataDefault ? "" : "disabled=\"disabled\"")>3</span>
					<p><small>Select Data Defaults</small></p>
				</div>
				<div class="col-xs-2 stepwizard-step">
					<span class="btn @(isStepDataTranslations ? "btn-primary" : "btn-default") stepwizard-btn-circle"
						  @(isStepDataTranslations ? "" : "disabled=\"disabled\"")>4</span>
					<p><small>Translate Data</small></p>
				</div>
				<div class="col-xs-2 stepwizard-step">
					<span class="btn @(isStepPreview ? "btn-primary" : "btn-default") stepwizard-btn-circle"
						  @(isStepPreview ? "" : "disabled=\"disabled\"")>5</span>
					<p><small>Preview & Import</small></p>
				</div>
				<div class="col-xs-1"></div>
			</div>
		</div>
     }
    // SampleImportStep.SelectDataSource
    if (!isStepImport)
    {
        <section id="@SampleImportViewModel.SampleImportStep.SelectDataSource.ToString()" class="box box-primary">
            <div class="box-header with-border">
                <h3 class="box-title width200">Select Data Provider</h3>
                <div class="box-tools pull-right">
                    @if (isStepSelectDataProvider)
                    {
                        <a href="#" class="btn btn-primary btn-sm" onclick="location.href = '@Url.Action(actionName:"NewDataSourceDetails", controllerName:"Industry")'">
                            Create New Data Provider
                        </a>
                    }
                    <button class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                </div>
            </div>
            <div class="box-body form-horizontal">
                @if (isStepSelectDataProvider)
                {
                    @Html.ValidationSummary(excludePropertyErrors:false, message:Message.ValidationSummaryHeaderText,
                        htmlAttributes:new {@class = "alert alert-danger"})

                    if (Model.StepSelectDataSource.AvailableDataSources.Count <= 1)
                    {
                        <div class="alert alert-info">
                            <h5>
                                You can import sample data from an .xlsx file, but you must create a data source first. Click the Create New Data Source button to be taken to the Industry Account - Data Sources screen to create one.
                            </h5>
                        </div>
                    }

                    <div class="form-group">
                        @Html.LabelFor(model => model.SelectedDataSourceId, htmlAttributes:new {@class = "control-label col-md-2 required"})
                        <div class="col-md-4">
                            @Html.DropDownList(name:"SelectedDataSourceId", selectList:Model.StepSelectDataSource.AvailableDataSources,
                                htmlAttributes:new {@class = "form-control"})
                        </div>
                    </div>

                    <div class="box-footer">
                        <div class="form-group pull-right">
                            <input class="btn btn-primary btn-sm" type="submit" value="Next" />
                        </div>
                    </div>
                }
                else
                {
                    <div class="form-group">
                        @Html.LabelFor(model => model.SelectedDataSourceId, htmlAttributes:new {@class = "control-label col-md-2"})
                        <div class="col-md-4">
                            @Html.HiddenFor(model => model.SelectedDataSourceId)
                            @Html.EditorFor(model => model.SampleImportDto.DataSource.Name,
                                additionalViewData:new {htmlAttributes = new {@class = "form-control", @readonly = "readonly"}})
                        </div>
                    </div>
                }
            </div>
        </section>
    }

    // SampleImportStep.SelectFile
    if (Model.CurrentSampleImportStep > SampleImportViewModel.SampleImportStep.SelectDataSource && !isStepImport)
    {
        <section id="@SampleImportViewModel.SampleImportStep.SelectFile.ToString()" class="box box-primary">
            <div class="box-header with-border">
                <h3 class="box-title">Select File</h3>
                <div class="box-tools pull-right">
                    <button class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                </div>
            </div>

            <div class="box-body form-horizontal">
                @Html.HiddenFor(model => model.ImportTempFileId)
                @Html.HiddenFor(model => model.SelectedFileName)

                @if (Model.CurrentSampleImportStep == SampleImportViewModel.SampleImportStep.SelectFile)
                {
                    <div class="alert alert-danger validation-summary-valid" id="validationSummarySelectFile">
                        <h5>
                            @Message.ValidationSummaryHeaderText
                        </h5>
                        <ul></ul>
                    </div>

                    <div class="alert alert-info">
                        <h5>
                            Select an .xlsx file to upload or drag and drop the file into the area below.
                        </h5>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.SelectedFileName, htmlAttributes:new
                                                                                       {
                                                                                           @class = "control-label col-md-2"
                                                                                       })
                        <div class="col-md-8">
                            <input id="upload" name="upload" style="width: 100%;" type="file" />
                        </div>
                    </div>

                    <div class="box-footer">
                        <div class="form-group pull-right">
                            <a class="btn btn-primary btn-sm" onclick="location.href = '@Url.Action(actionName:"SampleImport", controllerName:"Industry", routeValues:
                                                                                            SampleImportHelpers.GetBackRouteValues(model:Model))'">
                                Back
                            </a>
                        </div>
                    </div>
                }
                else
                {
                    <div class="form-group">
                        @Html.LabelFor(model => model.SelectedFileName, htmlAttributes:new
                                                                                       {
                                                                                           @class = "control-label col-md-2"
                                                                                       })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.SelectedFileName, additionalViewData:new
                                                                                                {
                                                                                                    htmlAttributes = new
                                                                                                                     {
                                                                                                                         @class = "form-control",
                                                                                                                         @readonly = "readonly"
                                                                                                                     }
                                                                                                })
                        </div>
                    </div>
                }
            </div>

            @if (Model.CurrentSampleImportStep == SampleImportViewModel.SampleImportStep.SelectFile)
            {
                @Scripts.Render(paths:"~/bundles/jqueryval")

                <script>
                    var allowedFileExtensions = [".xlsx"];

                    $("#upload")
                        .kendoUpload({
                            async: {
                                saveUrl: "@Url.Action(actionName:"ImportSampleFile", controllerName:"Industry")",
                                autoUpload: false
                            },
                            upload: function(e) {
                                var additional = {
                                    "CurrentSampleImportStep": "@Model.CurrentSampleImportStep",
                                    "SelectedDataSourceId": "@Model.SelectedDataSourceId",
                                    "SelectedDataSourceName": "@Model.SelectedDataSourceName"
                                };
                                e.data = additional;
                            },
                            multiple: false,
                            localization: {
                                "select": "Select file to upload...",
                                dropFilesHere: "Drop file here to upload"
                            },
                            validation: {
                                allowedExtensions: allowedFileExtensions,
                                maxFileSize: @ViewBag.MaxFileSize,
                                minFileSize: 1
                            },
                            success: function(e) {
                                var result = e.response;
                                $("#ImportTempFileId").val(result.ImportTempFileId);
                                $("#SelectedFileName").val(result.SelectedFileName);
                                $("#LinkoExchangeForm").submit();
                            },
                            error: onFileUploadError,
                            progress: onFileUploadProgress
                        });

                    function onFileUploadError(e) {
                        var errorData = eval(e.XMLHttpRequest.response);
                        var errorMessages = [];
                        errorData.forEach(function(item, index) {
                            errorMessages.push("<li>" + item + "</li>");
                        });


                        var validationSummary = $("#validationSummarySelectFile");

                        validationSummary.removeClass("validation-summary-valid");
                        validationSummary.addClass("validation-summary-errors");

                        validationSummary.find("ul").empty(); // remove li elements from the validation Summary list. valid form also have empty li element

                        validationSummary.find("ul").append(errorMessages);
                    }

                    function onFileUploadProgress(e) {
                        console.log("Upload progress :: " + e.percentComplete + "% :: ");
                    }
                </script>
            }
        </section>
    }

    // SampleImportStep.FileValidation
    if (Model.CurrentSampleImportStep == SampleImportViewModel.SampleImportStep.FileValidation)
    {
        <section id="@SampleImportViewModel.SampleImportStep.FileValidation.ToString()">
            <div class="box-header with-border">
                <h3 class="box-title">File Validation</h3>
                <div class="box-tools pull-right">
                    <button class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                </div>
            </div>
            <div class="box-body form-horizontal">
                @Html.ValidationSummary(excludePropertyErrors:false, message:Message.ValidationSummaryHeaderText,
                    htmlAttributes:new {@class = "alert alert-danger"})

                @if (Model.StepFileValidation != null && Model.StepFileValidation.Errors != null)
                {
                    <div class="alert alert-danger">
                        <h5>
                            File import failed! Check the errors below.
                        </h5>
                    </div>
                    <div class="form-group">
                        <div class="col-md-12">
                            @(Html.Kendo().Grid(dataSource:Model.StepFileValidation.Errors)
                                  .Name(componentName:"gridFileValidationErrors")
                                  .Columns(columns =>
                                           {
                                               columns.Bound(c => c.ErrorMessage).Title(text:"Error");
                                               columns.Bound(c => c.RowNumbers).Title(text:"Row Number(s)");
                                           })
                                  .Scrollable(s => s.Height(value:"auto")))
                        </div>
                    </div>

                    <div class="box-footer">
                        <div class="form-group pull-right">
                            <a class="btn btn-primary btn-sm" onclick="location.href = '@Url.Action(actionName:"SampleImport", controllerName:"Industry", routeValues:
                                                                                            SampleImportHelpers.GetBackRouteValues(model:Model))'">
                                Back
                            </a>
                            <a class="btn btn-primary btn-sm" onclick="location.href = '@Url.Action(actionName:"SampleImport", controllerName:"Industry")'">
                                Import Another File
                            </a>
                        </div>
                    </div>
                }
            </div>
        </section>
    }

    //SampleImportStep.SelectDataDefault
    if (Model.CurrentSampleImportStep > SampleImportViewModel.SampleImportStep.FileValidation && !isStepImport)
    {
        <section id="@SampleImportViewModel.SampleImportStep.SelectDataDefault.ToString()" class="box box-primary">
            <div class="box-header with-border">
                <h3 class="box-title">Select Data Defaults</h3>
                <div class="box-tools pull-right">
                    <button class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                </div>
            </div>
            <div class="box-body form-horizontal">
                @if (isStepSelectDataDefault)
                {
                    @Html.ValidationSummary(excludePropertyErrors:false, message:Message.ValidationSummaryHeaderText,
                        htmlAttributes:new {@class = "alert alert-danger"})

                    var requiredDefaultMonitoringPoint = Model.SampleImportDto.RequiredDefaultValues.Find(x => x.SampleImportColumnName == SampleImportColumnName.MonitoringPoint);
                    var requiredDefaultCollectionMethod = Model.SampleImportDto.RequiredDefaultValues.Find(x => x.SampleImportColumnName == SampleImportColumnName.CollectionMethod);
                    var requiredDefaultSampleType = Model.SampleImportDto.RequiredDefaultValues.Find(x => x.SampleImportColumnName == SampleImportColumnName.SampleType);

                    if (Model.SampleImportDto.RequiredDefaultValues.Any())
                    {
                        <div class="alert alert-info">
                            <h5>Some required data is missing from the file.What data should we use for the missing data?</h5>
                        </div>
                    }

                    if (requiredDefaultMonitoringPoint != null)
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.SelectedDefaultMonitoringPointId, htmlAttributes:new {@class = "control-label col-md-2"})
                            <div class="col-md-4">
                                @Html.HiddenFor(model => model.SelectedDefaultMonitoringPointName)
                                @Html.DropDownList(name:"SelectedDefaultMonitoringPointId",
                                    selectList:new SelectList(items:requiredDefaultMonitoringPoint.Options, dataValueField:"Id", dataTextField:"DisplayValue"),
                                    htmlAttributes:new {@class = "form-control"})
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(model => model.SelectedDefaultMonitoringPointId)
                        @Html.HiddenFor(model => model.SelectedDefaultMonitoringPointName)
                    }
                    if (requiredDefaultCollectionMethod != null)
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.SelectedDefaultCollectionMethodId, htmlAttributes:new {@class = "control-label col-md-2"})
                            <div class="col-md-4">
                                @Html.HiddenFor(model => model.SelectedDefaultCollectionMethodName)
                                @Html.DropDownList(name:"SelectedDefaultCollectionMethodId",
                                    selectList:new SelectList(items:requiredDefaultCollectionMethod.Options, dataValueField:"Id", dataTextField:"DisplayValue"),
                                    htmlAttributes:new {@class = "form-control"})
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(model => model.SelectedDefaultCollectionMethodId)
                        @Html.HiddenFor(model => model.SelectedDefaultCollectionMethodName)
                    }
                    if (requiredDefaultSampleType != null)
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.SelectedDefaultSampleTypeId, htmlAttributes:new {@class = "control-label col-md-2"})
                            <div class="col-md-4">
                                @Html.HiddenFor(model => model.SelectedDefaultSampleTypeName)
                                @Html.DropDownList(name:"SelectedDefaultSampleTypeId",
                                    selectList:new SelectList(items:requiredDefaultSampleType.Options, dataValueField:"Id", dataTextField:"DisplayValue"),
                                    htmlAttributes:new {@class = "form-control"})
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(model => model.SelectedDefaultSampleTypeId)
                        @Html.HiddenFor(model => model.SelectedDefaultSampleTypeName)
                    }

                    <script>
                        $(document)
                            .ready(function() {
                                $("#LinkoExchangeForm")
                                    .submit(function() {
                                        var defaultMonitoringPoitnNameFromDropdown = $("#SelectedDefaultMonitoringPointId option:selected").text();
                                        if (defaultMonitoringPoitnNameFromDropdown) {
                                            $("#SelectedDefaultMonitoringPointName").val(defaultMonitoringPoitnNameFromDropdown);
                                        }
                                        var defaultCollectionMethodNameFromDropdown = $("#SelectedDefaultCollectionMethodId option:selected").text();
                                        if (defaultCollectionMethodNameFromDropdown) {
                                            $("#SelectedDefaultCollectionMethodName").val(defaultCollectionMethodNameFromDropdown);
                                        }
                                        var defaultCollectionSampleTypeFromDropdown = $("#SelectedDefaultSampleTypeId option:selected").text();
                                        if (defaultCollectionSampleTypeFromDropdown) {
                                            $("#SelectedDefaultSampleTypeName").val(defaultCollectionSampleTypeFromDropdown);
                                        }
                                        return true;
                                    });
                            });
                    </script>
                    <div class="box-footer">
                        <div class="form-group pull-right">
                            <a class="btn btn-primary btn-sm" onclick="location.href = '@Url.Action(actionName:"SampleImport", controllerName:"Industry", routeValues:
                                                                                            SampleImportHelpers.GetBackRouteValues(model:Model))'">
                                Back
                            </a>
                            <input class="btn btn-primary btn-sm" type="submit" value="Next" />
                        </div>
                    </div>
                }
                else
                {
                    if (!(Model.SelectedDefaultMonitoringPointId > 0 || Model.SelectedDefaultCollectionMethodId > 0 || Model.SelectedDefaultSampleTypeId > 0))
                    {
                        <div class="fg-gray" role="alert">
                            No empty recommended field(s) requires Default Value from the import file.
                        </div>
                    }

                    if (Model.SelectedDefaultMonitoringPointId > 0)
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.SelectedDefaultMonitoringPointId, htmlAttributes:new {@class = "control-label col-md-2"})
                            <div class="col-md-4">
                                @Html.HiddenFor(model => model.SelectedDefaultMonitoringPointId)
                                @Html.EditorFor(model => model.SelectedDefaultMonitoringPointName,
                                    additionalViewData:new {htmlAttributes = new {@class = "form-control", @readonly = "readonly"}})
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(model => model.SelectedDefaultMonitoringPointId)
                        @Html.HiddenFor(model => model.SelectedDefaultMonitoringPointName)
                    }
                    if (Model.SelectedDefaultCollectionMethodId > 0)
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.SelectedDefaultCollectionMethodId, htmlAttributes:new {@class = "control-label col-md-2"})
                            <div class="col-md-4">
                                @Html.HiddenFor(model => model.SelectedDefaultCollectionMethodId)
                                @Html.EditorFor(model => model.SelectedDefaultCollectionMethodName,
                                    additionalViewData:new {htmlAttributes = new {@class = "form-control", @readonly = "readonly"}})
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(model => model.SelectedDefaultCollectionMethodId)
                        @Html.HiddenFor(model => model.SelectedDefaultCollectionMethodName)
                    }
                    if (Model.SelectedDefaultSampleTypeId > 0)
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.SelectedDefaultSampleTypeId, htmlAttributes:new {@class = "control-label col-md-2"})
                            <div class="col-md-4">
                                @Html.HiddenFor(model => model.SelectedDefaultSampleTypeId)
                                @Html.EditorFor(model => model.SelectedDefaultSampleTypeName,
                                    additionalViewData:new {htmlAttributes = new {@class = "form-control", @readonly = "readonly"}})
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(model => model.SelectedDefaultSampleTypeId)
                        @Html.HiddenFor(model => model.SelectedDefaultSampleTypeName)
                    }
                }
            </div>
        </section>
    }

    //SampleImportStep.DataTranslations
    if (Model.CurrentSampleImportStep > SampleImportViewModel.SampleImportStep.SelectDataDefault && !isStepImport)
    {
        <section id="@SampleImportViewModel.SampleImportStep.DataTranslations.ToString()" class="box box-primary">
            <div class="box-header with-border">
                <h3 class="box-title">Data Translations</h3>
                <div class="box-tools pull-right">
                    <button class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                </div>
            </div>
            <div class="box-body form-horizontal">
                @if (isStepDataTranslations)
                {
                    @Html.ValidationSummary(excludePropertyErrors:true, message:Message.ValidationSummaryHeaderText,
                        htmlAttributes:new {@class = "alert alert-danger", id = "validationSummaryDataTranslations"})
                }
                @if (Model.DataTranslations != null)
                {
                    var missingDataTranslations = Model.DataTranslations.Any(x => x.NumberOfMissingTranslations > 0);
                    if (missingDataTranslations && ViewData.ModelState.IsValid)
                    {
                        <div class="alert bg-gray-light">
                            <h5>
                                There is data in the file we don't recognize. Tell us what this data is and we'll use it instead.Plus we'll remember it for next time so we won't have to ask you again.
                            </h5>
                        </div>
                    }
                    foreach (var translationType in ImportSampleFromFileService.ColumnNameTranslationTypeDict.Values)
                    {
                        var dataTranslations = Model.DataTranslations.FirstOrDefault(x => x.TranslationType == translationType);
                        if (dataTranslations == null)
                        {
                            continue;
                        }
                        var isUntranslatedSwitchOn = dataTranslations.NumberOfMissingTranslations > 0;
                        var gridToggleName = "toggle" + translationType;
                        var segmentedControlName = "segmentedControl" + translationType;

                        <div class="box-body box-collapse collapse form-horizontal in" style="display: block;">
                            <div class="box box-group box-solid @(isUntranslatedSwitchOn ? "" : "collapsed-box")">
                                <div class="box-header">
                                    <button id="@gridToggleName" class="btn btn-box-tool" data-widget="collapse">
                                        <i class="fa @(isUntranslatedSwitchOn ? "fa-minus" : "fa-plus")"></i>
                                    </button>
                                    &nbsp;
                                    <h3 class="box-title width450">
                                        @dataTranslations.Title
                                        @if (isUntranslatedSwitchOn)
                                        {
                                            <span class="fg-red">(Required)</span>
                                        }
                                    </h3>
                                </div>
                                <div class="box-body box-collapse collapse form-horizontal in" style="padding: 0px 40px;">
                                    @if (isUntranslatedSwitchOn)
                                    {
                                        <div class="col-md-12 voffset1">
                                            <div id="@segmentedControlName" class="input-group">
                                                <div class="input-group-btn">
                                                    <a href="#" class="btn btn-sm btn-primary">Untranslated</a>
                                                </div>
                                                <div class="input-group-btn">
                                                    <a href="#" class="btn btn-sm btn-default">Translated</a>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    @if (translationType == DataSourceTranslationType.MonitoringPoint)
                                    {
                                        <div class="col-md-12 voffset2">
                                            @Html.KendoSampleImportDataTranslationGrid(dataTranslations
                                                .DataTranslations.Select(DataSourceTranslationViewModelHelper.To<DataSourceMonitoringPointTranslationViewModel>).ToList(), 
                                                "MonitoringPoint", translationType, isStepDataTranslations, isUntranslatedSwitchOn)
                                        </div>
                                    }
                                    else if (translationType == DataSourceTranslationType.SampleType)
                                    {
                                        <div class="col-md-12 voffset2">
                                            @Html.KendoSampleImportDataTranslationGrid(dataTranslations
                                                .DataTranslations.Select(DataSourceTranslationViewModelHelper.To<DataSourceSampleTypeTranslationViewModel>).ToList(),
                                                "SampleType", translationType, isStepDataTranslations, isUntranslatedSwitchOn)
                                        </div>
                                    }
                                    else if (translationType == DataSourceTranslationType.CollectionMethod)
                                    {
                                        <div class="col-md-12 voffset2">
                                            @Html.KendoSampleImportDataTranslationGrid(dataTranslations
                                                .DataTranslations.Select(DataSourceTranslationViewModelHelper.To<DataSourceCollectionMethodTranslationViewModel>).ToList(),
                                                "CollectionMethod", translationType, isStepDataTranslations, isUntranslatedSwitchOn)
                                        </div>
                                    }
                                    else if (translationType == DataSourceTranslationType.Parameter)
                                    {
                                        <div class="col-md-12 voffset2">
                                            @Html.KendoSampleImportDataTranslationGrid(dataTranslations
                                                .DataTranslations.Select(DataSourceTranslationViewModelHelper.To<DataSourceParameterTranslationViewModel>).ToList(),
                                                "Parameter", translationType, isStepDataTranslations, isUntranslatedSwitchOn)
                                        </div>
                                    }
                                    else if (translationType == DataSourceTranslationType.Unit)
                                    {
                                        <div class="col-md-12 voffset2">
                                            @Html.KendoSampleImportDataTranslationGrid(dataTranslations
                                                .DataTranslations.Select(DataSourceTranslationViewModelHelper.To<DataSourceUnitTranslationViewModel>).ToList(),
                                                "Unit", translationType, isStepDataTranslations, isUntranslatedSwitchOn)
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="alert alert-danger">
                                            <h5>
                                                TranslationType @translationType does not supported.
                                            </h5>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
            @if (isStepDataTranslations)
            {
                <div class="box-footer">
                    <div class="form-group pull-right">
                        <a class="btn btn-primary btn-sm" onclick="location.href = '@Url.Action(actionName:"SampleImport", controllerName:"Industry", routeValues:
                                                                                        SampleImportHelpers.GetBackRouteValues(model:Model))'">
                            Back
                        </a>
                        <input class="btn btn-primary btn-sm" type="submit" value="Next" />
                    </div>
                </div>
            }
        </section>
    }

    // SampleImportStep.DataValidation
    if (Model.CurrentSampleImportStep == SampleImportViewModel.SampleImportStep.DataValidation)
    {
        <section id="@SampleImportViewModel.SampleImportStep.DataValidation.ToString()" class="box box-primary">
            <div class="box-header with-border">
                <h3 class="box-title">Preview and Import</h3>
                <div class="box-tools pull-right">
                    <button class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                </div>
            </div>
            <div class="box-body form-horizontal">
                <div class="alert alert-danger">
                    <h5>
						Data validation failed. The error must be fixed before you import this file.
                    </h5>
                </div>
                <div class="form-group">
                    <div class="col-md-12">
                        @if (Model.StepDataValidation != null && Model.StepDataValidation.Errors != null)
                        {
                            @(Html.Kendo().Grid(dataSource:Model.StepDataValidation.Errors)
                                  .Name(componentName:"gridDataValidationErrors")
                                  .Columns(columns =>
                                           {
                                               columns.Bound(c => c.ErrorMessage).Title(text:"Error");
                                               columns.Bound(c => c.RowNumbers).Title(text:"Row Number(s)");
                                           })
                                  .Scrollable(s => s.Height(value:"auto")))
                        }
                    </div>
                </div>
                <div class="box-footer">
                    <div class="form-group pull-right">
                        <a class="btn btn-primary btn-sm" onclick="location.href = '@Url.Action(actionName:"SampleImport", controllerName:"Industry", routeValues:
                                                                                        SampleImportHelpers.GetBackRouteValues(model:Model))'">
                            Back
                        </a>
                        <a class="btn btn-primary btn-sm" onclick="location.href = '@Url.Action(actionName:"SampleImport", controllerName:"Industry")'">
                            Import Another File
                        </a>
                    </div>
                </div>
            </div>
        </section>
    }

    // SampleImportStep.ShowPreImportOutput
    if (Model.CurrentSampleImportStep == SampleImportViewModel.SampleImportStep.ShowPreImportOutput)
    {
        <section id="@SampleImportViewModel.SampleImportStep.ShowPreImportOutput.ToString()" class="box box-primary">
            <div class="box-header with-border">
                <h3 class="box-title">Preview and Import</h3>
                <div class="box-tools pull-right">
                    <button class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                </div>
            </div>

			<div class="alert alert-success">
				<h5>Data validation passed, you can preview the import summary.</h5>
			</div>

            <div class="box-body form-horizontal">
                            <div style="padding: 0 40px ;">
                                <h5>
                                    @(Model.ImportSummary.NewDraftSampleCount + Model.ImportSummary.UpdateDraftSampleCont) draft sample(s) will be imported:
                                    
                                </h5><h5>&nbsp;
                                    @if (Model.ImportSummary.NewDraftSampleCount > 0)
                                    {
                                            <span class="fa-stack">
                                                <i class="fa fa-stack-1x fa-lg fa-circle-thin text-blue"></i>
                                                <i class="fa fa-stack-1x font-12 text-blue">N</i>
                                            </span>
                                            @(Model.ImportSummary.NewDraftSampleCount)
                                            <span> new </span>

                                    }
                                @if (Model.ImportSummary.UpdateDraftSampleCont > 0)
                                {
                                        <span class="fa-stack">
                                            <i class="fa fa-stack-1x fa-lg fa-circle-thin text-yellow"></i>
                                            <i class="fa fa-stack-1x font-12 text-yellow">U</i>
                                        </span>
                                        @(Model.ImportSummary.UpdateDraftSampleCont)
                                        <span> update(s) </span>

                                }
                                </h5>
                            </div>

                            <div style="padding: 0 40px ;">
                               
                                <h5>
                                    @(Model.ImportSummary.NewSampleResultCount + Model.ImportSummary.UpdateSampleResultCount) result(s) will be imported:
                                    
                                </h5><h5>&nbsp;
                                    @if (Model.ImportSummary.NewSampleResultCount > 0)
                                    {
                                        <span class="fa-stack">
                                            <i class="fa fa-stack-1x fa-lg fa-circle-thin text-blue"></i>
                                            <i class="fa fa-stack-1x font-12 text-blue">N</i>
                                        </span>
                                            @(Model.ImportSummary.NewSampleResultCount)
                                            <span> new </span>
}

                                    @if (Model.ImportSummary.UpdateSampleResultCount > 0)
                                    {
                                        <span class="fa-stack">
                                            <i class="fa fa-stack-1x fa-lg fa-circle-thin text-yellow"></i>
                                            <i class="fa fa-stack-1x font-12 text-yellow">U</i>
                                        </span>
                                        @(Model.ImportSummary.UpdateSampleResultCount)
                                        <span> update(s)</span>
}
                                </h5>

                            </div>

                            <div style="padding: 0 40px ;">
                                @if (Model.ImportSummary.SampleComplianceSummary.TotalBadComplianceCount > 0)
                                {
                                    <h5 class="text-bold">
                                        @Model.ImportSummary.SampleComplianceSummary.TotalBadComplianceCount result(s) are not in compliance &nbsp;
                                        <i aria-hidden="true" class="fa fa-exclamation-circle fa-lg text-red" data-placement="top" data-toggle="tooltip"></i> 
                                    </h5>
                                }
                                else
                                {
                                    <h5 class="text-bold">
                                        All results are in compliance &nbsp;
                                        <i aria-hidden="true" class="fa fa-check-circle fa-lg text-green" data-placement="top" data-toggle="tooltip"></i>
                                    </h5>
                                }
                            </div>
                    <div style="padding: 20px 40px;">
                        @(Html.Kendo().Grid(dataSource: Model.Samples)
                              .Name(componentName: "gridImportSamplesPreview")
                              .Columns(columns =>
                              {
                                  columns.Bound(c => c.Status)
                                         .ClientTemplate( value:
                                             "# if (Status == 'New') { #" +
                                             "<span class='fa-stack' data-placement='top' data-toggle='tooltip' title='New'> <i class='fa fa-stack-1x fa-lg fa-circle-thin text-blue'></i> <i class='fa fa-stack-1x font-10 text-blue'>N</i> </span> " +
                                             "# } else { #" +
                                             "<span class='fa-stack' data-placement='top' data-toggle='tooltip' title='Updated'> <i class='fa fa-stack-1x fa-lg fa-circle-thin text-yellow'></i> <i class='fa fa-stack-1x font-10 text-yellow'>U</i> </span> " +
                                             "# } #"
                                      )
                                         .HtmlAttributes(attributes: new
                                         {
                                             align = "center"
                                         })
                                         .Title(" ")
                                         .Filterable(f => f.Enabled(value: false))
                                         .Width(pixelWidth: 40);

                                  columns.Bound(c => c.SampleOverallCompliance)
                                         .ClientTemplate( value:
                                             "# if (SampleOverallCompliance == 'Bad') { #" +
                                             "<i class='fa fa-lg fa-exclamation-circle text-red' " +
                                             "# } else { #" +
                                             "<i class='fa fa-lg fa-check-circle text-green' " +
                                             "# } #" +
                                             "aria-hidden='true' data-placement='top' data-toggle='tooltip' title='#= SampleOverallComplianceComment #' />"
                                      )
                                         .HtmlAttributes(attributes: new
                                         {
                                             align = "center"
                                         })
                                         .Title(" ")
                                         .Filterable(f => f.Enabled(value: false))
                                         .Width(pixelWidth: 40);
                                  columns.Bound(c => c.MonitoringPointName)
                                         .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators: false).Operator(defaultOperator: "contains")
                                                                                 .SuggestionOperator(filterType: FilterType.Contains)));
                                  columns.Bound(c => c.CtsEventTypeName)
                                         .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators: false).Operator(defaultOperator: "contains")
                                                                                 .SuggestionOperator(filterType: FilterType.Contains)));
                                  columns.Bound(c => c.CollectionMethodName)
                                         .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators: false).Operator(defaultOperator: "contains")
                                                                                 .SuggestionOperator(filterType: FilterType.Contains)));
                                  columns.Bound(c => c.StartDateTimeLocal)
                                         .ClientTemplate(value: "#= (kendo.toString(StartDateTimeLocal,'hh:mm tt')=='12:00 AM') ? kendo.toString(StartDateTimeLocal,'MM/dd/yyyy') : kendo.toString(StartDateTimeLocal,'MM/dd/yyyy hh:mm tt')#")
                                         .Filterable(ftb => ftb.Enabled(value: true).Extra(value: true));
                                  columns.Bound(c => c.EndDateTimeLocal)
                                         .ClientTemplate(value: "#= (kendo.toString(EndDateTimeLocal,'hh:mm tt')=='12:00 AM') ? kendo.toString(EndDateTimeLocal,'MM/dd/yyyy') : kendo.toString(EndDateTimeLocal,'MM/dd/yyyy hh:mm tt')#")
                                         .Filterable(ftb => ftb.Enabled(value: true).Extra(value: true));
                                  columns.Bound(c => c.LabSampleIdentifier)
                                         .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators: false).Operator(defaultOperator: "contains")
                                                                                 .SuggestionOperator(filterType: FilterType.Contains)));

                                  columns.Bound(c => c.FlowValueAndFlow)
                                         .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators: false).Operator(defaultOperator: "contains")
                                                                                 .SuggestionOperator(filterType: FilterType.Contains)));
                              })
                              .Pageable(pageable => pageable
                                                        .PageSizes(pageSizes: new List<object> { "all", 15, 25, 50, 75 })
                                                        .Refresh(enabled: true)
                                                        .Input(enabled: true)
                                                        .Numeric(enabled: false)
                              )
                              .ClientDetailTemplateId(id: "template")
                              .Sortable(sortable => { sortable.SortMode(value: GridSortMode.MultipleColumn); })
                              .Resizable(resizable => resizable.Columns(value: true))
                              .Scrollable(s => s.Height(value: "auto"))
                              .NoRecords(text: "No sample exists.")
                              .Events(e => { e.DetailInit(handler: "detailInit"); })
                              .DataSource(dataSource => dataSource
                                                            .Ajax()
                                                            .PageSize(pageSize: 15)
                                                            .Sort(sort =>
                                                            {
                                                                sort.Add(memberName: "Status").Ascending();
                                                                sort.Add(memberName: "StartDateTimeLocal").Ascending();
                                                                sort.Add(memberName: "MonitoringPointName").Ascending();
                                                                sort.Add(memberName: "CollectionMethodName").Ascending();
                                                            })
                                                            //.Group(g => g.Add(c => c.Status))
                                                            .ServerOperation(enabled: false)
                              ))

                        <script>
                            function detailInit(e) {

                                var sampleIdentifier = e.data.Identifier;
                                var gridId = "gridSampleResult" + sampleIdentifier;
                                $("#gridSampleResult").attr("id", gridId);

                                var sampleResult = e.data.SampleResults.map(function(item) {
                                    item.AnalysisDateTimeLocal = window.kendo.toString(window.kendo.parseDate(item.AnalysisDateTimeLocal, "yyyy-MM-dd hh:mm:ss"));
                                    return item;
                                });

                                sampleResult = sampleResult.sort(function(a, b) {
                                    return a.Status > b.Status;
                                });

                                var sampleResultGrid = $("#" + gridId).data("kendoGrid");

                                sampleResultGrid.dataSource.data(sampleResult);
                            }

                            $(document)
                                .ready(function() {
                                    $("#LinkoExchangeForm")
                                        .submit(function() {
                                            $("#CurrentSampleImportStep").val(@((int) SampleImportViewModel.SampleImportStep.ShowImportOutput));
                                            return true;
                                        });
                                });
                        </script>
                    </div>
            </div>
            <div class="box-footer">
                <div class="form-group pull-right">
                    <a class="btn btn-primary btn-sm" onclick="location.href = '@Url.Action(actionName:"SampleImport", controllerName:"Industry", routeValues:
                                                                                    SampleImportHelpers.GetBackRouteValues(model:Model))'">
                        Back
                    </a>
                    <input class="btn btn-primary btn-sm" type="submit" value="Import" />
                </div>
            </div>
        </section>
    }

    if (Model.CurrentSampleImportStep == SampleImportViewModel.SampleImportStep.ShowImportOutput)
    {
        // SampleImportStep.ShowImportOutput
        <section class="box box-primary">
            <div class="box-header with-border">
                <h3 class="box-title">Data Imported</h3>
                <div class="box-tools pull-right">
                    <button class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                </div>
            </div>
            <div class="box-body form-horizontal">
                @Html.ValidationSummary(excludePropertyErrors:true, message:Message.ValidationSummaryHeaderText,
                    htmlAttributes:new {@class = "alert alert-danger", id = "validationSummaryDataTranslations"})
                
                @if (Model.ImportSummary != null)
                {

                    <div class="alert alert-success">
                        <h5> Samples imported successfully!</h5>
                    </div>

                    <div class="box-header voffset2">
                        <h3 class="box-title loffset20 voffset2">Import Summary </h3>

                        <div class="loffset40">
                            <div class="width200">@Model.ImportSummary.SampleCount @Model.ImportSummary.SampleCountImportDescription</div>
                            @if (Model.ImportSummary.NewDraftSampleCount > 0)
                            {
                                <span class="fa-stack">
                                    <i class="fa fa-stack-1x fa-lg fa-circle-thin text-blue"></i>
                                    <i class="fa fa-stack-1x font-12 text-blue">N</i>
                                </span>
                                <span>@Model.ImportSummary.NewDraftSampleCount new</span>
                            }
                            @if (Model.ImportSummary.UpdateDraftSampleCont > 0)
                            {
                                <span class="fa-stack">
                                    <i class="fa fa-stack-1x fa-lg fa-circle-thin text-yellow"></i>
                                    <i class="fa fa-stack-1x font-12 text-yellow">U</i>
                                </span>
                                <span>@Model.ImportSummary.UpdateDraftSampleCont @Model.ImportSummary.UpdateDraftSampleCountDescription</span>
                            }
                        </div>
                        <div class="loffset40">
                            <span class="width200">@Model.ImportSummary.SampleResultCount @Model.ImportSummary.SampleResultCountImportDescription</span>
                                @if (Model.ImportSummary.NewSampleResultCount > 0)
                                {
                                    <span class="fa-stack">
                                        <i class="fa fa-stack-1x fa-lg fa-circle-thin text-blue"></i>
                                        <i class="fa fa-stack-1x font-12 text-blue">N</i>
                                    </span>
                                    <span>@(Model.ImportSummary.NewSampleResultCount) new</span>
                                }

                                @if (Model.ImportSummary.UpdateSampleResultCount > 0)
                                {
                                    <span class="fa-stack">
                                        <i class="fa fa-stack-1x fa-lg fa-circle-thin text-yellow"></i>
                                        <i class="fa fa-stack-1x font-12 text-yellow">U</i>
                                    </span>
                                    <span>@Model.ImportSummary.UpdateSampleResultCount @Model.ImportSummary.UpdateSampleResultCountDescription</span>
                                }
                        </div>
                    </div>

                    <div class="box-header voffset2 width450">
                        <h3 class="box-title loffset20 voffset2">Sample Result Compliance Summary </h3>
                        
                        <div class="loffset40 width450">
                            <div class="voffset1">@Model.ImportSummary.SampleComplianceSummary.FinalComplianceDescription</div>
                    
                            <div class="active progress progress-xs" style="height: 7px;">
                                <div class="progress-bar progress-bar-green" style="background-color: #00a65a; width: @(Model.ImportSummary.SampleComplianceSummary.TotalGoodPercentage)%;"></div>
                                <div class="progress-bar progress-bar-danger" style="width: @(Model.ImportSummary.SampleComplianceSummary.TotalBadPercentage)%"></div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="box-footer">
                <div class="form-group pull-right">
                    <a href="#" class="btn btn-primary btn-sm" onclick="location.href = '@Url.Action(actionName:"Samples", controllerName:"Industry", routeValues:new {sampleStatus = SampleStatusName.Draft})'">View Draft Samples</a>
                    <a href="#" class="btn btn-primary btn-sm" onclick="location.href = '@Url.Action(actionName:"SampleImport", controllerName:"Industry")'">
                        Import Another File
                    </a>
                </div>
            </div>
        </section>
    }
}

<script id="template" type="text/kendo-tmpl">

    @(Html.Kendo().Grid<SampleResultViewModel>()
          .Name(componentName:"gridSampleResult")
          .Columns(columns =>
          {
              columns.Bound(c => c.Status)
                     .ClientTemplate( value:
                         "\\# if (Status == 'New') { \\#" +
                         "<span class='fa-stack' data-placement='top' data-toggle='tooltip' title='New'> <i class='fa fa-stack-1x fa-lg fa-circle-thin text-blue'></i> <i class='fa fa-stack-1x font-10 text-blue'>N</i> </span> " +
                         "\\# } else { \\#" +
                         "<span class='fa-stack' data-placement='top' data-toggle='tooltip' title='Updated'> <i class='fa fa-stack-1x fa-lg fa-circle-thin text-yellow'></i> <i class='fa fa-stack-1x font-10 text-yellow'>U</i> </span> " +
                         "\\# } \\#"
                  )
                     .HtmlAttributes(attributes: new
                     {
                         align = "center"
                     })
                     .Title(" ")
                     .Filterable(f => f.Enabled(value: false))
                     .Width(pixelWidth: 40);
              columns.Bound(c => c.ParameterName);
              columns.Bound(c => c.DisplayValue)
                     .HtmlAttributes(attributes:new {align = "right"})
                     .ClientTemplate(value: "\\#=DisplayValue\\#&nbsp;&nbsp;<i "
                                           + "\\#if(ConcentrationResultCompliance==\"Bad\") { \\#"
                                           + "class='fa fa-lg fa-exclamation-circle text-red' "
                                           + "\\# } else {\\#"
                                           + "class='fa fa-lg fa-circle fg-transparent' "
                                           + "\\# } \\#"
                                           + "aria-hidden='true' data-placement='top' "
                                           + "data-toggle='tooltip' title='\\#=ConcentrationResultComplianceComment\\#'></i>");

              columns.Bound(c => c.DisplayMassLoadingValue)
                     .HtmlAttributes(attributes:new {align = "right"})
                     .ClientTemplate(value:
                         "\\#if(MassLoadingValue==\"\" || MassLoadingValue== null ) { \\#"
                         + "\\# } else { \\#"
                         + "\\#=DisplayMassLoadingValue\\#&nbsp;&nbsp;<i "
                         + "\\#if(MassResultCompliance==\"Bad\") { \\#"
                         + "class='fa fa-lg fa-exclamation-circle text-red' "
                         + "\\# } else {\\#"
                         + "class='fa fa-lg fa-circle fg-transparent' "
                         + "\\# } \\#"
                         + "aria-hidden='true' data-placement='top' "
                         + "data-toggle='tooltip' title='\\#=MassResultComplianceComment\\#'></i>"
                         + "\\# } \\#");

              columns.Bound(c => c.AnalysisMethod);
              columns.Bound(c => c.EnteredMethodDetectionLimit).HtmlAttributes(attributes:new {align = "right"});
              columns.Bound(c => c.AnalysisDateTimeLocal)
                     .ClientTemplate(value:"\\#= AnalysisDateTimeLocal == null ? '' : ((kendo.parseDate(AnalysisDateTimeLocal,'hh:mm tt')=='12:00 AM') ? kendo.toString(AnalysisDateTimeLocal,'MM/dd/yyyy') : kendo.toString(AnalysisDateTimeLocal,'MM/dd/yyyy hh:mm tt'))\\#");
          })
          .Sortable(sortable => { sortable.SortMode(value:GridSortMode.MultipleColumn); })
          .Scrollable(s => s.Height(value:"auto"))
          .NoRecords(text:"No sample result exists.")
          .DataSource(dataSource => dataSource
                                        .Ajax()
                                        .ServerOperation(enabled:false)
          )
          .ToClientTemplate()
          )

</script>

@section Scripts {
    <script type="text/javascript">
        //keep stepper sticky at the top with initial width
        var stepper = $(".stepwizard");
        var sticky = stepper.offset().top;
        var setpperWidth = stepper.width();

        window.onscroll = function() {
            if (window.pageYOffset >= sticky) {
                stepper.addClass("sticky");
                stepper.width(setpperWidth);
            } else {
                stepper.removeClass("sticky");
                stepper.width(setpperWidth);
            }
        };

        switchDataTranslationGrid = function(gridName, isUntranslatedSwitchOn) {
            var translationsGrid = $("#" + gridName).data("kendoGrid");
            var filter = {
                field: "IsTranslated",
                operator: "eq",
                value: false
            };
            if (isUntranslatedSwitchOn === false) {
                filter.value = true;
            }
            translationsGrid.dataSource.filter(filter);
            if (isUntranslatedSwitchOn) {
                translationsGrid.showColumn("IsTranslated");
            } else {
                translationsGrid.hideColumn("IsTranslated");
            }
        };
    </script>
    @if (Model.DataTranslations != null)
    {
        foreach (var translationType in ImportSampleFromFileService.ColumnNameTranslationTypeDict.Values)
        {
            var dataTranslations = Model.DataTranslations.FirstOrDefault(x => x.TranslationType == translationType);
            if (dataTranslations == null)
            {
                continue;
            }
            var isUntranslatedSwitchOn = dataTranslations.NumberOfMissingTranslations > 0;
            if (isUntranslatedSwitchOn)
            {
                var gridName = "grid" + translationType;
                var segmentedControlName = "segmentedControl" + translationType;

                <script type="text/javascript">
                    $("#@segmentedControlName a").click(function (e) {
                        e.preventDefault();
                        $("#@segmentedControlName a").removeClass("btn-primary").addClass("btn-default");
                        $(this).removeClass("btn-default").addClass("btn-primary");

                        var isUntranslatedSwitchOn = $(this).text() === "Untranslated";
                        switchDataTranslationGrid("@gridName", isUntranslatedSwitchOn);
                    });
                </script>
            }
        }
    }
}