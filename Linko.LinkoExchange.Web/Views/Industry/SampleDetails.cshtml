@using Linko.LinkoExchange.Core.Enum
@using Microsoft.Ajax.Utilities
@model Linko.LinkoExchange.Web.ViewModels.Shared.SampleViewModel

@{
    ViewBag.Title = "Sample Details";
    ViewBag.Readonly = Model.SampleStatusName != SampleStatusName.Draft;
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <section>
        <ol class="breadcrumb">
            <li>
                <a href="#" onclick="location.href = '@Url.Action(actionName:"Index", controllerName:"Industry")'"><i class=""></i> Home </a>
            </li>
            <li>
                <a href="#" onclick="location.href = '@Url.Action(actionName:"Samples", controllerName:"Industry", routeValues:new {sampleStatus = Model.SampleStatusName})'"><i class=""></i> Samples </a>
            </li>
            <li class="active">
                Details
            </li>
        </ol>
    </section>

    <div class="box box-primary">
        <div class="box-header with-border">
            <h3 class="box-title">
                @Model.MonitoringPointName
            </h3>

            <div class="box-tools pull-right">

                @switch (Model.SampleStatusName)
                {
                    case SampleStatusName.Draft:
                        <strong class="bg-yellow btn-sm text-info"> &nbsp;&nbsp;Draft&nbsp; </strong>
                        break;
                    case SampleStatusName.ReadyToReport:
                        <strong class="bg-lime-active btn-sm text-info"> &nbsp;&nbsp;Ready to Report&nbsp; </strong>
                        break;
                    case SampleStatusName.Reported:
                        <strong class="bg-aqua btn-sm text-info"> &nbsp;&nbsp;Reported&nbsp; </strong>
                        break;
                    default:
                        break;
                }

                <button class="btn btn-box-tool" data-widget="collapse">
                    <i class="fa fa-minus"></i>
                </button>
            </div>
        </div>

        <section class="box-body form-horizontal">
            @Html.ValidationSummary(excludePropertyErrors:true, message:Message.ValidationSummaryHeaderText, htmlAttributes:new
                                                                                                                            {
                                                                                                                                @class = "alert alert-danger"
                                                                                                                            })
            @if (ViewBag.ShowSuccessMessage != null && ViewBag.ShowSuccessMessage)
            {
                <div class="alert alert-dismissible alert-success">
                    <button aria-hidden="true" class="close" data-dismiss="alert" type="button">&times;</button>
                    <h5>
                        <i class="fa fa-check icon"></i>
                        @ViewBag.SuccessMessage
                    </h5>
                </div>
            }

            <div aria-labelledby="DeleteSampleModalLabel" class="col-md-12 fade modal modal-info" id="DeleteSampleModal" role="dialog" tabindex="-1">
                <div class="modal-dialog" role="document">
                    <div class="alert alert-dismissible alert-info modal-content">
                        <button aria-label="Close" class="close" data-dismiss="modal" type="button">&times;</button>
                        <h4 class="box-title">Delete Sample</h4>

                        <div>
                            <p>
                                Do you want to delete this Sample?<br />
                            </p>
                            <div class="form-group">
                                <div class="pull-right">
                                    <button type="submit" class="btn btn-primary btn-sm" formaction="@Url.Action(actionName:"DeleteSample", controllerName:"Industry", routeValues:new {id = Model.Id})" formmethod="post">
                                        Yes
                                    </button>
                                    <button aria-label="Close" class="btn btn-primary btn-sm" data-dismiss="modal" type="button">No</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-horizontal">
                <div class="form-group">
                    @Html.HiddenFor(model => model.Id)
                    @Html.HiddenFor(model => model.MassLoadingConversionFactorPounds)
                    @Html.HiddenFor(model => model.MassLoadingCalculationDecimalPlaces)
                    @Html.HiddenFor(model => model.IsMassLoadingResultToUseLessThanSign)
                    @Html.HiddenFor(model => model.MassLoadingMassLoadingUnitId)
                    @Html.HiddenFor(model => model.MassLoadingMassLoadingUnitName)
                    @Html.HiddenFor(model => model.ResultQualifierValidValues)
                    @Html.HiddenFor(model => model.SampleStatusName)
                </div>

                <div class="form-group">
                    <div class="col-sm-4">
                        @Html.LabelFor(model => model.CollectionMethodId, htmlAttributes:new
                                                                                         {
                                                                                             @class = "control-label col-sm-6 required"
                                                                                         })
                        <div class="col-sm-6">

                            @Html.DropDownList(name:"CollectionMethodId", selectList:Model.AvailableCollectionMethods, htmlAttributes:new
                                                                                                                                      {
                                                                                                                                          @class = "form-control input-sm"
                                                                                                                                      })

                            @Html.ValidationMessageFor(model => model.CollectionMethodId, validationMessage:"", htmlAttributes:new
                                                                                                                               {
                                                                                                                                   @class = "text-danger"
                                                                                                                               })
                        </div>
                    </div>

                    <div class="col-sm-4">
                        @Html.LabelFor(model => model.CtsEventTypeId, htmlAttributes:new
                                                                                     {
                                                                                         @class = "control-label col-sm-5 required"
                                                                                     })
                        <div class="col-sm-7">
                            @Html.DropDownList(name:"CtsEventTypeId", selectList:Model.AvailableCtsEventTypes, htmlAttributes:new
                                                                                                                              {
                                                                                                                                  @class = "form-control input-sm"
                                                                                                                              })

                            @Html.ValidationMessageFor(model => model.CtsEventTypeId, validationMessage:"", htmlAttributes:new
                                                                                                                           {
                                                                                                                               @class = "text-danger"
                                                                                                                           })
                        </div>
                    </div>

                    <div class="col-sm-4">
                        @Html.LabelFor(model => model.StartDateTimeLocal, htmlAttributes:new
                                                                                         {
                                                                                             @class = "control-label col-sm-4 required"
                                                                                         })
                        <div class="col-sm-8">
                            @if (ViewBag.Readonly)
                            {
                                @(Html.Kendo().DateTimePicker()
                                      .Name(componentName:"StartDateTimeLocal")
                                      .Value(date:Model.StartDateTimeLocal)
                                      .Format(format:"MM/dd/yyyy hh:mm:ss tt")
                                      .HtmlAttributes(attributes:new
                                                                 {
                                                                     @readonly = true,
                                                                     style = "width:210px;"
                                                                 }))
                            }
                            else
                            {
                                @(Html.Kendo().DateTimePicker()
                                      .Name(componentName:"StartDateTimeLocal")
                                      .Value(date:Model.StartDateTimeLocal)
                                      .Format(format:"MM/dd/yyyy hh:mm:ss tt")
                                      .HtmlAttributes(attributes:new
                                                                 {
                                                                     style = "width:210px;"
                                                                 }))
                            }
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-sm-4">
                        @Html.LabelFor(model => model.LabSampleIdentifier, htmlAttributes:new
                                                                                          {
                                                                                              @class = "control-label col-sm-6"
                                                                                          })
                        <div class="col-sm-6">
                            @Html.EditorFor(model => model.LabSampleIdentifier, additionalViewData:new
                                                                                                   {
                                                                                                       htmlAttributes = new
                                                                                                                        {
                                                                                                                            @class = "form-control input-sm"
                                                                                                                        }
                                                                                                   })
                        </div>
                    </div>

                    <div class="col-sm-4">
                        @Html.LabelFor(model => model.FlowValue, htmlAttributes:new
                                                                                {
                                                                                    @class = "control-label col-sm-5"
                                                                                })
                        <div class="col-sm-7">
                            <div class="col-sm-7 no-margin no-padding">
                                @Html.EditorFor(model => model.FlowValue, additionalViewData:new
                                                                                             {
                                                                                                 htmlAttributes = new
                                                                                                                  {
                                                                                                                      @class = "form-control input-sm"
                                                                                                                  }
                                                                                             })
                            </div>
                            <div class="col-sm-5 no-padding">
                                @Html.DropDownList(name:"FlowUnitId", selectList:Model.AvailableFlowUnits, htmlAttributes:new
                                                                                                                          {
                                                                                                                              @class = "form-control input-sm"
                                                                                                                          })


                                @Html.ValidationMessageFor(model => model.FlowUnitId, validationMessage:"", htmlAttributes:new
                                                                                                                           {
                                                                                                                               @class = "text-danger"
                                                                                                                           })
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-4">
                        @Html.LabelFor(model => model.EndDateTimeLocal, htmlAttributes:new
                                                                                       {
                                                                                           @class = "control-label col-sm-4 required"
                                                                                       })
                        <div class="col-sm-8">
                            @if (ViewBag.Readonly)
                            {
                                @(Html.Kendo().DateTimePicker()
                                      .Name(componentName:"EndDateTimeLocal")
                                      .Value(date:Model.EndDateTimeLocal)
                                      .Format(format:"MM/dd/yyyy hh:mm:ss tt")
                                      .HtmlAttributes(attributes:new
                                                                 {
                                                                     @readonly = true,
                                                                     style = "width:210px;"
                                                                 }))
                            }
                            else
                            {
                                @(Html.Kendo().DateTimePicker()
                                      .Name(componentName:"EndDateTimeLocal")
                                      .Value(date:Model.EndDateTimeLocal)
                                      .Format(format:"MM/dd/yyyy hh:mm:ss tt")
                                      .HtmlAttributes(attributes:new
                                                                 {
                                                                     style = "width:210px;"
                                                                 }))
                            }
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </div>

    if (!ViewBag.Readonly)
    {
        //parameter Groups

        <div class="box box-primary">
            <div class="box-header with-border">
                <strong>Parameter Groups</strong>
                <div class="box-tools pull-right">
                    <button class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                </div>
            </div>
            <div class="box-body box-collapse collapse in">
                <table class="dataTable table table-bordered table-condensed table-hover table-striped text-center" id="ParameterGroupTable">
                    <thead>
                        <tr>
                            @*if you add or reorder any column then need to update the JavaScripts bellow*@
                            <th class="never">Id</th>
                            <th>Parameter Group</th>
                            <th>Description</th>
                            <th class="never">ParameterIds</th>
                            <th style="width: 50px">Add</th>
                        </tr>
                    </thead>

                    <tbody>
                        @foreach (var parameterGroup in Model.ParameterGroups)
                        {
                            <tr>
                                <td>@parameterGroup.Id</td>
                                <td>@parameterGroup.Name</td>
                                <td>@parameterGroup.Description</td>
                                <td>@parameterGroup.ParameterIds</td>
                                <td>
                                    <button class="btn btn-primary btn-sm" data-title="btnAddParamsFromGroup" name="btnAddParamsFromGroup">
                                        <i class="fa fa-lg fa-plus"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }

    // Results

    <div class="box box-primary">
        <div class="box-header with-border">
            <strong>Results</strong>
            <div class="box-tools pull-right">
                @if (!ViewBag.Readonly)
                {
                    <button class="btn btn-primary btn-sm" id="btnAddParameter" type="button">Add Parameter</button>
                    <button class="btn btn-primary btn-sm" id="btnDeleteEmptyParameters" type="button">Delete Empty Parameters</button>
                }
                <button class="btn btn-box-tool" data-widget="collapse">
                    <i class="fa fa-minus"></i>
                </button>
            </div>
        </div>

        <div class="box-body box-collapse collapse in">
            <table class="dataTable table table-bordered table-condensed table-hover table-striped text-center" id="ParameterTable">
                <thead>
                    <tr>
                        @*if you add or reorder any column then need to update the JavaScripts bellow*@
                        <th class="never"> Id </th>
                        <th> Parameter Name</th>
                        <th style="width: 50px"> Qualifier </th>
                        <th> Result </th>
                        <th style="width: 80px"> MDL </th>
                        <th> Analysis Method </th>
                        <th> Analysis Date & Time </th>
                        <th style="width: 50px"> EPA Method </th>
                        <th style="width: 50px"> Calculate Loading </th>
                        <th> Mass Loading Result</th>
                        <th style="width: 50px"> Remove</th>
                    </tr>
                </thead>

                <tbody class="input-sm">
                    @foreach (var sampleResult in Model.SampleResults)
                    {
                        <tr>
                            <td>
                                <input id="sampleResultId_@sampleResult.ParameterId" type="hidden" value=@(sampleResult.Id.HasValue ? sampleResult.Id.Value.ToString() : "")>
                            </td>
                            <td>@sampleResult.ParameterName</td>
                            <td>
                                <select class="form-control input-sm no-margin no-padding" id="Qualifier_@sampleResult.ParameterId" style="width: 100%">
                                    @foreach (var q in Model.AvailableResultQualifierValidValues)
                                    {
                                        if (q.Value.Equals(value:sampleResult.Qualifier.IfNullOrWhiteSpace(defaultValue:"NUMERIC")))
                                        {
                                            <option value=@q.Value selected> @q.Text </option>
                                        }
                                        else
                                        {
                                            <option value=@q.Value> @q.Text </option>
                                        }
                                    }
                                </select>
                            </td>
                            <td>
                                <div class="input-group input-group-sm">
                                    <input class="form-control input-sm" id="Result_@sampleResult.ParameterId" type="text" value=@sampleResult.Value>
                                    <input id="UnitId_@sampleResult.ParameterId" type="hidden" value=@sampleResult.UnitId>
                                    <span class="input-group-addon">@sampleResult.UnitName</span>
                                </div>
                            </td>
                            <td>
                                <input class="form-control input-sm" id="MDL_@sampleResult.ParameterId" type="text" value=@sampleResult.EnteredMethodDetectionLimit>
                            </td>
                            <td>
                                <div class="input-group input-group-sm">
                                    <input class="form-control input-sm" id="AnalysisMethod_@sampleResult.ParameterId" type="text" value=@sampleResult.AnalysisMethod>
                                </div>
                            </td>
                            <td>
                                @if (ViewBag.Readonly)
                                {
                                    @(Html.Kendo().DateTimePicker()
                                          .Name(componentName:"AnalysisDateTime_" + sampleResult.ParameterId)
                                          .Value(date:sampleResult.AnalysisDateTimeLocal)
                                          .Format(format:"MM/dd/yyyy hh:mm:ss tt")
                                          .HtmlAttributes(attributes:new
                                                                     {
                                                                         @readonly = true,
                                                                         style = "width:200px; font-size:12px"
                                                                     }))
                                }
                                else
                                {
                                    @(Html.Kendo().DateTimePicker()
                                          .Name(componentName:"AnalysisDateTime_" + sampleResult.ParameterId)
                                          .Value(date:sampleResult.AnalysisDateTimeLocal)
                                          .Format(format:"MM/dd/yyyy hh:mm:ss tt")
                                          .HtmlAttributes(attributes:new
                                                                     {
                                                                         style = "width:200px; font-size:12px"
                                                                     }))
                                }
                            </td>
                            <td>
                                @if (sampleResult.IsApprovedEPAMethod)
                                {
                                    <input type='checkbox' class='checkbox' id="EPAMethod_@sampleResult.ParameterId" checked />
                                }
                                else
                                {
                                    <input type='checkbox' class='checkbox' id="EPAMethod_@sampleResult.ParameterId" />
                                }
                            </td>
                            <td>
                                @if (sampleResult.IsCalcMassLoading)
                                {
                                    <input type='checkbox' class='checkbox' name="CkCalcLoading" id="CalcLoading_@sampleResult.ParameterId" checked />
                                }
                                else
                                {
                                    <input type='checkbox' class='checkbox' name="CkCalcLoading" id="CalcLoading_@sampleResult.ParameterId" />
                                }
                            </td>
                            <td>
                                <strong id="MassResult_@sampleResult.ParameterId"> @sampleResult.MassLoadingQualifier @sampleResult.MassLoadingValue @sampleResult.MassLoadingUnitName </strong>
                            </td>
                            <td>
                                <button class="btn btn-danger btn-sm" data-title="Delete Parameter" id="btnDeleteParam" name="btnDeleteParam">
                                    <i class="fa fa-lg fa-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    // Buttons

    <div class="box box-default">
        <div class="box-body">
            <strong>&nbsp;</strong>
            <div class="box-tools pull-right">

                @if (Model.SampleStatusName != SampleStatusName.Reported)
                {
                    if (!ViewBag.Satus.Equals("New"))
                    {
                        switch (Model.SampleStatusName)
                        {
                            case SampleStatusName.Draft:
                                <input type="submit" value="Save" class="btn btn-primary btn-sm" formaction="@Url.Action(actionName:"SampleDetails", controllerName:"Industry")" formmethod="post" />
                                <input type="submit" value="Ready to Report" class="btn btn-primary btn-sm" formaction="@Url.Action(actionName:"EnableSample", controllerName:"Industry", routeValues:new {isReadyToReport = true})" formmethod="post" />
                                break;
                            case SampleStatusName.ReadyToReport:
                                <input type="submit" value="Enable Edit Sample" class="btn btn-primary btn-sm" formaction="@Url.Action(actionName:"EnableSample", controllerName:"Industry", routeValues:new {isReadyToReport = false})" formmethod="post" />
                                break;
                        }

                        <input class="btn btn-primary btn-sm" data-target="#DeleteSampleModal" data-toggle="modal" type="button" value="Delete" />
                    }
                    else
                    {
                        <input type="submit" value="Save" class="btn btn-primary btn-sm" formaction="@Url.Action(actionName:"NewSampleDetailsStep2", controllerName:"Industry")" formmethod="post" />
                    }
                }
            </div>
        </div>
    </div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $(document)
            .ready(function()
            {
                $('#ParameterGroupTable')
                    .DataTable(
                        {
                            "columnDefs": [
                                {
                                    "defaultContent":
                                        "<button class='btn btn-primary btn-sm' data-title='btnAddParamsFromGroup' name='btnAddParamsFromGroup'><i class='fa fa-lg fa-plus'></i></button>"
                                    , "targets": 4
                                }
                            ]
                            , "searching": false
                            , "ordering": false
                            , "order": [[1, 'asc']]
                            , "paging": false
                            , "info": false
                            , "responsive": true
                            , "autoWidth": false
                            , "processing": true
                            , "stateSave": false
                        }
                    );

                $('#ParameterTable')
                    .DataTable(
                        {
                            "columnDefs": [
                                {
                                    "defaultContent":
                                        "<button class='btn btn-danger btn-sm' name='btnDeleteParam' id='btnDeleteParam'><i class='fa fa-plus'></i></button>"
                                    , "targets": 10
                                }
                            ]
                            , "searching": false
                            , "ordering": false
                            , "order": [[1, 'asc']]
                            , "paging": false
                            , "info": false
                            , "responsive": true
                            , "autoWidth": false
                            , "processing": true
                            , "stateSave": false
                            , language: {
                                search: ""
                                , searchPlaceholder: "Search Parameter..."
                            }
                        }
                    );

                //$("input[id^='CalcLoading_']:checkbox:checked")
                //    .each(function()
                //    {
                //        var paramId = this.id.replace('CalcLoading_', '');
                //        displayMassLoading(paramId);
                //    });

                var isReadOnly = "@ViewBag.Readonly".toLowerCase() === "true";

                if (isReadOnly)
                {
                    $("input[type=text]").prop('readonly', true);
                    $("input[type=checkbox]").prop('disabled', true);
                    $("select").prop('disabled', true);
                    $("[name='btnAddParamsFromGroup']").prop('disabled', true);
                    $("[name='btnDeleteParam']").prop('disabled', true);
                }

                $(document)
                    .on('keypress'
                        , "input[id^='Result_']"
                        , function(e)
                        {
                            //if the letter is not digit then don't type anything
                            if (e.which !== 8 && e.which !== 0 && e.which !== 46 && (e.which < 48 || e.which > 57))
                            {
                                return false;
                            }
                            else
                            {
                                return true;
                            }
                        });

                $("#FlowValue")
                    .keypress(function(e)
                    {
                        //if the letter is not digit then don't type anything
                        if (e.which !== 8 && e.which !== 0 && e.which !== 46 && (e.which < 48 || e.which > 57))
                        {
                            return false;
                        }
                        else
                        {
                            return true;
                        }
                    });
            });

        function displayMassLoading(paramId)
        {
            var clChecked = $("#CalcLoading_" + paramId).iCheck('update')[0].checked;

            if (clChecked)
            {
                var qualifier = $("#Qualifier_" + paramId).val();
                var massLoadingMultiplier = parseFloat($("#MassLoadingConversionFactorPounds").val());
                var massLoadingUnit = $("#MassLoadingMassLoadingUnitName").val();
                var isMassLoadingResultToUseLessThanSign = $("#IsMassLoadingResultToUseLessThanSign").val();
                var massLoadingCalculationDecimalPlaces = parseInt($("#MassLoadingCalculationDecimalPlaces").val());

                if (qualifier === "ND" || qualifier === "NF")
                {
                    $("#MassResult_" + paramId).html("").fadeOut(2000);
                }
                else if (qualifier === "NUMERIC" || qualifier === ">")
                {
                    var result = parseFloat($("#Result_" + paramId).val());
                    var sampleFlowResult = parseFloat($("#FlowValue").val());

                    if (isNaN(result) || isNaN(sampleFlowResult))
                    {
                        $("#MassResult_" + paramId).html("").fadeOut(2000);
                    }
                    else
                    {
                        $("#MassResult_" + paramId)
                            .html("")
                            .fadeOut(1000
                                , function()
                                {
                                    $("#MassResult_" + paramId)
                                        .html((result * sampleFlowResult * massLoadingMultiplier)
                                            .toFixed(massLoadingCalculationDecimalPlaces)
                                            + " "
                                            + massLoadingUnit)
                                        .fadeIn(2000).css('color', 'green');
                                });
                    }
                }
                else if (qualifier === "<")
                {
                    var result = parseFloat($("#Result_" + paramId).val());
                    var sampleFlowResult = parseFloat($("#FlowValue").val());

                    if (isNaN(result) || isNaN(sampleFlowResult))
                    {
                        $("#MassResult_" + paramId).html("").fadeOut(2000);
                    }
                    else
                    {
                        $("#MassResult_" + paramId)
                            .html("")
                            .fadeOut(1000
                                , function()
                                {
                                    $("#MassResult_" + paramId)
                                        .html((isMassLoadingResultToUseLessThanSign ? qualifier + " " : "")
                                            + (result * sampleFlowResult * massLoadingMultiplier)
                                            .toFixed(massLoadingCalculationDecimalPlaces)
                                            + " "
                                            + massLoadingUnit)
                                        .fadeIn(2000).css('color', 'green');
                                });
                    }
                }
            }
            else
            {
                $("#MassResult_" + paramId).html("").fadeOut(2000);
            }
        }

        $("#FlowValue")
            .blur(function()
            {
                $("input[id^='CalcLoading_']:checkbox:checked")
                    .each(function()
                    {
                        var paramId = this.id.replace('CalcLoading_', '');
                        displayMassLoading(paramId);
                    });
            });

        $("select[id^='Qualifier_']")
            .change(function()
            {
                var paramId = this.id.replace('Qualifier_', '');
                var qualifier = $("#Qualifier_" + paramId).val();

                if (qualifier == "ND" || qualifier == "NF")
                {
                    $("#Result_" + paramId).val("").attr("readonly", "readonly");
                }
                else
                {
                    $("#Result_" + paramId).removeAttr("readonly");
                }

                displayMassLoading(paramId);
            });

        $("input[id^='Result_']")
            .blur(function()
            {
                var paramId = this.id.replace('Result_', '');
                displayMassLoading(paramId);
            });

        $("input[id^='CalcLoading_']")
            .on('ifChecked'
                , function(event)
                {
                    var paramId = this.id.replace('CalcLoading_', '');
                    displayMassLoading(paramId);
                });

        $("input[id^='CalcLoading_']")
            .on('ifUnchecked'
                , function(event)
                {
                    var paramId = this.id.replace('CalcLoading_', '');
                    displayMassLoading(paramId);
                });

        $(document)
            .on('click'
                , "button[id^='btnDeleteParam']"
                , function()
                {
                    var table = $('#ParameterTable').DataTable();
                    table
                        .row($(this).parents('tr'))
                        .remove()
                        .draw();
                });

        $(document)
            .on('click'
                , "button[id^='btnDeleteEmptyParameters']"
                , function()
                {
                    var table = $('#ParameterTable').DataTable();
                    table
                        .rows()
                        .every(function()
                        {
                            var d = this.data();
                            var cell = d[0];
                            var paramId = $('input', cell)['prevObject'][0].id.replace('sampleResultId_', '');
                            var qualifier = $("#Qualifier_" + paramId).val();
                            var result = parseFloat($("#Result_" + paramId).val());

                            console.debug($('input', cell)['prevObject'][0].id
                                + ' : '
                                + paramId
                                + ' : '
                                + qualifier
                                + ' : '
                                + result);

                            if ((qualifier === 'NUMERIC' || qualifier === '<' || qualifier === '>') && isNaN(result))
                            {
                                this.nodes().to$().addClass('selected');
                            }
                        });

                    table.rows('.selected')
                        .remove()
                        .draw();

                    console.debug($('#ParameterTable >tbody >tr').length);
                });
    </script>
}}