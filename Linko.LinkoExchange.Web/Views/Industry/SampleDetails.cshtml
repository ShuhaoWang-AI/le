@using Linko.LinkoExchange.Core.Enum
@using Microsoft.Ajax.Utilities
@model Linko.LinkoExchange.Web.ViewModels.Shared.SampleViewModel

@{
    ViewBag.Title = "Sample Details";
    ViewBag.Readonly = Model.SampleStatusName != SampleStatusName.Draft;
}

@using (Html.BeginForm(actionName:null, controllerName:null, method:FormMethod.Post, htmlAttributes:new {id = "LinkoExchangeForm"}))
{
    @Html.AntiForgeryToken()

    <section>
        <ol class="breadcrumb">
            <li>
                <a href="#" onclick="location.href = '@Url.Action(actionName:"Index", controllerName:"Industry")'"><i class=""></i> Home </a>
            </li>
            <li>
                <a href="#" onclick="location.href = '@Url.Action(actionName:"Samples", controllerName:"Industry", routeValues:new {sampleStatus = Model.SampleStatusName})'"><i class=""></i> Samples - @Label.ResourceManager.GetString(name:Model.SampleStatusName.ToString())</a>
            </li>
            <li class="active">
                Details
            </li>
        </ol>
    </section>

    <div class="box box-primary">
        <div class="box-header with-border">
            <h3 class="box-title">
                Monitoring Point: @Model.MonitoringPointName
            </h3>

            <div class="box-tools pull-right">

                @switch (Model.SampleStatusName)
                {
                    case SampleStatusName.Draft:
                        <strong class="bg-yellow btn-sm text-info"> &nbsp;&nbsp;Draft&nbsp; </strong>
                        break;
                    case SampleStatusName.ReadyToReport:
                        <strong class="bg-green-active btn-sm text-info"> &nbsp;&nbsp;Ready to Report&nbsp; </strong>
                        break;
                    case SampleStatusName.Reported:
                        <strong class="bg-purple btn-sm text-info"> &nbsp;&nbsp;Reported&nbsp; </strong>
                        break;
                    default:
                        break;
                }

                <button class="btn btn-box-tool" data-widget="collapse">
                    <i class="fa fa-minus"></i>
                </button>
            </div>
        </div>

        <div aria-labelledby="DeleteSampleModalLabel" class="col-md-12 fade modal modal-info" id="DeleteSampleModal" role="dialog" tabindex="-1">
            <div class="modal-dialog" role="document">
                <div class="alert alert-dismissible alert-info modal-content">
                    <button aria-label="Close" class="close" data-dismiss="modal" type="button">&times;</button>
                    <h4 class="box-title">Delete Sample</h4>

                    <div class="form-horizontal">
                        <p>
                            Do you want to delete this Sample?<br />
                        </p>
                        <div class="form-group">
                            <div class="pull-right">
                                <button type="submit" formnovalidate="formnovalidate" class="btn btn-primary btn-sm cancel" formaction="@Url.Action(actionName:"DeleteSample", controllerName:"Industry", routeValues:new {id = Model.Id})" formmethod="post">
                                    Yes
                                </button>
                                <button aria-label="Close" class="btn btn-primary btn-sm" data-dismiss="modal" type="button">No</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <section class="box-body form-horizontal">
            @Html.ValidationSummary(excludePropertyErrors:false, message:Message.ValidationSummaryHeaderText, htmlAttributes:new
                                                                                                                             {
                                                                                                                                 @class = "alert alert-danger"
                                                                                                                             })
            @if (ViewBag.ShowSuccessMessage != null && ViewBag.ShowSuccessMessage)
            {
                <div class="alert alert-dismissible alert-success" id="div-success-message">
                    <button aria-hidden="true" class="close" data-dismiss="alert" type="button">&times;</button>
                    <h5>
                        <i class="fa fa-check icon"></i>
                        @ViewBag.SuccessMessage
                    </h5>
                </div>
            }

            <div aria-labelledby="AddParameterModalLabel" class="col-md-12 fade modal modal-info" id="AddParameterModal" role="dialog" tabindex="-1">
                <div class="modal-dialog" role="document">
                    <div class="alert alert-dismissible alert-info modal-content">
                        <button aria-label="Close" class="close" data-dismiss="modal" type="button">&times;</button>
                        <h4 class="box-title">Add Parameter</h4>

                        <div>
                            <p>
                                Select a parameter to add<br />
                                <input id="AddParameterDropdown" style="width: 275px" />
                            </p>
                            <div class="form-group">
                                <div class="pull-right">
                                    <button class="btn btn-primary btn-sm" id="btnAddParameterInsideModal" name="btnAddParameterInsideModal" type="button">
                                        Add
                                    </button>
                                    <button aria-label="Close" class="btn btn-primary btn-sm" data-dismiss="modal" type="button">Cancel</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-horizontal">
                <div class="form-group">
                    @Html.HiddenFor(model => model.Id)
                    @Html.HiddenFor(model => model.Name)
                    @Html.HiddenFor(model => model.MonitoringPointId)
                    @Html.HiddenFor(model => model.MonitoringPointName)
                    @Html.HiddenFor(model => model.CtsEventCategoryName)
                    @Html.HiddenFor(model => model.MassLoadingConversionFactorPounds)
                    @Html.HiddenFor(model => model.MassLoadingCalculationDecimalPlaces)
                    @Html.HiddenFor(model => model.IsMassLoadingResultToUseLessThanSign)
                    @Html.HiddenFor(model => model.MassLoadingMassLoadingUnitId)
                    @Html.HiddenFor(model => model.MassLoadingMassLoadingUnitName)
                    @Html.Hidden(name:"FlowUnitValidValues", value:Html.Raw(value:Json.Encode(value:Model.FlowUnitValidValues)))
                    @Html.HiddenFor(model => model.CtsEventTypeName)
                    @Html.HiddenFor(model => model.CollectionMethodName)
                    @Html.HiddenFor(model => model.FlowUnitName)
                    @Html.HiddenFor(model => model.ResultQualifierValidValues)
                    @Html.HiddenFor(model => model.SampleStatusName)
                    @Html.Hidden(name:"AllParameters", value:Html.Raw(value:Json.Encode(value:Model.AllParameters)))
                    @Html.Hidden(name:"SampleResults", value:Html.Raw(value:Json.Encode(value:Model.SampleResults)))
                </div>

                <div class="form-group">
                    <div class="col-sm-4 no-padding">
                        @Html.LabelFor(model => model.CollectionMethodId, htmlAttributes:new
                                                                                         {
                                                                                             @class = "control-label col-sm-6 required"
                                                                                         })
                        <div class="col-sm-6 no-padding">

                            @Html.DropDownList(name:"CollectionMethodId", selectList:Model.AvailableCollectionMethods, htmlAttributes:new
                                                                                                                                      {
                                                                                                                                          @class = "form-control input-sm"
                                                                                                                                      })

                            @Html.HiddenFor(model => model.CollectionMethodId)
                            @Html.ValidationMessageFor(model => model.CollectionMethodId, validationMessage:"", htmlAttributes:new
                                                                                                                               {
                                                                                                                                   @class = "text-danger"
                                                                                                                               })
                        </div>
                    </div>

                    <div class="col-sm-4 no-padding">
                        @Html.LabelFor(model => model.CtsEventTypeId, htmlAttributes:new
                                                                                     {
                                                                                         @class = "control-label col-sm-5 required"
                                                                                     })
                        <div class="col-sm-7 no-padding">
                            @Html.DropDownList(name:"CtsEventTypeId", selectList:Model.AvailableCtsEventTypes, htmlAttributes:new
                                                                                                                              {
                                                                                                                                  @class = "form-control input-sm"
                                                                                                                              })

                            @Html.HiddenFor(model => model.CtsEventTypeId)
                            @Html.ValidationMessageFor(model => model.CtsEventTypeId, validationMessage:"", htmlAttributes:new
                                                                                                                           {
                                                                                                                               @class = "text-danger"
                                                                                                                           })
                        </div>
                    </div>

                    <div class="col-sm-4 no-padding">
                        @Html.LabelFor(model => model.StartDateTimeLocal, htmlAttributes:new
                                                                                         {
                                                                                             @class = "control-label col-sm-4 required"
                                                                                         })
                        <div class="col-sm-8 no-padding">
                            @if (ViewBag.Readonly)
                            {
                                if (Model.StartDateTimeLocal.ToString(format:"hh:mm tt").ToLower().Equals(value:"12:00 am"))
                                {
                                    @(Html.Kendo().DateTimePicker()
                                          .Name(componentName:"StartDateTimeLocal")
                                          .Value(date:Model.StartDateTimeLocal)
                                          .Format(format:"MM/dd/yyyy")
                                          .Max(date:DateTime.Now)
                                          .HtmlAttributes(attributes:new
                                                                     {
                                                                         @readonly = true,
                                                                         style = "width:210px; background-color: #eee;"
                                                                     }))
                                }
                                else
                                {
                                    @(Html.Kendo().DateTimePicker()
                                          .Name(componentName:"StartDateTimeLocal")
                                          .Value(date:Model.StartDateTimeLocal)
                                          .Format(format:"MM/dd/yyyy hh:mm tt")
                                          .Max(date:DateTime.Now)
                                          .HtmlAttributes(attributes:new
                                                                     {
                                                                         @readonly = true,
                                                                         style = "width:210px; background-color: #eee;"
                                                                     }))
                                }
                            }
                            else
                            {
                                @(Html.Kendo().DateTimePicker()
                                      .Name(componentName:"StartDateTimeLocal")
                                      .Value(date:Model.StartDateTimeLocal)
                                      .Format(format:"MM/dd/yyyy hh:mm tt")
                                      .Max(date:DateTime.Now)
                                      .HtmlAttributes(attributes:new
                                                                 {
                                                                     style = "width:210px;"
                                                                 }))
                            }
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-sm-4 no-padding">
                        @Html.LabelFor(model => model.LabSampleIdentifier, htmlAttributes:new
                                                                                          {
                                                                                              @class = "control-label col-sm-6"
                                                                                          })
                        <div class="col-sm-6 no-padding">
                            @Html.EditorFor(model => model.LabSampleIdentifier, additionalViewData:new
                                                                                                   {
                                                                                                       htmlAttributes = new
                                                                                                                        {
                                                                                                                            @class = "form-control input-sm",
                                                                                                                            maxlength = 50
                                                                                                                        }
                                                                                                   })
                        </div>
                    </div>

                    <div class="col-sm-4 no-padding">
                        @Html.LabelFor(model => model.FlowValue, htmlAttributes:new
                                                                                {
                                                                                    @class = "control-label col-sm-5"
                                                                                })
                        <div class="col-sm-7 no-padding">
                            <div class="col-sm-7 no-margin no-padding">
                                @Html.EditorFor(model => model.FlowValue, additionalViewData:new
                                                                                             {
                                                                                                 htmlAttributes = new
                                                                                                                  {
                                                                                                                      @class = "form-control input-sm"
                                                                                                                  }
                                                                                             })
                            </div>
                            <div class="col-sm-5 no-padding">
                                @Html.DropDownList(name:"FlowUnitId", selectList:Model.AvailableFlowUnits, htmlAttributes:new
                                                                                                                          {
                                                                                                                              @class = "form-control input-sm"
                                                                                                                          })


                                @Html.HiddenFor(model => model.FlowUnitId)
                                @Html.ValidationMessageFor(model => model.FlowUnitId, validationMessage:"", htmlAttributes:new
                                                                                                                           {
                                                                                                                               @class = "text-danger"
                                                                                                                           })
                            </div>
                        </div>
                    </div>

                    <div class="col-sm-4 no-padding">
                        @Html.LabelFor(model => model.EndDateTimeLocal, htmlAttributes:new
                                                                                       {
                                                                                           @class = "control-label col-sm-4 required"
                                                                                       })
                        <div class="col-sm-8 no-padding">
                            @if (ViewBag.Readonly)
                            {
                                if (Model.EndDateTimeLocal.ToString(format:"hh:mm tt").ToLower().Equals(value:"12:00 am"))
                                {
                                    @(Html.Kendo().DateTimePicker()
                                          .Name(componentName:"EndDateTimeLocal")
                                          .Value(date:Model.EndDateTimeLocal)
                                          .Format(format:"MM/dd/yyyy")
                                          .Max(date:DateTime.Now)
                                          .HtmlAttributes(attributes:new
                                                                     {
                                                                         @readonly = true,
                                                                         style = "width:210px; background-color: #eee;"
                                                                     }))
                                }
                                else
                                {
                                    @(Html.Kendo().DateTimePicker()
                                          .Name(componentName:"EndDateTimeLocal")
                                          .Value(date:Model.EndDateTimeLocal)
                                          .Format(format:"MM/dd/yyyy hh:mm tt")
                                          .Max(date:DateTime.Now)
                                          .HtmlAttributes(attributes:new
                                                                     {
                                                                         @readonly = true,
                                                                         style = "width:210px; background-color: #eee;"
                                                                     }))
                                }
                            }
                            else
                            {
                                @(Html.Kendo().DateTimePicker()
                                      .Name(componentName:"EndDateTimeLocal")
                                      .Value(date:Model.EndDateTimeLocal)
                                      .Format(format:"MM/dd/yyyy hh:mm tt")
                                      .Max(date:DateTime.Now)
                                      .HtmlAttributes(attributes:new
                                                                 {
                                                                     style = "width:210px;"
                                                                 }))
                            }
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </div>

    if (!ViewBag.Readonly)
    {
        //parameter Groups

        <div class="box box-primary">
            <div class="box-header with-border">
                <h3 class="box-title">Parameter Groups</h3>
                <div class="box-tools pull-right">
                    <button class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                </div>
            </div>
            <div class="box-body box-collapse collapse in">
                <table class="dataTable table table-bordered table-condensed table-hover table-striped text-center" id="ParameterGroupTable">
                    <thead>
                        <tr>
                            @*if you add or reorder any column then need to update the JavaScripts bellow*@
                            <th class="never">Id</th>
                            <th>Parameter Group</th>
                            <th>Description</th>
                            <th class="never">ParameterIds</th>
                            <th style="width: 50px">Add</th>
                        </tr>
                    </thead>

                    <tbody>
                        @foreach (var parameterGroup in Model.ParameterGroups)
                        {
                            <tr>
                                <td>@parameterGroup.Id</td>
                                <td>@parameterGroup.Name</td>
                                <td>@parameterGroup.Description</td>
                                <td>@parameterGroup.ParameterIds</td>
                                <td>
                                    <button class="btn btn-primary btn-sm" name="btnAddParamsFromGroup" type="button">
                                        <i class="fa fa-lg fa-plus"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }

    // Results

    <div class="box box-primary">
        <div class="box-header with-border">
            <h3 class="box-title">Results</h3>
            <div class="box-tools pull-right">
                @if (!ViewBag.Readonly)
                {
                    <button class="btn btn-primary btn-sm" id="btnAddParameter" type="button">Add Parameter</button>
                    <button class="btn btn-primary btn-sm" id="btnDeleteEmptyParameters" type="button">Delete Empty Parameters</button>
                }
                <button class="btn btn-box-tool" data-widget="collapse">
                    <i class="fa fa-minus"></i>
                </button>
            </div>
        </div>

        <div class="box-body box-collapse collapse in" style="overflow-x: auto;">
            <table class="dataTable table table-bordered table-condensed table-hover table-striped text-center" id="ParameterTable">
                <thead>
                    <tr>
                        @*if you add or reorder any column then need to update the JavaScripts bellow*@
                        <th class="never"> Id </th>
                        <th class="all"> Parameter Name</th>
                        <th class="all" style="width: 50px"> Qualifier </th>
                        <th class="all"> Result </th>
                        <th class="all" style="width: 80px"> MDL </th>
                        <th class="all"> Analysis Method </th>
                        <th class="all" style="min-width: 160px; width: 180px;"> Analysis Date & Time </th>
                        <th class="all" style="width: 50px;">
                            EPA Method
                            @if (!ViewBag.Readonly)
                            {
                                <input class='checkbox' id="EPAMethod" type='checkbox' />
                            }
                        </th>
                        <th class="all" style="width: 50px;">
                            Calculate Loading
                            @if (!ViewBag.Readonly)
                            {
                                <input class='checkbox' id="CalcLoading" name="CkCalcLoading" type='checkbox' />
                            }
                        </th>
                        <th class="never"> Mass Loading Id </th>
                        <th class="all"> Mass Loading Result</th>
                        <th class="all" style="width: 50px"> Remove</th>
                    </tr>
                </thead>

                <tbody class="input-sm">
                    @foreach (var sampleResult in Model.SampleResults)
                    {
                        <tr>
                            <td>
                                <input id="sampleResultId_@sampleResult.ParameterId" type="hidden" value=@(sampleResult.Id.HasValue ? sampleResult.Id.Value.ToString() : "")>
                            </td>
                            <td>@sampleResult.ParameterName</td>
                            <td>
                                <select class="form-control input-sm no-margin no-padding onchange-calc-compliance" id="Qualifier_@sampleResult.ParameterId" style="width: 100%">
                                    @foreach (var q in Model.AvailableResultQualifierValidValues)
                                    {
                                        if (q.Value.Equals(value:sampleResult.Qualifier.IfNullOrWhiteSpace(defaultValue:"NUMERIC")))
                                        {
                                            <option value=@q.Value selected> @q.Text </option>
                                        }
                                        else
                                        {
                                            <option value=@q.Value> @q.Text </option>
                                        }
                                    }
                                </select>
                            </td>
                            <td>
                                <div class="input-group input-group-sm" style="min-width: 125px">
                                    <input class="form-control input-sm onchange-calc-compliance" id="Result_@sampleResult.ParameterId" type="text" value="@sampleResult.Value" autocomplete="off">
                                    <input id="UnitId_@sampleResult.ParameterId" type="hidden" value="@sampleResult.UnitId">
                                    <span id="UnitName_@sampleResult.ParameterId" class="input-group-addon">@sampleResult.UnitName</span>
                                    <span id="ResultCompliance_@sampleResult.ParameterId" class="input-group-addon">
                                        <i aria-hidden="true" class="fa fa-check-circle fa-lg" data-original-title="Results are in compliance." data-placement="top" data-toggle="tooltip" style="color: green" title=""></i>
                                    </span>
                                </div>
                            </td>
                            <td>
                                <input class="form-control input-sm" id="MDL_@sampleResult.ParameterId" type="text" style="width: 80px" value="@sampleResult.EnteredMethodDetectionLimit" autocomplete="off">
                            </td>
                            <td>
                                <input class="form-control input-sm" id="AnalysisMethod_@sampleResult.ParameterId" type="text" autocomplete="off" value="@sampleResult.AnalysisMethod">
                            </td>
                            <td>
                                @if (ViewBag.Readonly)
                                {
                                    if (sampleResult.AnalysisDateTimeLocal.HasValue && sampleResult.AnalysisDateTimeLocal.Value.ToString(format:"hh:mm tt").ToLower().Equals(value:"12:00 am"))
                                    {
                                        @(Html.Kendo().DateTimePicker()
                                              .Name(componentName:"AnalysisDateTime_" + sampleResult.ParameterId)
                                              .Value(date:sampleResult.AnalysisDateTimeLocal)
                                              .Format(format:"MM/dd/yyyy")
                                              .Max(date:DateTime.Now)
                                              .HtmlAttributes(attributes:new
                                                                         {
                                                                             @readonly = true,
                                                                             style = "width:100%; font-size:12px; background-color: #eee;"
                                                                         }))
                                    }
                                    else
                                    {
                                        @(Html.Kendo().DateTimePicker()
                                              .Name(componentName:"AnalysisDateTime_" + sampleResult.ParameterId)
                                              .Value(date:sampleResult.AnalysisDateTimeLocal)
                                              .Format(format:"MM/dd/yyyy hh:mm tt")
                                              .Max(date:DateTime.Now)
                                              .HtmlAttributes(attributes:new
                                                                         {
                                                                             @readonly = true,
                                                                             style = "width:100%; font-size:12px; background-color: #eee;"
                                                                         }))
                                    }
                                }
                                else
                                {
                                    @(Html.Kendo().DateTimePicker()
                                          .Name(componentName:"AnalysisDateTime_" + sampleResult.ParameterId)
                                          .Value(date:sampleResult.AnalysisDateTimeLocal)
                                          .Format(format:"MM/dd/yyyy hh:mm tt")
                                          .Max(date:DateTime.Now)
                                          .HtmlAttributes(attributes:new
                                                                     {
                                                                         style = "width:100%; font-size:12px"
                                                                     }))
                                }
                            </td>
                            <td>
                                @if (sampleResult.IsApprovedEPAMethod)
                                {
                                    <input type='checkbox' class='checkbox' id="EPAMethod_@sampleResult.ParameterId" checked />
                                }
                                else
                                {
                                    <input type='checkbox' class='checkbox' id="EPAMethod_@sampleResult.ParameterId" />
                                }
                            </td>
                            <td>
                                @if (sampleResult.IsCalcMassLoading)
                                {
                                    <input type='checkbox' class='checkbox' name="CkCalcLoading" id="CalcLoading_@sampleResult.ParameterId" checked />
                                }
                                else
                                {
                                    <input type='checkbox' class='checkbox' name="CkCalcLoading" id="CalcLoading_@sampleResult.ParameterId" />
                                }
                            </td>
                            <td>
                                <input id="MassResultId_@sampleResult.ParameterId" type="hidden" value=@(sampleResult.MassLoadingSampleResultId.HasValue ? sampleResult.MassLoadingSampleResultId.Value.ToString() : "")>
                            </td>
                            <td>
                                <span style="float: right; white-space: nowrap;">
                                    @if (sampleResult.MassLoadingValue.IfNullOrWhiteSpace(defaultValue:"").Length == 0)
                                    {
                                        <strong id="MassResult_@sampleResult.ParameterId"></strong>
                                    }
                                    else
                                    {
                                        <span>
                                            <strong id="MassResult_@sampleResult.ParameterId">@sampleResult.MassLoadingQualifier @sampleResult.MassLoadingValue @sampleResult.MassLoadingUnitName</strong>
                                        </span>
                                    }
                                    <span id="MassResultCompliance_@sampleResult.ParameterId">
                                        <i aria-hidden="true" class="fa fa-exclamation-circle fa-lg" data-original-title="Mass loading result compliance unknown. No limit was found." data-placement="top" data-toggle="tooltip" style="color: orange" title=""></i>
                                    </span>
                                </span>
                            </td>
                            <td>
                                <button class="btn btn-danger btn-sm" name="btnDeleteParam" type="button">
                                    <i class="fa fa-lg fa-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    // Buttons

    <div class="box box-default">
        <div class="box-body">
            <strong>&nbsp;</strong>
            <div class="box-tools pull-right">

                @if (Model.SampleStatusName != SampleStatusName.Reported)
                {
                    if (!ViewBag.Satus.Equals("New"))
                    {
                        switch (Model.SampleStatusName)
                        {
                            case SampleStatusName.Draft:
                                <input type="submit" id="btnSave" value="Save" class="btn btn-primary btn-sm" formaction="@Url.Action(actionName:"SampleDetails", controllerName:"Industry")" formmethod="post" />
                                <input type="submit" id="btnReadyToReport" value="Ready to Report" class="btn btn-primary btn-sm" formaction="@Url.Action(actionName:"EnableSample", controllerName:"Industry", routeValues:new {isReadyToReport = true})" formmethod="post" />
                                break;
                            case SampleStatusName.ReadyToReport:
                                <input type="submit" id="btnEnableEditSample" value="Enable Edit Sample" class="btn btn-primary btn-sm" formaction="@Url.Action(actionName:"EnableSample", controllerName:"Industry", routeValues:new {isReadyToReport = false})" formmethod="post" />
                                break;
                        }

                        <input class="btn btn-primary btn-sm" data-target="#DeleteSampleModal" data-toggle="modal" type="button" value="Delete" />
                    }
                    else
                    {
                        <input type="submit" value="Save" class="btn btn-primary btn-sm" formaction="@Url.Action(actionName:"NewSampleDetailsStep2", controllerName:"Industry")" formmethod="post" />
                    }
                }
            </div>
        </div>
    </div>

@section Scripts {
    <script>
        $(document)
            .ready(function() {
                //Prevent "enter key" press from doing anything on the page, i.e. collapsing boxes, submitting form, etc...
                $('#LinkoExchangeForm')
                    .bind('keydown', function(e) {
                        if (e.keyCode == 13) {
                            e.preventDefault();
                        }
                    });

                $('#ParameterGroupTable')
                    .DataTable(
                        {
                            "columnDefs": [
                                {
                                    "defaultContent":
                                        "<button class='btn btn-primary btn-sm' name='btnAddParamsFromGroup' type='button'><i class='fa fa-lg fa-plus'></i></button>",
                                    "targets": 4
                                }
                            ],
                            "searching": false,
                            "ordering": false,
                            "order": [[1, 'asc']],
                            "paging": false,
                            "info": false,
                            "responsive": true,
                            "autoWidth": false,
                            "processing": true,
                            "stateSave": false
                        }
                    );

                $('#ParameterTable')
                    .DataTable(
                        {
                            "columnDefs": [
                                {
                                    "defaultContent":
                                        '<button class="btn btn-danger btn-sm" name="btnDeleteParam" type="button"><i class="fa fa-lg fa-trash"></i></button>',
                                    "targets": 11
                                }
                            ],
                            "searching": false,
                            "ordering": true,
                            "order": [[1, 'asc']],
                            "paging": false,
                            "info": false,
                            "responsive": true,
                            "autoWidth": false,
                            "processing": true,
                            "stateSave": false,
                            language: {
                                search: "",
                                searchPlaceholder: "Search Parameter..."
                            }
                        }
                    );

                var clickedButtonId = "";

                $("input[type='submit']")
                    .click(function() {
                        clickedButtonId = $(this).attr('id');
                    });

                $("#LinkoExchangeForm")
                    .submit(function(event) {
                        //clear potentially existing success message box from previous action result
                        $("#div-success-message").remove();

                        var isFormValid = true;

                        try {
                            isFormValid = $(this).valid();
                        } catch (e) {}

                        try {
                            var validationSummary = $('.validation-summary-errors');

                            if (validationSummary.length === 0) {
                                // Form is still valid 
                                validationSummary = $('.validation-summary-valid');
                            }

                            // add Results to hidden field
                            var sampleResults = [];
                            var isValid = true;

                            var parameterTable = $('#ParameterTable').DataTable();
                            parameterTable
                                .rows()
                                .every(function() {
                                    var d = this.data();
                                    var sampleResult = {};
                                    //console.debug(d);
                                    var cell = d[0];
                                    var paramId = $('input', cell)['prevObject'][0].id.replace('sampleResultId_', '');

                                    sampleResult.Id = $('input', cell)['prevObject'][0].value;
                                    sampleResult.ParameterId = paramId;
                                    sampleResult.ParameterName = d[1];
                                    var qualifier = $("#Qualifier_" + paramId).val();
                                    sampleResult.Qualifier = ((qualifier === "NUMERIC") ? "" : qualifier);
                                    var result = parseFloat($("#Result_" + paramId).val());
                                    sampleResult.Value = $("#Result_" + paramId).val();
                                    sampleResult.UnitId = $("#UnitId_" + paramId).val();
                                    sampleResult.UnitName = $("#UnitName_" + paramId).html();
                                    sampleResult
                                        .IsCalcMassLoading = $("#CalcLoading_" + paramId).iCheck('update')[0].checked;
                                    sampleResult
                                        .IsApprovedEPAMethod = $("#EPAMethod_" + paramId).iCheck('update')[0].checked;
                                    sampleResult.AnalysisDateTimeLocal = $("#AnalysisDateTime_" + paramId).val();
                                    sampleResult.AnalysisMethod = $("#AnalysisMethod_" + paramId).val();
                                    sampleResult.EnteredMethodDetectionLimit = $("#MDL_" + paramId).val();

                                    var massLoadingResult = $("#MassResult_" + paramId).html().split(' ');
                                    if (massLoadingResult.length === 3) {
                                        sampleResult.MassLoadingSampleResultId = $("#MassResultId_" + paramId).val();
                                        var massLoadingQualifier = massLoadingResult[0];
                                        sampleResult.MassLoadingQualifier = massLoadingQualifier;
                                        sampleResult.MassLoadingValue = massLoadingResult[1];
                                        sampleResult.MassLoadingUnitId = $("#MassLoadingMassLoadingUnitId").val();
                                        sampleResult.MassLoadingUnitName = $("#MassLoadingMassLoadingUnitName").val();
                                    }

                                    sampleResults.push(sampleResult);

                                    if (clickedButtonId === "btnReadyToReport" && isFormValid) {
                                        var isSampleResultValid =
                                            !((qualifier === 'NUMERIC' || qualifier === '<' || qualifier === '>')
                                                && isNaN(result));

                                        isValid = isValid & isSampleResultValid;

                                        if (!isSampleResultValid) {
                                            $(this.node()).addClass('text-red');
                                        } else {
                                            $(this.node()).removeClass('text-red');
                                        }
                                    }
                                });

                            if (!isValid && isFormValid) {
                                event.preventDefault();
                                $("input[type='submit']").prop('disabled', false);
                                $("input[type='button']").prop("disabled", false);

                                validationSummary.removeClass("validation-summary-valid");
                                validationSummary.find("ul")
                                    .empty(); // remove li elements from the validation Summary list. valid form also have empty li element
                                validationSummary.find("ul").append("<li>Result is required for row(s) marked as red.</li>");
                                $("#CollectionMethodId").focus(); // to scroll to top validation summary
                            } else {
                                $("#SampleResults").val(JSON.stringify(sampleResults));

                                $("#CtsEventTypeName").val($("#CtsEventTypeId option:selected").text());
                                $("#CollectionMethodName").val($("#CollectionMethodId option:selected").text());
                                $("#FlowUnitName").val($("#FlowUnitId option:selected").text());
                            }

                            return isValid;
                        } catch (err) {
                            alert(err);
                            return false;
                        }
                    });
            });
    </script>

    @if (ViewBag.Readonly)
    {
        <script>
            $(document)
                .ready(function() {
                    $("input[type=text]").prop('readonly', true);
                    $("input[type=checkbox]").prop('disabled', true);
                    $("select").prop('disabled', true);
                    $("[name='btnAddParamsFromGroup']").prop('disabled', true);
                    $("[name='btnDeleteParam']").prop('disabled', true);
                });
        </script>
    }
    else
    {
        @Scripts.Render("~/bundles/jqueryval")
        @Scripts.Render("~/bundles/inputmask")

        <script>
            $(document)
                .ready(function() {
                    updateResultTextBoxState();

                    $("input[id^='Result_']").inputmask('decimal', { digits: '16', rightAlign: true });
                    $("input[id^='MDL_']").inputmask('decimal', { digits: '16', rightAlign: true });
                    $("#FlowValue").inputmask('decimal', { digits: '16', rightAlign: true });
                    $("#StartDateTimeLocal")
                        .inputmask({
                            alias: 'mm/dd/yyyy hh:mm xm',
                            mask: "1/2/y [h:s t\\m]",
                            placeholder: "mm/dd/yyyy 00:00 am",
                            greedy: false,
                            clearMaskOnLostFocus: false,
                            clearIncomplete: true
                        });

                    $("#EndDateTimeLocal")
                        .inputmask({
                            alias: 'mm/dd/yyyy hh:mm xm',
                            mask: "1/2/y [h:s t\\m]",
                            placeholder: "mm/dd/yyyy 00:00 am",
                            greedy: false,
                            clearMaskOnLostFocus: false,
                            clearIncomplete: true
                        });

                    $("input[id^='AnalysisDateTime_']")
                        .inputmask({
                            alias: 'mm/dd/yyyy hh:mm xm',
                            mask: "1/2/y [h:s t\\m]",
                            placeholder: "mm/dd/yyyy 00:00 am",
                            greedy: false,
                            clearMaskOnLostFocus: false,
                            clearIncomplete: true
                        });

                    if ($("input[id^='EPAMethod_']").length > 0 && $("input[id^='EPAMethod_']:checked").length === $("input[id^='EPAMethod_']").length) {
                        $("input[id='EPAMethod']").iCheck('check');
                    }
                    
                    if ($("input[id^='CalcLoading_']").length > 0 && $("input[id^='CalcLoading_']:checked").length === $("input[id^='CalcLoading_']").length) {
                        $("input[id='CalcLoading']").iCheck('check');
                    }
                });

            $(document)
                .on('change', "input[id^='AnalysisDateTime_']", function() {
                    var value = $(this).val().toLowerCase().replace("12:00 am", "");
                    $(this).val(value);
                });

            updateResultTextBoxState = function() {
                var parameterTable = $('#ParameterTable').DataTable();
                parameterTable
                    .rows()
                    .every(function() {
                        var d = this.data();
                        var cell = d[0];
                        var paramId = $('input', cell)['prevObject'][0].id.replace('sampleResultId_', '');
                        var qualifier = $("#Qualifier_" + paramId).val();

                        if (qualifier === "ND" || qualifier === "NF") {
                            $("#Result_" + paramId).val("").attr("readonly", "readonly");
                        } else {
                            $("#Result_" + paramId).removeAttr("readonly");
                        }
                    });
            };

            function displayMassLoading(paramId) {
                var clChecked = $("#CalcLoading_" + paramId).iCheck('update')[0].checked;

                if (clChecked) {
                    var qualifier = $("#Qualifier_" + paramId).val();
                    var massLoadingUnit = $("#MassLoadingMassLoadingUnitName").val();
                    var isMassLoadingResultToUseLessThanSign = ($("#IsMassLoadingResultToUseLessThanSign").val().toLowerCase() === "true");
                    var massLoadingCalculationDecimalPlaces = parseInt($("#MassLoadingCalculationDecimalPlaces").val());
                    var flowUnitName = $("#FlowUnitId option:selected").text().toLowerCase();
                    var resultUnitName = $("#UnitName_" + paramId).html().toLowerCase();

                    if (qualifier === "ND" || qualifier === "NF") {
                        $("#MassResult_" + paramId).html("");
                    } else if (qualifier === "NUMERIC" || qualifier === ">") {
                        var result = parseFloat($("#Result_" + paramId).val());
                        var sampleFlowResult = parseFloat($("#FlowValue").val());

                        if (isNaN(result)
                            || isNaN(sampleFlowResult)
                            || ((flowUnitName !== "mgd") && (flowUnitName !== "gpd"))
                            || ((resultUnitName !== "mg/l") && (resultUnitName !== "ug/l"))) {
                            $("#MassResult_" + paramId).html("");
                        } else {
                            var massLoadingValue = getMassLoadingValue(paramId);

                            $("#MassResult_" + paramId)
                                .html(" "
                                    + massLoadingValue.toFixed(massLoadingCalculationDecimalPlaces)
                                    + " "
                                    + massLoadingUnit);
                            //.css('color', 'green');
                        }
                    } else if (qualifier === "<") {
                        var result = parseFloat($("#Result_" + paramId).val());
                        var sampleFlowResult = parseFloat($("#FlowValue").val());

                        if (isNaN(result)
                            || isNaN(sampleFlowResult)
                            || ((flowUnitName !== "mgd") && (flowUnitName !== "gpd"))
                            || ((resultUnitName !== "mg/l") && (resultUnitName !== "ug/l"))) {
                            $("#MassResult_" + paramId).html("");
                        } else {
                            var massLoadingValue = getMassLoadingValue(paramId);

                            $("#MassResult_" + paramId)
                                .html((isMassLoadingResultToUseLessThanSign ? qualifier : "")
                                    + " "
                                    + massLoadingValue.toFixed(massLoadingCalculationDecimalPlaces)
                                    + " "
                                    + massLoadingUnit);
                            //.css('color', 'green');
                        }
                    }
                } else {
                    $("#MassResult_" + paramId).html("");
                }

                displayMassLoadingCompliance(paramId);
            }

            $("#FlowValue")
                .blur(function() {
                    $("input[id^='CalcLoading_']:checkbox:checked")
                        .each(function() {
                            var paramId = this.id.replace('CalcLoading_', '');
                            displayMassLoading(paramId);
                        });

                    $("input[id^='Result_']")
                        .each(function() {
                            var paramId = this.id.replace('Result_', '');
                            displayConcentrationCompliance(paramId);
                        });
                });

            $("select[name='FlowUnitId']")
                .change(function() {
                    $("input[id^='CalcLoading_']:checkbox:checked")
                        .each(function() {
                            var paramId = this.id.replace('CalcLoading_', '');
                            displayMassLoading(paramId);
                        });

                    $("input[id^='Result_']")
                        .each(function() {
                            var paramId = this.id.replace('Result_', '');
                            displayConcentrationCompliance(paramId);
                        });
                });

            $(document)
                .on('change', "select[id^='Qualifier_']", function() {
                    var paramId = this.id.replace('Qualifier_', '');
                    var qualifier = $("#Qualifier_" + paramId).val();

                    if (qualifier === "ND" || qualifier === "NF") {
                        $("#Result_" + paramId).val("").attr("readonly", "readonly");
                    } else {
                        $("#Result_" + paramId).removeAttr("readonly");
                    }

                    displayMassLoading(paramId);
                    displayConcentrationCompliance(paramId);
                });

            $(document)
                .on('blur', "input[id^='Result_']", function() {
                    var paramId = this.id.replace('Result_', '');
                    displayConcentrationCompliance(paramId);
                    displayMassLoading(paramId);
                });

            $(document)
                .on('ifChecked', "input[id='EPAMethod']", function(event) {
                    $("input[id^='EPAMethod_']").iCheck('check');
                });

            $(document)
                .on('ifUnchecked', "input[id='EPAMethod']", function(event) {
                    $("input[id^='EPAMethod_']").iCheck('uncheck');
                });

            $(document)
                .on('ifChecked', "input[id^='EPAMethod_']", function(event) {
                    if ($("input[id^='EPAMethod_']:checked").length === $("input[id^='EPAMethod_']").length) {
                        $("input[id='EPAMethod']").iCheck('check');
                    }
                });

            $(document)
                .on('ifUnchecked', "input[id^='EPAMethod_']", function(event) {
                    if ($("input[id^='EPAMethod_']:checked").length !== $("input[id^='EPAMethod_']").length) {
                        $("input[id='EPAMethod']").iCheck('indeterminate');
                    }
                });

            $(document)
                .on('ifChecked', "input[id='CalcLoading']", function(event) {
                    $("input[id^='CalcLoading_']").iCheck('check');
                });

            $(document)
                .on('ifUnchecked', "input[id='CalcLoading']", function(event) {
                    $("input[id^='CalcLoading_']").iCheck('uncheck');
                });

            $(document)
                .on('ifChecked', "input[id^='CalcLoading_']", function(event) {
                    if ($("input[id^='CalcLoading_']:checked").length === $("input[id^='CalcLoading_']").length) {
                        $("input[id='CalcLoading']").iCheck('check');
                    }
                    var paramId = this.id.replace('CalcLoading_', '');
                    displayMassLoading(paramId);
                });

            $(document)
                .on('ifUnchecked', "input[id^='CalcLoading_']", function(event) {
                    if ($("input[id^='CalcLoading_']:checked").length !== $("input[id^='CalcLoading_']").length) {
                        $("input[id='CalcLoading']").iCheck('indeterminate');
                    }
                    var paramId = this.id.replace('CalcLoading_', '');
                    displayMassLoading(paramId);
                });

            $(document)
                .on('click', "button[name='btnDeleteParam']", function() {
                    var table = $('#ParameterTable').DataTable();
                    table
                        .row($(this).parents('tr'))
                        .remove()
                        .draw();
                });

            $("#btnDeleteEmptyParameters")
                .click(function() {
                    var table = $('#ParameterTable').DataTable();
                    table
                        .rows()
                        .every(function() {
                            var d = this.data();
                            var cell = d[0];
                            var paramId = $('input', cell)['prevObject'][0].id
                                .replace('sampleResultId_', '');
                            var qualifier = $("#Qualifier_" + paramId).val();
                            var result = parseFloat($("#Result_" + paramId).val());

                            //console.debug($('input', cell)['prevObject'][0].id + ' : ' + paramId + ' : ' + qualifier + ' : ' + result);

                            if ((qualifier === 'NUMERIC' || qualifier === '<' || qualifier === '>')
                                && isNaN(result)
                            ) {
                                this.nodes().to$().addClass('selected');
                            }
                        });

                    table.rows('.selected')
                        .remove()
                        .draw();

                    //console.debug($('#ParameterTable >tbody >tr').length);
                });

            $("#btnAddParameter")
                .click(function() {
                    var allParameters = $.parseJSON($("#AllParameters").val());

                    var alreadyAddedParameterIds = [];

                    $('#ParameterTable')
                        .DataTable()
                        .rows()
                        .every(function() {
                            var d = this.data();
                            var cell = d[0];
                            var paramId = $('input', cell)['prevObject'][0].id
                                .replace('sampleResultId_', '');
                            alreadyAddedParameterIds.push(parseInt(paramId));
                        });

                    //console.debug(alreadyAddedParameterIds);

                    var availableParameters = $.grep(allParameters, function(obj) {
                        //The $.inArray() method is similar to JavaScript's native .indexOf() method in that it returns -1 when it doesn't find a match.
                        return ($.inArray(obj.Id, alreadyAddedParameterIds) === -1);
                    });

                    //console.debug(allParameters);
                    //console.debug(availableParameters);

                    $("#AddParameterDropdown")
                        .kendoDropDownList({
                            filter: "contains",
                            dataSource: availableParameters,
                            dataTextField: "Name",
                            dataValueField: "Id",
                            autoWidth: true,
                            noDataTemplate: 'No Parameter Available!',
                            popup: {
                                appendTo: $("#AddParameterModal")
                            }
                        });

                    $('#AddParameterModal').modal('show');
                });

            $(document)
                .on('click', "button[id='btnAddParameterInsideModal']", function() {
                    var allParameters = $.parseJSON($("#AllParameters").val());

                    var availableParameters = $.grep(allParameters, function(obj) {
                        return (obj.Id === parseInt($("#AddParameterDropdown").val()));
                    });

                    $('#AddParameterModal').modal('hide');
                    //console.debug(availableParameters);
                    AddParamtersToParameterTable(availableParameters);
                });

            $(document)
                .on('click', "button[name='btnAddParamsFromGroup']", function() {
                    var alreadyAddedParameterIds = [];

                    $('#ParameterTable')
                        .DataTable()
                        .rows()
                        .every(function() {
                            var d = this.data();
                            //console.debug(d);
                            var cell = d[0];
                            var paramId = $('input', cell)['prevObject'][0].id
                                .replace('sampleResultId_', '');
                            alreadyAddedParameterIds.push(parseInt(paramId));
                        });

                    //console.debug("alreadyAddedParameterIds : " + alreadyAddedParameterIds);

                    var strGroupParameterIds = $('#ParameterGroupTable')
                        .DataTable()
                        .row($(this).parents('tr'))
                        .data();
                    var groupParameterIds = [];

                    $.each(strGroupParameterIds[3].split(','), function(index, value) {
                        groupParameterIds.push(parseInt(value));
                    });

                    //console.debug(groupParameterIds);
                    var allParameters = $.parseJSON($("#AllParameters").val());

                    var availableParameters = $.grep(allParameters, function(obj) {
                        //The $.inArray() method is similar to JavaScript's native .indexOf() method in that it returns -1 when it doesn't find a match.
                        return ($.inArray(obj.Id, alreadyAddedParameterIds) === -1)
                            && ($.inArray(obj.Id, groupParameterIds) !== -1);
                    });

                    //console.debug("allParameters :" + allParameters);
                    //console.debug("availableParameters :" + availableParameters);

                    AddParamtersToParameterTable(availableParameters);
                });

            AddParamtersToParameterTable = function(availableParameters) {
                var parameterTable = $('#ParameterTable').DataTable();

                $.each(availableParameters, function(index, value) {
                    //console.debug(value.Id + " : " + value.Name);
                    var data = {};
                    data[0] = "<input id='sampleResultId_" + value.Id + "' type='hidden' value=''  autocomplete='false' >";
                    data[1] = value.Name;

                    var availableResultQualifierValidValues =
                        @Html.Raw(value:Json.Encode(value:Model.AvailableResultQualifierValidValues));

                    var qualifierCtrl =
                        '<select class="form-control input-sm no-margin no-padding onchange-calc-compliance" id="Qualifier_'
                            + value.Id
                            + '" style="width: 100%">';

                    $.each(availableResultQualifierValidValues, function(i, v) {
                        if (v.Value === "NUMERIC") {
                            qualifierCtrl += '<option value="'
                                + v.Value
                                + '" selected="">'
                                + v.Text
                                + '</option>';
                        } else {
                            qualifierCtrl +=
                                '<option value="' + v.Value + '">' + v.Text + '</option>';
                        }
                    });
                    qualifierCtrl += '</select>';

                    data[2] = qualifierCtrl;

                    data[3] = $("#unitsAndResultComplianceTemplate") //using regex replace to get ALL occurances within a string (hence the "/g")
                        .html()
                        .replace(/{{parameterId}}/g, value.Id)
                        .replace(/{{unitId}}/g, value.DefaultUnitId)
                        .replace(/{{unitName}}/g, value.DefaultUnitName)
                        .replace(/{{complianceIconAndMessage}}/g, "");

                    data[4] = '<input class="form-control input-sm" id="MDL_'
                        + value.Id
                        + '" type="text" style="width: 80px" value="" autocomplete="false">';
                    data[5] = '<input class="form-control input-sm" id="AnalysisMethod_'
                        + value.Id
                        + '" type="text" value="" autocomplete="false">';
                    data[6] = '<input id="AnalysisDateTime_'
                        + value.Id
                        + '" style="width: 100%; font-size: 12px;"'
                        + 'autocomplete="false" />';
                    data[7] =
                        '<input type="checkbox" class="checkbox" id="EPAMethod_'
                        + value.Id
                        + '"/>';

                    if (value.IsCalcMassLoading) {
                        data[8] =
                            '<input type="checkbox" class="checkbox" name="CkCalcLoading" id="CalcLoading_'
                            + value.Id
                            + '" checked />';
                    } else {
                        data[8] =
                            '<input type="checkbox" class="checkbox" name="CkCalcLoading" id="CalcLoading_'
                            + value.Id
                            + '"/>';
                    }
                    data[9] = '<input id="MassResultId_' + value.Id + '" type="hidden" value="" />';
                    data[10] = $("#massResultAndComplianceTemplate") //using regex replace to get ALL occurances within a string (hence the "/g")
                        .html()
                        .replace(/{{parameterId}}/g, value.Id);
                    data[11] = null;

                    //console.debug("data : " + data);

                    var rowNode = parameterTable
                        .row.add(data)
                        .draw()
                        .node();

                    $(rowNode).css('color', 'green');

                    displayConcentrationCompliance(value.Id);
                    displayMassLoadingCompliance(value.Id);
                });

                // need to reinitialize iCheck otherwise newly added checkbox doesn't work
                $("input[id^='EPAMethod_']")
                    .iCheck({
                        checkboxClass: "icheckbox_minimal-blue"
                    });

                $("input[id^='CalcLoading_']")
                    .iCheck({
                        checkboxClass: "icheckbox_minimal-blue"
                    });

                $("input[id^='AnalysisDateTime_']")
                    .kendoDateTimePicker({ format: "MM/dd/yyyy hh:mm tt", max: new Date($.now()) });

                $("input[id^='Result_']").inputmask('decimal', { digits: '16', rightAlign: true });
                $("input[id^='MDL_']").inputmask('decimal', { digits: '16', rightAlign: true });
                $("input[id^='AnalysisDateTime_']")
                    .inputmask({
                        alias: 'mm/dd/yyyy hh:mm xm',
                        mask: "1/2/y [h:s t\\m]",
                        placeholder: "mm/dd/yyyy 00:00 am",
                        greedy: false,
                        clearMaskOnLostFocus: false,
                        clearIncomplete: true
                    });
            };

            $("#StartDateTimeLocal")
                .on("blur", function() {
                    $("#StartDateTimeLocal").trigger('change');
                });

            $("#StartDateTimeLocal")
                .on("change", function() {
                    $("#StartDateTimeLocal").data("kendoDateTimePicker").value(kendo.parseDate($("#StartDateTimeLocal").val(), ["MM/dd/yyyy hh:mm tt", "MM/dd/yyyy"]));
                    $("#StartDateTimeLocal").val($("#StartDateTimeLocal").val().toLowerCase().replace("12:00 am", ""));
                });

            $("#EndDateTimeLocal")
                .on("blur", function() {
                    $("#EndDateTimeLocal").trigger('change');
                });

            $("#EndDateTimeLocal")
                .on("change", function() {
                    $("#EndDateTimeLocal").data("kendoDateTimePicker").value(kendo.parseDate($("#EndDateTimeLocal").val(), ["MM/dd/yyyy hh:mm tt", "MM/dd/yyyy"]));
                    $("#EndDateTimeLocal").val($("#EndDateTimeLocal").val().toLowerCase().replace("12:00 am", ""));

                    var viewModel = {};
                    viewModel.monitoringPointId = $('#MonitoringPointId').val();
                    viewModel.endDateTime = $('#EndDateTimeLocal').val();

                    var postUrl =
                        "@Url.Action(actionName:"GetParameterGroupsForSample", controllerName:"Industry")";

                    $.ajax({
                        type: "POST",
                        url: postUrl,
                        data: viewModel,
                        success: function(response) {
                            if (response.hasError != null && response.hasError) {
                                alert(response.message);
                            } else {
                                $("#AllParameters").val(JSON.stringify(response.allParameters));
                                var parameterGroups = response.parameterGroups;

                                var table = $('#ParameterGroupTable').DataTable();

                                table
                                    .clear()
                                    .draw();

                                $.each(parameterGroups, function(index, value) {
                                    var data = {};
                                    data[0] = value.Id;
                                    data[1] = value.Name;
                                    data[2] = value.Description;
                                    data[3] = value.ParameterIds;
                                    data[4] = null;

                                    //console.debug("data : " + data);

                                    var rowNode = table
                                        .row.add(data)
                                        .draw()
                                        .node();

                                    $(rowNode).css('color', 'green');
                                });

                                $("input[id^='Result_']")
                                    .each(function() {
                                        var paramId = this.id.replace('Result_', '');
                                        displayConcentrationCompliance(paramId);
                                        displayMassLoadingCompliance(paramId);
                                    });
                            }
                        }
                        //, error: function()
                        //    {}
                    });
                });


        </script>
    }

    <script>
        $(document)
            .ready(function() {
                $("#StartDateTimeLocal").val($("#StartDateTimeLocal").val().toLowerCase().replace("12:00 am", ""));
                $("#EndDateTimeLocal").val($("#EndDateTimeLocal").val().toLowerCase().replace("12:00 am", ""));

                $("input[id^='AnalysisDateTime_']")
                    .each(function() {
                        var value = $(this).val().toLowerCase().replace("12:00 am", "");
                        $(this).val(value);
                    });

                //display compliance information for already saved results
                $("input[id^='Result_']")
                    .each(function() {
                        var paramId = this.id.replace('Result_', '');
                        displayConcentrationCompliance(paramId);
                        displayMassLoadingCompliance(paramId);
                    });

                disableAutoComplete();
            });
    </script>

    <script>

        function displayConcentrationCompliance(parameterId) {
            var qualifier = $("#Qualifier_" + parameterId).val();
            var result = $("#Result_" + parameterId).val();

            var concentrationMaxValue = null;
            var concentrationMinValue = null;

            //find limit from global parameter JSON blob
            var allParameters = $.parseJSON($("#AllParameters").val());
            var foundParameters = $.grep(allParameters, function(e) {
                return e.Id == parameterId;
            });
            if (foundParameters.length == 0) {
                // parameter with that Id not found
                alert('ERROR: could not find parameter with Id = ' + parameterId);
            } else if (foundParameters.length == 1) {
                concentrationMaxValue = foundParameters[0].ConcentrationMaxValue;
                concentrationMinValue = foundParameters[0].ConcentrationMinValue;
            } else {
                // multiple matching parameters found
                alert('ERROR: found ' + foundParameters.length + ' parameters with Id = ' + parameterId);
            }

            var complianceIconAndMessage = "";
            var complianceTemplateToDisplay;
            //If a limit exists at all, there will always be a max value. Optionally a min value could exist as well.
            if (concentrationMaxValue != null) {
                if (concentrationMinValue != null) {
                    //range limit
                    if (qualifier != "ND"
                        && qualifier != "NF"
                        && !isEmptyOrSpaces(result)
                        && (result > concentrationMaxValue || result < concentrationMinValue)) {
                        complianceTemplateToDisplay = "#bad-outsideRangeComplianceIconAndMessage";
                    } else {
                        complianceTemplateToDisplay = "#goodComplianceIconAndMessage";
                    }
                } else {
                    //max limit only
                    if (qualifier != "ND"
                        && qualifier != "NF"
                        && !isEmptyOrSpaces(result)
                        && result > concentrationMaxValue) {
                        complianceTemplateToDisplay = "#bad-aboveMaxComplianceIconAndMessage";
                    } else {
                        complianceTemplateToDisplay = "#goodComplianceIconAndMessage";
                    }
                }
            } else {
                //no limits
                complianceTemplateToDisplay = "#unknownComplianceIconAndMessage";
            }

            complianceIconAndMessage = $(complianceTemplateToDisplay)
                .html()
                .replace("{{parameterName}}", foundParameters[0].Name)
                .replace("{{resultValue}}", result)
                .replace("{{maxLimit}}", concentrationMaxValue);

            $("#ResultCompliance_" + parameterId).html(complianceIconAndMessage);

            //alert('Calculate compliance using qualifier = ' + qualifier + ' and result = ' + result + ' and max value = ' + concentrationMaxValue + '!');
        }

        function displayMassLoadingCompliance(paramId) {
            //if not calculating mass loading, do not display a mass compliance badge
            var clChecked = $("#CalcLoading_" + paramId).iCheck('update')[0].checked;
            if (!clChecked) {
                $("#MassResultCompliance_" + paramId).html("");
                return;
            }

            var massLoadingValue = getMassLoadingValue(paramId);
            var qualifier = $("#Qualifier_" + paramId).val();
            var massLoadingMaxValue = null;
            var massLoadingMinValue = null;

            //find limit from global parameter JSON blob
            var allParameters = $.parseJSON($("#AllParameters").val());
            var foundParameters = $.grep(allParameters, function(e) {
                return e.Id == paramId;
            });
            if (foundParameters.length == 0) {
                // parameter with that Id not found
                alert('ERROR: could not find parameter with Id = ' + paramId);
            } else if (foundParameters.length == 1) {
                massLoadingMaxValue = foundParameters[0].MassLoadingMaxValue;
                massLoadingMinValue = foundParameters[0].MassLoadingMinValue;
            } else {
                // multiple matching parameters found
                alert('ERROR: found ' + foundParameters.length + ' parameters with Id = ' + paramId);
            }

            var complianceIconAndMessage = "";
            var complianceTemplateToDisplay;
            //If a limit exists at all, there will always be a max value. Optionally a min value could exist as well.
            if (massLoadingMaxValue != null) {
                if (massLoadingMinValue != null) {
                    //range limit
                    if (qualifier != "ND"
                        && qualifier != "NF"
                        && (massLoadingValue > massLoadingMaxValue || massLoadingValue < massLoadingMinValue)) {
                        complianceTemplateToDisplay = "#bad-outsideRangeComplianceIconAndMessage";
                    } else {
                        complianceTemplateToDisplay = "#goodComplianceIconAndMessage";
                    }
                } else {
                    //max limit only
                    if (qualifier != "ND"
                        && qualifier != "NF"
                        && massLoadingValue > massLoadingMaxValue) {
                        complianceTemplateToDisplay = "#bad-aboveMaxComplianceIconAndMessage";
                    } else {
                        complianceTemplateToDisplay = "#goodComplianceIconAndMessage";
                    }
                }
            } else {
                //no limits
                complianceTemplateToDisplay = "#unknownComplianceIconAndMessage";
            }

            complianceIconAndMessage = $(complianceTemplateToDisplay)
                .html()
                .replace("{{parameterName}}", foundParameters[0].Name)
                .replace("{{resultValue}}", massLoadingValue)
                .replace("{{minLimit}}", massLoadingMinValue)
                .replace("{{maxLimit}}", massLoadingMaxValue);

            $("#MassResultCompliance_" + paramId).html(complianceIconAndMessage);

            //alert("Comparing mass loading value = '" + massLoadingValue + "' to min ='" + massLoadingMinValue + "' and max = '"  + massLoadingMaxValue + "'");
        }

        function getMassLoadingValue(paramId) {
            var result = parseFloat($("#Result_" + paramId).val());
            var sampleFlowResult = parseFloat($("#FlowValue").val());
            var massLoadingMultiplier = parseFloat($("#MassLoadingConversionFactorPounds").val());
            var flowUnitName = $("#FlowUnitId option:selected").text().toLowerCase();
            var flowUnitConversionFactor = flowUnitName === "mgd" ? 1 : 0.000001;
            var resultUnitName = $("#UnitName_" + paramId).html().toLowerCase();
            var resultUnitConversionFactor = resultUnitName === "mg/l" ? 1 : 0.001;

            var massLoadingValue = result
                * sampleFlowResult
                * massLoadingMultiplier
                * flowUnitConversionFactor
                * resultUnitConversionFactor;

            return massLoadingValue;
        }

    </script>

    <!-- html templates -->

    <script id="unitsAndResultComplianceTemplate" type="text/template">
        <span class="input-group input-group-sm" style="min-width:125px">
            <input class="form-control input-sm onchange-calc-compliance" id="Result_{{parameterId}}" type="text" value="" style="text-align: right;" autocomplete="false" />
            <input id="UnitId_{{parameterId}}" type="hidden" value="{{unitId}}" />
            <span id="UnitName_{{parameterId}}" class="input-group-addon">{{unitName}}</span>
            <span id="ResultCompliance_{{parameterId}}" class="input-group-addon">
                {{complianceIconAndMessage}}
            </span>
        </span>
    </script>

    <script id="goodComplianceIconAndMessage" type="text/template">
        <i class="fa fa-lg fa-check-circle" style="color: green" aria-hidden="true" data-placement="top" data-toggle="tooltip" title="" data-original-title="Results are in compliance."></i>
    </script>

    <script id="unknownComplianceIconAndMessage" type="text/template">
        <i class="fa fa-lg fa-exclamation-circle" style="color: orange" aria-hidden="true" data-placement="top" data-toggle="tooltip" title="Result compliance unknown. No limit was found."></i>
    </script>

    <script id="bad-aboveMaxComplianceIconAndMessage" type="text/template">
        <i class="fa fa-lg fa-exclamation-circle" style="color: red" aria-hidden="true" data-placement="top" data-toggle="tooltip" title="" data-original-title="{{parameterName}} result of {{resultValue}} exceeds limit of {{maxLimit}}."></i>
    </script>

    <script id="bad-outsideRangeComplianceIconAndMessage" type="text/template">
        <i class="fa fa-lg fa-exclamation-circle" style="color: red" aria-hidden="true" data-placement="top" data-toggle="tooltip" title="" data-original-title="{{parameterName}} result of {{resultValue}} is outside of range {{minLimit}} to {{maxLimit}}."></i>
    </script>

    <script id="massResultAndComplianceTemplate" type="text/template">
        <span style="float: right; white-space: nowrap;">
            <span>
                <strong id="MassResult_{{parameterId}}"></strong>
            </span>
            <span id="MassResultCompliance_{{parameterId}}">
                <i class="fa fa-lg fa-exclamation-circle" style="color:orange" aria-hidden="true" data-placement="top" data-toggle="tooltip" title="" data-original-title="Mass loading result compliance unknown. No limit was found."></i>
            </span>
        </span>
    </script>
}}