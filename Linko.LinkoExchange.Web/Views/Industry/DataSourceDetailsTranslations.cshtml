@using Linko.LinkoExchange.Core.Domain
@using Linko.LinkoExchange.Web.ViewModels.Industry
@using Linko.LinkoExchange.Web.ViewModels.Shared
@model DataSourceViewModel
@{
    ViewBag.Title = "Data Source Details Translations";
}


<section>
    <ol class="breadcrumb">
        <li>
            <a href="#" onclick="location.href = '@Url.Action(actionName:"Index", controllerName:"Industry")'"><i class=""></i> Home </a>
        </li>
        <li>
            <a href="#" onclick="location.href = '@Url.Action(actionName:"DataSources", controllerName:"Industry")'"><i class=""></i> Data Sources </a>
        </li>
        <li>
            <a href="#" onclick="location.href = '@Url.Action(actionName:"DataSourceDetails", controllerName:"Industry", routeValues: new
                                                        {
                                                            Id = Model.Id
                                                        })'">
                <i class=""></i> @Model.Name
            </a>
        </li>
        <li class="active">Translations</li>
    </ol>
</section>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="box box-primary">
        <div class="box-header with-border">
            <h3 class="box-title">Monitoring Point</h3>
            <div class="box-tools pull-right">
                <button class="btn btn-box-tool" data-widget="collapse">
                    <i class="fa fa-minus"></i>
                </button>
            </div>
        </div>

        <section class="box-body form-horizontal">
            <div class="form-group">
                <div class="col-md-12">
                    @* grid name should be start with grid for centralized error handling *@
                    @(Html.Kendo().Grid<DataSourceMonitoringPointTranslationViewModel>()
                          .Name(componentName: "gridDataSourceMonitoringPointTranslation")
                          .Columns(columns =>
                          {
                              columns.Bound(c => c.DataSourceTerm)
                                     .HtmlAttributes(attributes: new { @class = "col-sm-3" })
                                     .HeaderHtmlAttributes(attributes: new { @class = "col-sm-3" });
                              columns.Bound(c => c.MonitoringPoint)
                                     .ClientTemplate(value: "#= (MonitoringPoint==null)? '' : MonitoringPoint.DisplayName #")
                                     .HtmlAttributes(attributes: new { @class = "col-sm-6" })
                                     .HeaderHtmlAttributes(attributes: new { @class = "col-sm-6" });
                              columns.Command(command => { command.Edit(); command.Destroy(); });
                          })
                          .ToolBar(t => t.Create())
                          .Editable(editable => editable.Mode(mode: GridEditMode.InLine).ConfirmDelete("Confirm").DisplayDeleteConfirmation("Delete this Monitoring Point Translation?"))
                          .Pageable(pager => pager.Enabled(value:false))
                          .Scrollable(s => s.Enabled(value: false))
                          .Sortable(sortable => { sortable.SortMode(value: GridSortMode.MultipleColumn); })
                          .Resizable(resizable => resizable.Columns(value: true))
                          .NoRecords(text: "No Monitoring Point Translation exists.")
                          .DataSource(dataSource => dataSource
                                                        .Ajax()
                                                        .ServerOperation(enabled: false)
                                                        .Batch(enabled: false)
                                                        .Sort(sort => { sort.Add(memberName: "DataSourceTerm").Ascending(); })
                                                        .Create(create => create.Action(actionName: "DataSourceDetailsTranslations_Create", controllerName: "Industry"))
                                                        .Read(read => read.Action(actionName: "DataSourceDetailsTranslations_Read", controllerName: "Industry", routeValues: new
                                                        {
                                                            dataSourceId = Model.Id,
                                                            translationType = DataSourceTranslationType.MonitoringPoint
                                                        }))
                                                        .Update(update => update.Action(actionName: "DataSourceDetailsTranslations_Update", controllerName: "Industry"))
                                                        .Destroy(destroy => destroy.Action(actionName: "DataSourceDetailsTranslations_Destroy", controllerName: "Industry"))
                                                        .PageSize(pageSize: 100)
                                                        .Events(events => events.Error(handler: "error_handler.bind({gridId: '#gridAuthorityUnitTranslation'})"))
                                                        .Model(model =>
                                                        {
                                                            model.Id(p => p.Id);
                                                            model.Field(p => p.Id).Editable(enabled: false);
                                                            model.Field(p => p.DataSourceId).Editable(enabled: false).DefaultValue(Model.Id);
                                                            model.Field(p => p.TranslationType).Editable(enabled: false).DefaultValue(DataSourceTranslationType.MonitoringPoint);
                                                            model.Field(p => p.DataSourceTerm);
                                                            model.Field(p => p.MonitoringPoint).DefaultValue(ViewData[key: "defaultAuthorityMonitoringPoint"] as DropdownOptionViewModel);
                                                        })
                          ))
                </div>
            </div>
        </section>
    </div>

    <div class="box box-primary">
        <div class="box-header with-border">
            <h3 class="box-title">Collection Methods</h3>
            <div class="box-tools pull-right">
                <button class="btn btn-box-tool" data-widget="collapse">
                    <i class="fa fa-minus"></i>
                </button>
            </div>
        </div>

        <section class="box-body form-horizontal">
            <div class="form-group">
                <div class="col-md-12">
                    @* grid name should be start with grid for centralized error handling *@
                    @(Html.Kendo().Grid<DataSourceCollectionMethodTranslationViewModel>()
                          .Name(componentName: "gridDataSourceCollectionMethodTranslation")
                          .Columns(columns =>
                          {
                              columns.Bound(c => c.DataSourceTerm)
                                     .HtmlAttributes(attributes: new { @class = "col-sm-3" })
                                     .HeaderHtmlAttributes(attributes: new { @class = "col-sm-3" });
                              columns.Bound(c => c.CollectionMethod)
                                     .ClientTemplate(value: "#= (CollectionMethod==null)? '' : CollectionMethod.DisplayName #")
                                     .HtmlAttributes(attributes: new { @class = "col-sm-6" })
                                     .HeaderHtmlAttributes(attributes: new { @class = "col-sm-6" });
                              columns.Command(command => { command.Edit(); command.Destroy(); });
                          })
                          .ToolBar(t => t.Create())
                          .Editable(editable => editable.Mode(mode: GridEditMode.InLine).ConfirmDelete("Confirm").DisplayDeleteConfirmation("Delete this Collection Method Translation?"))
                          .Pageable(pager => pager.Enabled(value: false))
                          .Scrollable(s => s.Enabled(value: false))
                          .Sortable(sortable => { sortable.SortMode(value: GridSortMode.MultipleColumn); })
                          .Resizable(resizable => resizable.Columns(value: true))
                          .NoRecords(text: "No Collection Method Translation exists.")
                          .DataSource(dataSource => dataSource
                                                        .Ajax()
                                                        .ServerOperation(enabled: false)
                                                        .Batch(enabled: false)
                                                        .Sort(sort => { sort.Add(memberName: "DataSourceTerm").Ascending(); })
                                                        .Create(create => create.Action(actionName: "DataSourceDetailsTranslations_Create", controllerName: "Industry"))
                                                        .Read(read => read.Action(actionName: "DataSourceDetailsTranslations_Read", controllerName: "Industry", routeValues: new
                                                        {
                                                            dataSourceId = Model.Id,
                                                            translationType = DataSourceTranslationType.CollectionMethod
                                                        }))
                                                        .Update(update => update.Action(actionName: "DataSourceDetailsTranslations_Update", controllerName: "Industry"))
                                                        .Destroy(destroy => destroy.Action(actionName: "DataSourceDetailsTranslations_Destroy", controllerName: "Industry"))
                                                        .PageSize(pageSize: 100)
                                                        .Events(events => events.Error(handler: "error_handler.bind({gridId: '#gridAuthorityUnitTranslation'})"))
                                                        .Model(model =>
                                                        {
                                                            model.Id(p => p.Id);
                                                            model.Field(p => p.Id).Editable(enabled: false);
                                                            model.Field(p => p.DataSourceId).Editable(enabled: false).DefaultValue(Model.Id);
                                                            model.Field(p => p.TranslationType).Editable(enabled: false).DefaultValue(DataSourceTranslationType.CollectionMethod);
                                                            model.Field(p => p.DataSourceTerm);
                                                            model.Field(p => p.CollectionMethod).DefaultValue(ViewData[key: "defaultAuthorityCollectionMethod"] as DropdownOptionViewModel);
                                                        })
                          ))
                </div>
            </div>
        </section>
    </div>

    <div class="box box-primary">
        <div class="box-header with-border">
            <h3 class="box-title">Sample Types</h3>
            <div class="box-tools pull-right">
                <button class="btn btn-box-tool" data-widget="collapse">
                    <i class="fa fa-minus"></i>
                </button>
            </div>
        </div>

        <section class="box-body form-horizontal">
            <div class="form-group">
                <div class="col-md-12">
                    @* grid name should be start with grid for centralized error handling *@
                    @(Html.Kendo().Grid<DataSourceSampleTypeTranslationViewModel>()
                          .Name(componentName: "gridDataSourceSampleTypeTranslation")
                          .Columns(columns =>
                          {
                              columns.Bound(c => c.DataSourceTerm)
                                     .HtmlAttributes(attributes: new { @class = "col-sm-3" })
                                     .HeaderHtmlAttributes(attributes: new { @class = "col-sm-3" });
                              columns.Bound(c => c.SampleType)
                                     .ClientTemplate(value: "#= (SampleType==null)? '' : SampleType.DisplayName #")
                                     .HtmlAttributes(attributes: new { @class = "col-sm-6" })
                                     .HeaderHtmlAttributes(attributes: new { @class = "col-sm-6" });
                              columns.Command(command => { command.Edit(); command.Destroy(); });
                          })
                          .ToolBar(t => t.Create())
                          .Editable(editable => editable.Mode(mode: GridEditMode.InLine).ConfirmDelete("Confirm").DisplayDeleteConfirmation("Delete this Sample Type Translation?"))
                          .Pageable(pager => pager.Enabled(value: false))
                          .Scrollable(s => s.Enabled(value: false))
                          .Sortable(sortable => { sortable.SortMode(value: GridSortMode.MultipleColumn); })
                          .Resizable(resizable => resizable.Columns(value: true))
                          .NoRecords(text: "No Sample Type Translation exists.")
                          .DataSource(dataSource => dataSource
                                                        .Ajax()
                                                        .ServerOperation(enabled: false)
                                                        .Batch(enabled: false)
                                                        .Sort(sort => { sort.Add(memberName: "DataSourceTerm").Ascending(); })
                                                        .Create(create => create.Action(actionName: "DataSourceDetailsTranslations_Create", controllerName: "Industry"))
                                                        .Read(read => read.Action(actionName: "DataSourceDetailsTranslations_Read", controllerName: "Industry", routeValues: new
                                                        {
                                                            dataSourceId = Model.Id,
                                                            translationType = DataSourceTranslationType.SampleType
                                                        }))
                                                        .Update(update => update.Action(actionName: "DataSourceDetailsTranslations_Update", controllerName: "Industry"))
                                                        .Destroy(destroy => destroy.Action(actionName: "DataSourceDetailsTranslations_Destroy", controllerName: "Industry"))
                                                        .PageSize(pageSize: 100)
                                                        .Events(events => events.Error(handler: "error_handler.bind({gridId: '#gridAuthorityUnitTranslation'})"))
                                                        .Model(model =>
                                                        {
                                                            model.Id(p => p.Id);
                                                            model.Field(p => p.Id).Editable(enabled: false);
                                                            model.Field(p => p.DataSourceId).Editable(enabled: false).DefaultValue(Model.Id);
                                                            model.Field(p => p.TranslationType).Editable(enabled: false).DefaultValue(DataSourceTranslationType.SampleType);
                                                            model.Field(p => p.DataSourceTerm);
                                                            model.Field(p => p.SampleType).DefaultValue(ViewData[key: "defaultAuthoritySampleType"] as DropdownOptionViewModel);
                                                        })
                          ))
                </div>
            </div>
        </section>
    </div>

    <div class="box box-primary">
        <div class="box-header with-border">
            <h3 class="box-title">Parameters</h3>
            <div class="box-tools pull-right">
                <button class="btn btn-box-tool" data-widget="collapse">
                    <i class="fa fa-minus"></i>
                </button>
            </div>
        </div>

        <section class="box-body form-horizontal">
            <div class="form-group">
                <div class="col-md-12">
                    @* grid name should be start with grid for centralized error handling *@
                    @(Html.Kendo().Grid<DataSourceParameterTranslationViewModel>()
                          .Name(componentName: "gridDataSourceParameterTranslation")
                          .Columns(columns =>
                          {
                              columns.Bound(c => c.DataSourceTerm)
                                     .HtmlAttributes(attributes: new { @class = "col-sm-3" })
                                     .HeaderHtmlAttributes(attributes: new { @class = "col-sm-3" });
                              columns.Bound(c => c.Parameter)
                                     .ClientTemplate(value: "#= (Parameter==null)? '' : Parameter.DisplayName #")
                                     .HtmlAttributes(attributes: new { @class = "col-sm-6" })
                                     .HeaderHtmlAttributes(attributes: new { @class = "col-sm-6" });
                              columns.Command(command => { command.Edit(); command.Destroy(); });
                          })
                          .ToolBar(t => t.Create())
                          .Editable(editable => editable.Mode(mode: GridEditMode.InLine).ConfirmDelete("Confirm").DisplayDeleteConfirmation("Delete this Parameter Translation?"))
                          .Pageable(pager => pager.Enabled(value: false))
                          .Scrollable(s => s.Enabled(value: false))
                          .Sortable(sortable => { sortable.SortMode(value: GridSortMode.MultipleColumn); })
                          .Resizable(resizable => resizable.Columns(value: true))
                          .NoRecords(text: "No Parameter Translation exists.")
                          .DataSource(dataSource => dataSource
                                                        .Ajax()
                                                        .ServerOperation(enabled: false)
                                                        .Batch(enabled: false)
                                                        .Sort(sort => { sort.Add(memberName: "DataSourceTerm").Ascending(); })
                                                        .Create(create => create.Action(actionName: "DataSourceDetailsTranslations_Create", controllerName: "Industry"))
                                                        .Read(read => read.Action(actionName: "DataSourceDetailsTranslations_Read", controllerName: "Industry", routeValues: new
                                                        {
                                                            dataSourceId = Model.Id,
                                                            translationType = DataSourceTranslationType.Parameter
                                                        }))
                                                        .Update(update => update.Action(actionName: "DataSourceDetailsTranslations_Update", controllerName: "Industry"))
                                                        .Destroy(destroy => destroy.Action(actionName: "DataSourceDetailsTranslations_Destroy", controllerName: "Industry"))
                                                        .PageSize(pageSize: 100)
                                                        .Events(events => events.Error(handler: "error_handler.bind({gridId: '#gridAuthorityUnitTranslation'})"))
                                                        .Model(model =>
                                                        {
                                                            model.Id(p => p.Id);
                                                            model.Field(p => p.Id).Editable(enabled: false);
                                                            model.Field(p => p.DataSourceId).Editable(enabled: false).DefaultValue(Model.Id);
                                                            model.Field(p => p.TranslationType).Editable(enabled: false).DefaultValue(DataSourceTranslationType.Parameter);
                                                            model.Field(p => p.DataSourceTerm);
                                                            model.Field(p => p.Parameter).DefaultValue(ViewData[key: "defaultAuthorityParameter"] as DropdownOptionViewModel);
                                                        })
                          ))
                </div>
            </div>
        </section>
    </div>

    <div class="box box-primary">
        <div class="box-header with-border">
            <h3 class="box-title">Units</h3>
            <div class="box-tools pull-right">
                <button class="btn btn-box-tool" data-widget="collapse">
                    <i class="fa fa-minus"></i>
                </button>
            </div>
        </div>

        <section class="box-body form-horizontal">
            <div class="form-group">
                <div class="col-md-12">
                    @* grid name should be start with grid for centralized error handling *@
                    @(Html.Kendo().Grid<DataSourceUnitTranslationViewModel>()
                          .Name(componentName:"gridDataSourceUnitTranslation")
                          .Columns(columns =>
                          {
                              columns.Bound(c => c.DataSourceTerm)
                                     .HtmlAttributes(attributes:new {@class = "col-sm-3"})
                                     .HeaderHtmlAttributes(attributes:new {@class = "col-sm-3"});
                              columns.Bound(c => c.Unit)
                                     .ClientTemplate(value: "#= (Unit==null)? '' : Unit.DisplayName #")
                                     .HtmlAttributes(attributes: new { @class = "col-sm-6" })
                                     .HeaderHtmlAttributes(attributes: new { @class = "col-sm-6" });
                              columns.Command(command => { command.Edit(); command.Destroy(); });
                          })
                          .ToolBar(t => t.Create())
                          .Editable(editable => editable.Mode(mode:GridEditMode.InLine).ConfirmDelete("Confirm").DisplayDeleteConfirmation("Delete this Unit Translation?"))
                          .Pageable(pager => pager.Enabled(value: false))
                          .Scrollable(s => s.Enabled(value: false))
                          .Sortable(sortable => { sortable.SortMode(value:GridSortMode.MultipleColumn); })
                          .Resizable(resizable => resizable.Columns(value:true))
                          .NoRecords(text: "No Unit Translation exists.")
                          .DataSource(dataSource => dataSource
                                                        .Ajax()
                                                        .ServerOperation(enabled:false)
                                                        .Batch(enabled:false)
                                                        .Sort(sort => { sort.Add(memberName: "DataSourceTerm").Ascending(); })
                                                        .Create(create => create.Action(actionName:"DataSourceDetailsTranslations_Create", controllerName: "Industry"))
                                                        .Read(read => read.Action(actionName:"DataSourceDetailsTranslations_Read", controllerName:"Industry", routeValues:new
                                                        {
                                                            dataSourceId = Model.Id,
                                                            translationType = DataSourceTranslationType.Unit
                                                        }))
                                                        .Update(update => update.Action(actionName:"DataSourceDetailsTranslations_Update", controllerName:"Industry"))
                                                        .Destroy(destroy => destroy.Action(actionName:"DataSourceDetailsTranslations_Destroy", controllerName:"Industry"))
                                                        .PageSize(pageSize:100)
                                                        .Events(events => events.Error(handler:"error_handler.bind({gridId: '#gridAuthorityUnitTranslation'})"))
                                                        .Model(model =>
                                                        {
                                                            model.Id(p => p.Id);
                                                            model.Field(p => p.Id).Editable(enabled:false);
                                                            model.Field(p => p.DataSourceId).Editable(enabled: false).DefaultValue(Model.Id);
                                                            model.Field(p => p.TranslationType).Editable(enabled:false).DefaultValue(DataSourceTranslationType.Unit);
                                                            model.Field(p => p.DataSourceTerm);
                                                            model.Field(p => p.Unit).DefaultValue(ViewData[key: "defaultAuthorityUnit"] as DropdownOptionViewModel);
                                                        })
                          ))
                </div>
            </div>
        </section>
    </div>
}
