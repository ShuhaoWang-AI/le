@using Linko.LinkoExchange.Web.ViewModels.Industry
@using Linko.LinkoExchange.Web.ViewModels.Shared
<section>
    <ol class="breadcrumb">
        <li>
            <a href="#" onclick="location.href = '@Url.Action(actionName:"Index", controllerName:"Home")'"><i class=""></i> Home </a>
        </li>
        <li class="active">Users</li>
    </ol>
</section>
<div class="box box-primary">
    <div class="box-header with-border">
        <h3 class="box-title">Users</h3>
        <div class="box-tools pull-right">
            <button class="btn btn-box-tool" data-widget="collapse">
                <i class="fa fa-minus"></i>
            </button>
        </div>
    </div> @*.box-header*@
    <section class="box-body form-horizontal">
        @Html.ValidationSummary(excludePropertyErrors:true, message:Message.ValidationSummaryHeaderText, htmlAttributes:new {@class = "alert alert-info"})
        <div>
            @{
                var vm = new ConfirmationMessageViewModal
                         {
                             ShowMessage = TempData[key:"DeleteUserSucceed"] != null && (bool) TempData[key:"DeleteUserSucceed"],
                             Messaage = "User Removed!"
                         };

                @Html.Partial(partialViewName:"_ConfirmationMessageView", model:vm)
            }
        </div>
        <div class="form-group">
            <div class="col-md-12">
                @* grid name should be start with grid for centralized error handling *@
                @(Html.Kendo().Grid<IndustryUserViewModel>()
                      .Name(componentName:"gridUser")
                      .Columns(columns =>
                               {
                                   columns.Bound(c => c.FirstName)
                                          .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators:false).Operator(defaultOperator:"contains").SuggestionOperator(filterType:FilterType.Contains)));
                                   columns.Bound(c => c.LastName)
                                          .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators:false).Operator(defaultOperator:"contains").SuggestionOperator(filterType:FilterType.Contains)));
                                   columns.Bound(c => c.PhoneNumber)
                                          .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators:false).Operator(defaultOperator:"contains").SuggestionOperator(filterType:FilterType.Contains)));
                                   columns.Bound(c => c.Email)
                                          .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators:false).Operator(defaultOperator:"contains").SuggestionOperator(filterType:FilterType.Contains)));
                                   columns.Bound(c => c.DateRegistered).Format(value:"{0:MM/dd/yyyy}")
                                          .Filterable(ftb => ftb.Enabled(value:true).Extra(value:true));
                                   columns.Bound(c => c.StatusText)
                                          .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators:false).Operator(defaultOperator:"contains").SuggestionOperator(filterType:FilterType.Contains)));
                                   columns.Bound(c => c.AccountLockedText)
                                          .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators:false).Operator(defaultOperator:"contains").SuggestionOperator(filterType:FilterType.Contains)));
                                   columns.Template(m => { })
                                          .ClientTemplate(value:"<div class='fa fa-chevron-right pull-right'></div>")
                                          .Width(pixelWidth:60);
                               })
                      .Pageable(pageable => pageable
                                                .PageSizes(enabled:true)
                                                .Refresh(enabled:true)
                                                .Input(enabled:true)
                                                .Numeric(enabled:false)
                      )
                      .Selectable(selectable =>
                                  {
                                      selectable.Mode(mode:GridSelectionMode.Single);
                                      selectable.Type(type:GridSelectionType.Row);
                                  })
                      .Sortable(sortable => { sortable.SortMode(value:GridSortMode.MultipleColumn); })

                      //.Filterable(filterable => filterable.Enabled(value: false).Mode(GridFilterMode.Row))
                      .Resizable(resizable => resizable.Columns(value:true))
                      .Scrollable(s => s.Height(value:"auto"))
                      .NoRecords(text:"No user exists.")
                      .Events(events => { events.Change(handler:"gotoNextPage"); })
                      .DataSource(dataSource => dataSource
                                                    .Ajax()
                                                    .ServerOperation(enabled:true)
                                                    .Batch(enabled:true)
                                                    .Sort(sort =>
                                                          {
                                                              sort.Add(memberName:"FirstName").Ascending();
                                                              sort.Add(memberName:"LastName").Ascending();
                                                          }) // <-- initial sort expression
                                                    .Read(read => read.Action(actionName:"IndustryUsers_Read", controllerName:"Industry"))
                                                    .PageSize(pageSize:10)
                                                    .Events(events => events.Error(handler:"error_handler.bind({gridId: '#gridUser'})"))
                      )
                      )
            </div>
        </div>
    </section>
</div>

<div class="box box-primary">
    <div class="box-header with-border">
        <h3 class="box-title">Pending Invitations</h3>
        <div class="box-tools pull-right">
            @if (ViewBag.CanInvite)
            {
                @Html.ActionLink(linkText:"Invite", actionName:"Invite", controllerName:"Invite", routeValues:null, htmlAttributes:new {@class = "btn btn-sm btn-primary"})
                <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
            }
            <button class="btn btn-box-tool" data-widget="collapse">
                <i class="fa fa-minus"></i>
            </button>
        </div>
    </div> @*.box-header*@
    <section class="box-body form-horizontal">
        @Html.ValidationSummary(excludePropertyErrors:true, message:Message.ValidationSummaryHeaderText, htmlAttributes:new {@class = "alert alert-info"})
        <div>
            @{
                vm = new ConfirmationMessageViewModal
                     {
                         ShowMessage = TempData[key:"InivteSendSucceed"] != null && (bool) TempData[key:"InivteSendSucceed"],
                         Messaage = "An invitation has been sent."
                     };

                @Html.Partial(partialViewName:"_ConfirmationMessageView", model:vm)
            }
        </div>
        <div class="form-group">
            <div class="col-md-12">
                @* grid name should be start with grid for centralized error handling *@
                @(Html.Kendo().Grid<PendingInvitationViewModel>()
                      .Name(componentName:"gridPendingInvitation")
                      .Columns(columns =>
                               {
                                   columns.Bound(c => c.FirstName);
                                   columns.Bound(c => c.LastName);
                                   columns.Bound(c => c.Email);
                                   columns.Bound(c => c.DateInvited).Format(value:"{0:MM/dd/yyyy hh:mm tt}");
                                   columns.Bound(c => c.InviteExpires).Format(value:"{0:MM/dd/yyyy hh:mm tt}");
                                   columns.Command(c =>
                                                   {
                                                       c.Custom(name:" ").HtmlAttributes(attributes:new
                                                                                                    {
                                                                                                        @class = "k-grid-destroy k-icon k-i-close k-delete k-button ",
                                                                                                        type = "text"
                                                                                                    })
                                                        .Click(handler:"confirmDelete");
                                                   }).Width(pixelWidth:100);
                               })
                      .Pageable(pageable => pageable
                                                .PageSizes(enabled:true)
                                                .Refresh(enabled:true)
                                                .Input(enabled:true)
                                                .Numeric(enabled:false)
                      )
                      .Sortable(sortable => { sortable.SortMode(value:GridSortMode.MultipleColumn); })

                      //.Filterable(filterable => filterable.Enabled(value: false))
                      .Resizable(resizable => resizable.Columns(value:true))
                      .Scrollable(s => s.Height(value:"auto"))
                      .NoRecords(text:"No pending invitation exists.")
                      .Editable(s => s.DisplayDeleteConfirmation(value:false))
                      .DataSource(dataSource => dataSource
                                                    .Ajax()
                                                    .ServerOperation(enabled:false)
                                                    .Batch(enabled:true)
                                                    .Model(model =>
                                                           {
                                                               model.Id(m => m.Id);
                                                               model.Field(m => m.FirstName);
                                                               model.Field(m => m.LastName);
                                                               model.Field(m => m.Email);
                                                               model.Field(m => m.DateInvited);
                                                               model.Field(m => m.InviteExpires);
                                                           })
                                                    .Sort(sort => sort.Add(memberName:"DateInvited").Ascending()) // <-- initial sort expression
                                                    .Read(read => read.Action(actionName:"IndustryUsers_PendingInvitations_Read", controllerName:"Industry"))
                                                    .Destroy(d => d.Action(actionName:"IndustryUsers_PendingInvitations_Delete", controllerName:"Industry"))
                                                    .PageSize(pageSize:10)
                                                    .Events(events => events.Error(handler:"error_handler.bind({gridId: '#gridPendingInvitation'})").RequestEnd(handler:"onRequestEnd"))
                      )
                      )
            </div>
        </div>
    </section>
</div>

<div aria-labelledby="Delete Pending Invitation" class="col-md-12 fade modal modal-info" id="DeletePendingInvitationModal" role="dialog" tabindex="-1">
    <div class="modal-dialog" role="document">
        <div class="alert alert-dismissible alert-info modal-content">
            <button aria-label="Close" class="close" data-dismiss="modal" type="button">&times;</button>
            <h4 class="box-title">Delete Pending Invitation</h4>
            <div class="form-horizontal">
                <p>
                    Are you sure to delete this pending invitation?
                </p>
                <div class="form-group">
                    <div class="pull-right">
                        <button aria-label="Yes" class="btn btn-primary btn-sm" id="DeletePendingInvitationModalYesDelete" type="button" value="Yes">Yes</button>
                        <button aria-label="Close" class="btn btn-primary btn-sm" data-dismiss="modal" id="DeletePendingInvitationModalCancelDelete" type="button">No</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render(paths:"~/bundles/pendingInvitations")
    <script type="text/javascript">
        gotoNextPage = function()
        {
            var grid = $("#gridUser").data("kendoGrid");
            var postUrl = "@Url.Action(actionName:"IndustryUsers_Select", controllerName:"Industry")";

            doAjaxAction(grid, postUrl, "", "Select an user");
        };

    </script>
}