@using Linko.LinkoExchange.Web.ViewModels.Authority

<style>
    .k-grid-content {
        min-height:50px;
    }
</style> 

<section>
    <ol class="breadcrumb">
        <li>
            <a href="#" onclick="location.href = '@Url.Action(actionName:"Index", controllerName:"Authority")'"><i class=""></i> Home </a>
        </li>
        <li class="active">Users</li>
    </ol>
</section>
<div class="box box-primary">
    <div class="box-header with-border">
        <h3 class="box-title">Users</h3>
        <div class="box-tools pull-right">
            <button class="btn btn-box-tool" data-widget="collapse">
                <i class="fa fa-minus"></i>
            </button>
        </div>
    </div>
    <section class="box-body form-horizontal">
        @Html.ValidationSummary(excludePropertyErrors:true, message:Message.ValidationSummaryHeaderText, htmlAttributes:new
                                                                                                                        {
                                                                                                                            @class = "alert alert-info"
                                                                                                                        })
        <div class="form-group">
            <div class="col-md-12">
                @* grid name should be start with grid for centralized error handling *@
                @(Html.Kendo().Grid<AuthorityUserViewModel>()
                      .Name(componentName:"gridUser")
                      .Columns(columns =>
                               {
                                   columns.Bound(c => c.FirstName)
                                          .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators:false).Operator(defaultOperator:"contains").SuggestionOperator(filterType:FilterType.Contains)));
                                   columns.Bound(c => c.LastName)
                                          .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators:false).Operator(defaultOperator:"contains").SuggestionOperator(filterType:FilterType.Contains)));
                                   columns.Bound(c => c.PhoneNumber)
                                          .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators:false).Operator(defaultOperator:"contains").SuggestionOperator(filterType:FilterType.Contains)));
                                   columns.Bound(c => c.Email)
                                          .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators:false).Operator(defaultOperator:"contains").SuggestionOperator(filterType:FilterType.Contains)));
                                   columns.Bound(c => c.DateRegistered).Format(value:"{0:MM/dd/yyyy}")
                                          .Filterable(ftb => ftb.Enabled(value:true).Extra(value:true));
                                   columns.Bound(c => c.StatusText)
                                          .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators:false).Operator(defaultOperator:"contains").SuggestionOperator(filterType:FilterType.Contains)));
                                   columns.Bound(c => c.AccountLockedText)
                                          .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators:false).Operator(defaultOperator:"contains").SuggestionOperator(filterType:FilterType.Contains)));
                                   columns.Template(m => { })
                                          .ClientTemplate(value:"<div class='fa fa-chevron-right pull-right'></div>")
                                          .Width(pixelWidth:60);
                               })
                      .Pageable(pageable => pageable
                                                .PageSizes(enabled:true)
                                                .Refresh(enabled:true)
                                                .Input(enabled:true)
                                                .Numeric(enabled:false)
                      )
                      .Selectable(selectable =>
                                  {
                                      selectable.Mode(mode:GridSelectionMode.Single);
                                      selectable.Type(type:GridSelectionType.Row);
                                  })
                      .Sortable(sortable => { sortable.SortMode(value:GridSortMode.MultipleColumn); })
                      // .Filterable(filterable => filterable.Enabled(value: false).Mode(GridFilterMode.Row))
                      .Resizable(resizable => resizable.Columns(value:true))
                      .Scrollable(s => s.Height(value:"auto"))
                      .NoRecords(text:"No users exist.")
                      .Events(events => { events.Change(handler:"gotoNextPage"); })
                      .DataSource(dataSource => dataSource
                                                    .Ajax()
                                                    .ServerOperation(enabled:true)
                                                    .Batch(enabled:true)
                                                    .Sort(sort =>
                                                          {
                                                              sort.Add(memberName:"FirstName").Ascending();
                                                              sort.Add(memberName:"LastName").Ascending();
                                                          }) // <-- initial sort expression
                                                    .Read(read => read.Action(actionName:"AuthorityUsers_Read", controllerName:"Authority"))
                                                    .PageSize(pageSize:10)
                                                    .Events(events => events.Error(handler:"error_handler"))
                      )
                      )
            </div>
        </div>
    </section>
</div>

<div class="box box-primary">
    <div class="box-header with-border">
        <h3 class="box-title">Pending Invitations</h3>
        <div class="box-tools pull-right">

            @if (ViewBag.CanInvite)
            {
                @Html.RouteLink(linkText:"Invite", routeName:"AuthorityInvitesAuthorityUser", routeValues:null, htmlAttributes:new {@class = "btn btn-sm btn-primary"})
                <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
            }
            <button class="btn btn-box-tool" data-widget="collapse">
                <i class="fa fa-minus"></i>
            </button>
        </div>
    </div>
    <section class="box-body form-horizontal">
        @Html.ValidationSummary(excludePropertyErrors:true, message:Message.ValidationSummaryHeaderText, htmlAttributes:new
                                                                                                                        {
                                                                                                                            @class = "alert alert-info"
                                                                                                                        })

        <div class="form-group">
            <div class="col-md-12">
                <div id="pendingInvitationGrid"></div> 
            </div>    
        </div>
    </section>
</div>

<div aria-labelledby="Delete Pending Invitation" class="col-md-12 fade modal modal-info" id="DeletePendingInvitationModal" role="dialog" tabindex="-1">
    <div class="modal-dialog" role="document">
        <div class="alert alert-dismissible alert-info modal-content">
            <button aria-label="Close" class="close" data-dismiss="modal" type="button">&times;</button>
            <h4 class="box-title">Delete Pending Invitaton</h4>
            <div class="form-horizontal">
                <p>
                    Are you sure to delete this pending invitation?
                </p>
                <div class="form-group">
                    <div class="pull-right">
                        <button aria-label="Yes" class="btn btn-primary btn-sm" value="Yes" id="YesDelete" type="button">Yes</button>
                        <button aria-label="Close" class="btn btn-primary btn-sm" id="CancelDelete" data-dismiss="modal" type="button">No</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div aria-labelledby="Delete Pending Invitation Result" class="col-md-12 fade modal modal-info" id="DeletePendingInvitationResultModal" role="dialog" tabindex="-1">
    <div class="modal-dialog" role="document">
        <div class="alert alert-dismissible alert-info modal-content">
            <button aria-label="Close" class="close" data-dismiss="modal" type="button">&times;</button>
            <h4 class="box-title">Delete Pending Invitaton</h4>
            <div class="form-horizontal">
                <p>
                    <div id="message"></div>
                    <div class="form-group">
                        <div class="pull-right">
                            <button aria-label="Close" class="btn btn-primary btn-sm" data-dismiss="modal" type="button">Close</button>
                        </div>
                    </div>
                </p>
            </div>
        </div>
    </div>
</div> 

<div id="loading" class="k-loading-mask" style="width:100%;height:100%">
    <span class="k-loading-text">Loading...</span>
    <div class="k-loading-image"><div class="k-loading-color"></div></div>
</div>

@section Scripts { 
    @Scripts.Render(paths: "~/bundles/pendingInvitations") 
    <script type="text/javascript">
        
        function gotoNextPage() {

            var grid = $("#gridUser").data("kendoGrid");
            var postUrl = "@Url.Action(actionName:"AuthorityUsers_Select", controllerName:"Authority")";

            doAjaxAction(grid, postUrl, "", "Select an user");
        };

        var readUrl = "@Url.Action(actionName: "AuthorityUsers_PendingInvitations_Read", controllerName:"Authority")";
        var deleteUrl = "@Url.Action(actionName: "AuthorityUsers_PendingInvitations_Delete", controllerName:"Authority")";

        $(document).ready(pendingInvitationGridOp(readUrl, deleteUrl));

    </script> 
}