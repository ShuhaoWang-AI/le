@using Linko.LinkoExchange.Web.ViewModels.Authority
@{
    ViewBag.Title = "Industries";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <section class="">
        <ol class="breadcrumb">
            <li>
                <a href="#" onclick="location.href = '@Url.Action(actionName:"Index", controllerName:"Authority")'"><i class=""></i> Home </a>
            </li>
            <li class="active">Industries</li>
        </ol>
    </section>
    <div class="box box-primary">
        <section class="box-body form-horizontal">
            <div class="form-group">
                <div class="col-md-1 col-sm-3">
                    <input checked="checked" class="onoffswitch" data-off-text="Basic" data-on-text="Advanced" name="onOffSwitchSearchControl" type="checkbox" />
                </div>
                <div class="col-sm-1">
                </div>
                <div class="col-sm-6" id="basicSearch">
                    <div class="input-group">
                        <input type="search" name="SearchString" id="searchString" value="@ViewBag.SearchString" class="form-control single-line text-box" placeholder="Search for Industry Number, Industry Name, Address">
                        <div class="input-group-btn">
                            <button class="btn btn-primary" type="submit">
                                <i class="glyphicon glyphicon-search"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                @* grid name should be start with grid for centralized error handling *@
                @(Html.Kendo().Grid<IndustryViewModel>()
                      .Name(componentName:"grid")
                      .Columns(columns =>
                               {
                                   columns.Bound(c => c.ReferenceNumber)
                                          .HtmlAttributes(attributes:new {@class = "col-sm-1"})
                                          .HeaderHtmlAttributes(attributes:new {@class = "col-sm-1"})
                                          .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators:false).Operator(defaultOperator:"contains").SuggestionOperator(filterType:FilterType.Contains)));
                                   columns.Bound(c => c.IndustryName)
                                          .HtmlAttributes(attributes:new {@class = "col-sm-3"})
                                          .HeaderHtmlAttributes(attributes:new {@class = "col-sm-3"})
                                          .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators:false).Operator(defaultOperator:"contains").SuggestionOperator(filterType:FilterType.Contains)));
                                   columns.Bound(c => c.Address)
                                          .HtmlAttributes(attributes:new {@class = "col-sm-4"})
                                          .HeaderHtmlAttributes(attributes:new {@class = "col-sm-4"})
                                          .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators:false).Operator(defaultOperator:"contains").SuggestionOperator(filterType:FilterType.Contains)));
                                   columns.Bound(c => c.Classification)
                                          .HtmlAttributes(attributes:new {style = "width:80px;"})
                                          .HeaderHtmlAttributes(attributes:new {style = "width:80px;"})
                                          .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators:false).Operator(defaultOperator:"contains").SuggestionOperator(filterType:FilterType.Contains)));
                                   columns.Bound(c => c.IsEnabledText)
                                          .HtmlAttributes(attributes:new {@class = "col-sm-1"})
                                          .HeaderHtmlAttributes(attributes:new {@class = "col-sm-1"})
                                          .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators:false).Operator(defaultOperator:"contains").SuggestionOperator(filterType:FilterType.Contains)));
                                   columns.Bound(c => c.HasSignatoryText)
                                          .HtmlAttributes(attributes:new {@class = "col-sm-1"})
                                          .HeaderHtmlAttributes(attributes:new {@class = "col-sm-1"})
                                          .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators:false).Operator(defaultOperator:"contains").SuggestionOperator(filterType:FilterType.Contains)));
                                   columns.Bound(c => c.AssignedTo)
                                          .HtmlAttributes(attributes:new {@class = "col-sm-1"})
                                          .HeaderHtmlAttributes(attributes:new {@class = "col-sm-1"})
                                          .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators:false).Operator(defaultOperator:"contains").SuggestionOperator(filterType:FilterType.Contains)));
                                   columns.Template(m => { })
                                          .ClientTemplate(value:"<div class='fa fa-chevron-right pull-right'></div>")
                                          .Width(pixelWidth:40);
                               })
                      .Pageable(pageable => pageable
                                                .PageSizes(pageSizes:new List<object> {"all", 15, 25, 50, 75})
                                                .Refresh(enabled:true)
                                                .Input(enabled:true)
                                                .Numeric(enabled:false)
                      )
                      .Selectable(selectable =>
                                  {
                                      selectable.Mode(mode:GridSelectionMode.Single);
                                      selectable.Type(type:GridSelectionType.Row);
                                  })
                      .Sortable(sortable => { sortable.SortMode(value:GridSortMode.MultipleColumn); })
                      .Filterable(filterable => filterable.Enabled(value:false).Mode(value:GridFilterMode.Row))
                      .Resizable(resizable => resizable.Columns(value:true))
                      .Scrollable(s => s.Height(value:"auto"))
                      //.Groupable()
                      .HtmlAttributes(attributes:new
                                                 {
                                                     //@class = "input-sm"
                                                 })
                      .Events(events => { events.Change(handler:"gotoNextPage"); })
                      .DataSource(dataSource => dataSource
                                                    .Ajax()
                                                    .ServerOperation(enabled:false)
                                                    .Batch(enabled:true)
                                                    .Sort(sort => sort.Add(memberName:"IndustryName").Ascending()) // <-- initial sort expression
                                                    .Read(read => read.Action(actionName:"Industries_Read", controllerName:"Authority", routeValues:new
                                                                                                                                                    {
                                                                                                                                                        searchString = ViewBag.SearchString
                                                                                                                                                    }))
                                                    .PageSize(pageSize:15)
                                                    .Events(events => events.Error(handler:"error_handler.bind({gridId: '#grid'})"))
                      )
                      )
            </div>
        </section>
    </div>
}


@section Scripts {
    <script type="text/javascript">
        $(document)
            .ready(function()
            {
                $("#grid .k-filter-row").hide();
            });

        $("[name='onOffSwitchSearchControl']").bootstrapSwitch();
        $("[name='onOffSwitchSearchControl']")
            .on('switchChange.bootstrapSwitch'
                , function()
                {
                    $("[id='basicSearch']").toggle(500);
                    $("#grid .k-filter-row").toggle(500);

                    //console.debug($("#grid .k-filter-row")); // DOM element
                    //console.debug(this); // DOM element
                    //console.debug(event); // jQuery event
                    //console.debug(state); // true | false
                });

        gotoNextPage = function()
        {
            var grid = $("#grid").data("kendoGrid");
            var postUrl = "@Url.Action(actionName:"Industries_Select", controllerName:"Authority")";

            doAjaxAction(grid, postUrl, "", "Select an industry");
        };
    </script>
}