@{
    ViewBag.Title = "Audit Logs";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <section class="">
            <ol class="breadcrumb">
                <li><a href="#" onclick="location.href = '@Url.Action(actionName: "Index", controllerName: "Authority")'"><i class=""></i> Home </a></li>
                <li class="active">Audit Logs</li>
            </ol>
    </section>
    <div class="box box-primary">
        <section class="box-body form-horizontal">
            <div class="form-group">
                <div class="col-sm-3 col-md-1">
                    <input type="checkbox" name="onOffSwitchSearchControl" class="onoffswitch" checked="checked"
                            data-on-text="Advanced" 
                            data-off-text="Basic" />
                </div>
                <div class="col-sm-1">
                </div>
                <div id="basicSearch" class="col-sm-6">
                    <div class="input-group">
                        <input type="text" name="SearchString" id="searchString" value="@ViewBag.SearchString" class="form-control text-box single-line"
                                placeholder="Search for User Name, Industry Number, Industry Name">
                        <div class="input-group-btn">
                            <button class="btn btn-primary" type="submit"><i class="glyphicon glyphicon-search"></i></button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-12">
                    @* grid name should be start with grid for centralized error handling *@
                    @(Html.Kendo().Grid<Linko.LinkoExchange.Web.ViewModels.Authority.AuditLogViewModel>()
                          .Name(componentName: "grid")
                          .Columns(columns =>
                          {
                              columns.Bound(c => c.EventCategory)
                                     .HtmlAttributes(new { @class = "col-sm-1" })
                                     .HeaderHtmlAttributes(new { @class = "col-sm-1" })
                                     .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators: false).Operator(defaultOperator: "contains").SuggestionOperator(FilterType.Contains)));
                              columns.Bound(c => c.EventType)
                                     .HtmlAttributes(new { @class = "col-sm-2" })
                                     .HeaderHtmlAttributes(new { @class = "col-sm-2" })
                                     .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators: false).Operator(defaultOperator: "contains").SuggestionOperator(FilterType.Contains)));
                              columns.Bound(c => c.LogDateTimeUtc)
                                     .HtmlAttributes(new { @class = "col-sm-2" })
                                     .HeaderHtmlAttributes(new { @class = "col-sm-2" })
                                     .Format("{0:MM/dd/yyyy}");
                              columns.Bound(c => c.CromerrAuditLogId).Hidden()
                                     .HtmlAttributes(new { @class = "col-sm-1" })
                                     .HeaderHtmlAttributes(new { @class = "col-sm-1" })
                                     .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators: false).Operator(defaultOperator: "contains").SuggestionOperator(FilterType.Contains)));
                              columns.Bound(c => c.OrganizationId).Hidden()
                                     .HtmlAttributes(new { @class = "col-sm-1" })
                                     .HeaderHtmlAttributes(new { @class = "col-sm-1" })
                                     .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators: false).Operator(defaultOperator: "contains").SuggestionOperator(FilterType.Contains)));
                              columns.Bound(c => c.RegulatorName).Hidden()
                                     .HtmlAttributes(new { @class = "col-sm-2" })
                                     .HeaderHtmlAttributes(new { @class = "col-sm-2" })
                                     .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators: false).Operator(defaultOperator: "contains").SuggestionOperator(FilterType.Contains)));
                              columns.Bound(c => c.OrganizationName).Hidden()
                                     .HtmlAttributes(new { @class = "col-sm-2" })
                                     .HeaderHtmlAttributes(new { @class = "col-sm-2" })
                                     .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators: false).Operator(defaultOperator: "contains").SuggestionOperator(FilterType.Contains)));
                              columns.Bound(c => c.RegulatoryProgramName).Hidden()
                                     .HtmlAttributes(new { @class = "col-sm-2" })
                                     .HeaderHtmlAttributes(new { @class = "col-sm-2" })
                                     .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators: false).Operator(defaultOperator: "contains").SuggestionOperator(FilterType.Contains)));
                              columns.Bound(c => c.UserProfileId).Hidden()
                                     .HtmlAttributes(new { @class = "col-sm-1" })
                                     .HeaderHtmlAttributes(new { @class = "col-sm-1" })
                                     .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators: false).Operator(defaultOperator: "contains").SuggestionOperator(FilterType.Contains)));
                              columns.Bound(c => c.UserName).Hidden()
                                     .HtmlAttributes(new { @class = "col-sm-1" })
                                     .HeaderHtmlAttributes(new { @class = "col-sm-1" })
                                     .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators: false).Operator(defaultOperator: "contains").SuggestionOperator(FilterType.Contains)));
                              columns.Bound(c => c.FirstName).Hidden()
                                     .HtmlAttributes(new { @class = "col-sm-1" })
                                     .HeaderHtmlAttributes(new { @class = "col-sm-1" })
                                     .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators: false).Operator(defaultOperator: "contains").SuggestionOperator(FilterType.Contains)));
                              columns.Bound(c => c.LastName).Hidden()
                                     .HtmlAttributes(new { @class = "col-sm-1" })
                                     .HeaderHtmlAttributes(new { @class = "col-sm-1" })
                                     .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators: false).Operator(defaultOperator: "contains").SuggestionOperator(FilterType.Contains)));
                              columns.Bound(c => c.EmailAddress)
                                     .HtmlAttributes(new { @class = "col-sm-2" })
                                     .HeaderHtmlAttributes(new { @class = "col-sm-2" })
                                     .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators: false).Operator(defaultOperator: "contains").SuggestionOperator(FilterType.Contains)));
                              columns.Bound(c => c.IPAddress).Hidden()
                                     .HtmlAttributes(new { @class = "col-sm-2" })
                                     .HeaderHtmlAttributes(new { @class = "col-sm-2" })
                                     .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators: false).Operator(defaultOperator: "contains").SuggestionOperator(FilterType.Contains)));
                              columns.Bound(c => c.HostName).Hidden()
                                     .HtmlAttributes(new { @class = "col-sm-2" })
                                     .HeaderHtmlAttributes(new { @class = "col-sm-2" })
                                     .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators: false).Operator(defaultOperator: "contains").SuggestionOperator(FilterType.Contains)));
                              columns.Bound(c => c.Comment).Hidden()
                                     .HtmlAttributes(new { @class = "col-sm-2" })
                                     .HeaderHtmlAttributes(new { @class = "col-sm-2" })
                                     .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators: false).Operator(defaultOperator: "contains").SuggestionOperator(FilterType.Contains)));
                              columns.Template(m => { })
                                     .ClientTemplate(value: "<div class='fa fa-chevron-right pull-right'></div>")
                                     .Width(pixelWidth: 60);
                          })
                          .ToolBar(tools => tools.Excel())
                          .Pageable(pageable => pageable
                                    .PageSizes(new List<object> { "all", 15, 25, 50, 75})
                                    .Refresh(enabled: true)
                                    .Input(enabled: true)
                                    .Numeric(enabled: false)
                            )
                          .Selectable(selectable =>
                          {
                              selectable.Mode(GridSelectionMode.Single);
                              selectable.Type(GridSelectionType.Row);
                          })
                          .Sortable(sortable =>
                          {
                              sortable.SortMode(GridSortMode.MultipleColumn);
                          })
                          .Filterable(filterable => filterable.Enabled(value: true).Mode(GridFilterMode.Row))
                          .Resizable(resizable => resizable.Columns(value: true))
                          .Scrollable(s => s.Height(value: "auto"))
                          //.Groupable()
                          .Excel(excel => excel
                                .FileName("Audit Logs Grid Export.xlsx")
                                .Filterable(true)
                                .ProxyURL(Url.Action("AuditLogs_Excel_Export_Save", "Authority"))
                          )
                          .Events(events =>
                          {
                              events.Change(handler: "getLogEntryDetails");
                          })
                          .DataSource(dataSource => dataSource
                              .Ajax()
                              .ServerOperation(enabled: false)
                              .Batch(enabled: true)
                              .Read(read => read.Action(actionName: "AuditLogs_Read", controllerName: "Authority", routeValues: new
                              {
                                  searchString = @ViewBag.SearchString
                              }))
                              .PageSize(pageSize: 15)
                              .Events(events => events.Error(handler: "error_handler"))
                          )
                    )
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-12">
                    <div class="panel panel-default">
                        <div class="panel-heading">Log Details</div>
                        <div id="div-log-details" class="panel-body">
                            <table class="table table-condensed">
                                <tbody>
                                    <tr stlye="height:100px;">
                                        <td class="col-md-1">
                                            <div style="height: 200px; overflow:auto;">
                                                Comment:
                                            </div>
                                        </td>
                                        <td class="col-md-3" colspan="3" style="white-space: pre;" id="details-cell-comment"></td>
                                    </tr>
                                    <tr>
                                        <td class="col-md-1">Event Category</td>
                                        <td class="col-md-1" id="details-cell-eventcategory"></td>
                                        <td class="col-md-1">User ID</td>
                                        <td class="col-md-1" id="details-cell-userid"></td>
                                    </tr>
                                    <tr>
                                        <td>Event Type</td>
                                        <td id="details-cell-eventtype"></td>
                                        <td>User Name</td>
                                        <td id="details-cell-username"></td>
                                    </tr>
                                    <tr>
                                        <td>Event Code</td>
                                        <td id="details-cell-eventcode"></td>
                                        <td>First and Last Name</td>
                                        <td id="details-cell-fullname"></td>
                                    </tr>
                                    <tr>
                                        <td>Date and Time</td>
                                        <td id="details-cell-logdatetime"></td>
                                        <td>Email</td>
                                        <td id="details-cell-emailaddress"></td>
                                    </tr>
                                    <tr>
                                        <td>Authority</td>
                                        <td id="details-cell-authority"></td>
                                        <td>IP Address</td>
                                        <td id="details-cell-ipaddress"></td>
                                    </tr>
                                    <tr>
                                        <td>Facility</td>
                                        <td id="details-cell-facility"></td>
                                        <td>IP Name</td>
                                        <td id="details-cell-ipname"></td>
                                    </tr>
                                    <tr>
                                        <td>Regulatory Program</td>
                                        <td colspan="3" id="details-cell-regulatoryprogramname"></td>
                                    </tr>
                                </tbody>
                            </table>                        
                        </div>
                    </div>
                </div>
            </div>
        </section>@*.box-body*@
    </div><!-- /.box -->
}

@section Scripts {
    @Scripts.Render(paths: "~/bundles/auditlogs")
}