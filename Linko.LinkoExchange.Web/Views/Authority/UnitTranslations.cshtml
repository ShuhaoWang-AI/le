@using Linko.LinkoExchange.Web.ViewModels.Authority
@{
    ViewBag.Title = "Unit Translations";
}
@using (Html.BeginForm(actionName:null, controllerName:null, method:FormMethod.Post, htmlAttributes:new {id = "LinkoExchangeForm"}))
{
    @Html.AntiForgeryToken()

    <section class="">
        <ol class="breadcrumb">
            <li>
                <a href="#" onclick="location.href = '@Url.Action(actionName:"Index", controllerName:"Authority")'"><i class=""></i> Home </a>
            </li>
            <li class="active">Unit Translations</li>
        </ol>
    </section>

    <div class="box box-primary">
        <div class="box-header with-border">
            <h3 class="box-title">Units</h3>
            <div class="box-tools pull-right">
                <button class="btn btn-box-tool" data-widget="collapse">
                    <i class="fa fa-minus"></i>
                </button>
            </div>
        </div>
        <section class="box-body form-horizontal">
            <div class="alert alert-danger validation-summary-valid" id="validationSummaryUnitTranslation">
                <h5>
                    @Message.ValidationSummaryHeaderText
                </h5>
                <ul></ul>
            </div>

            <div class="alert alert-info">
                <h5>
                    For LinkoExchange to automatically convert results to the unit identified in an industry's permit, it must be translated to a known System Unit.
                    If you want the Authority unit to be available for an industry to choose when importing data into the system, select that here too.
                    Only translate units your Industry needs. Mark other units as “Show in Badge Count” checked so they do not show up in the "Unit Translations" badge count on the navigation pane.
                </h5>
            </div>
            <div class="form-group">
                <div class="col-md-12">
                    @* grid name should be start with grid for centralized error handling *@
                    @(Html.Kendo().Grid<AuthorityUnitViewModel>()
                          .Name(componentName:"gridAuthorityUnitTranslation")
                          .Columns(columns =>
                                   {
                                       columns.Bound(c => c.Name)
                                              .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators:false).Operator(defaultOperator:"contains").SuggestionOperator(filterType:FilterType.Contains)));
                                       columns.Bound(c => c.SystemUnit).ClientTemplate(value:"#= (SystemUnit==null)? '' : SystemUnit.Name #")
                                              .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators:false).Operator(defaultOperator:"contains").SuggestionOperator(filterType:FilterType.Contains)));
                                       columns.Bound(c => c.IsAvailableToRegulatee).ClientTemplate(value:"#= IsAvailableToRegulatee ? 'Yes' : 'No' #")
                                              .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators:false).Operator(defaultOperator:"contains").SuggestionOperator(filterType:FilterType.Contains)));
                                       columns.Bound(c => c.ShowInBadgeCount).ClientTemplate(value:"#= ShowInBadgeCount ? 'Yes' : 'No' #")
                                              .Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(showOperators:false).Operator(defaultOperator:"contains").SuggestionOperator(filterType:FilterType.Contains)));
                                       columns.Command(command => { command.Edit(); }).Width(pixelWidth:170);
                                   })
                          .Editable(editable => editable.Mode(mode:GridEditMode.InLine))
                          .Pageable(pageable => pageable
                                                    .PageSizes(enabled:true)
                                                    .Refresh(enabled:true)
                                                    .Input(enabled:true)
                                                    .Numeric(enabled:false)
                          )
                          .Sortable(sortable => { sortable.SortMode(value:GridSortMode.MultipleColumn); })

                          //.Filterable(filterable => filterable.Enabled(value: false).Mode(GridFilterMode.Row))
                          .Resizable(resizable => resizable.Columns(value:true))
                          .Scrollable(s => s.Height(value:"auto"))
                          .NoRecords(text:"No authority unit exists.")
                          .DataSource(dataSource => dataSource
                                                        .Ajax()
                                                        .ServerOperation(enabled:false)
                                                        .Batch(enabled:false)
                                                        .Sort(sort => { sort.Add(memberName:"Name").Ascending(); }) // <-- initial sort expression
                                                        .Read(read => read.Action(actionName:"UnitTranslations_Read", controllerName:"Authority"))
                                                        .Update(update => update.Action(actionName:"UnitTranslations_Update", controllerName:"Authority")
                                                        )
                                                        .PageSize(pageSize:25)
                                                        .Events(events => events.RequestEnd(handler:"UpdateBadgeCount").Error(handler:"error_handler_AuthorityUnitTranslation.bind({gridId: '#gridAuthorityUnitTranslation'})"))
                                                        .Model(model =>
                                                               {
                                                                   model.Id(p => p.Id);
                                                                   model.Field(p => p.Id).Editable(enabled:false);
                                                                   model.Field(p => p.Name).Editable(enabled:false);
                                                                   model.Field(p => p.SystemUnit).DefaultValue(value:ViewData[key:"defaultSystemUnit"] as SystemUnitViewModel);
                                                                   model.Field(p => p.IsAvailableToRegulatee);
                                                                   model.Field(p => p.ShowInBadgeCount);
                                                               })
                          )
                          )
                </div>
            </div>
        </section>
    </div>
    <script>
        function UpdateBadgeCount(e) {
            console.log(e);
            if (e.type === "update" && e.response.Errors == null) {
                var responseData = e.response.Data[0];
                if (responseData.BadgeCount != null) {
                    $("#sidebar_PendingUnitTranslationsCount").html(responseData.BadgeCount);
                }
            }
        }

        function error_handler_AuthorityUnitTranslation(e) {
            if (e.errors) {
                var errorMessages = [];
                $.each(e.errors, function(key, value) {
                    if ("errors" in value) {
                        $.each(value.errors, function() {
                            errorMessages.push("<li>" + this + "</li>");
                        });
                    }
                });

                var validationSummary = $("#validationSummaryUnitTranslation");

                validationSummary.removeClass("validation-summary-valid");
                validationSummary.addClass("validation-summary-errors");

                validationSummary.find("ul").empty(); // remove li elements from the validation Summary list. valid form also have empty li element

                validationSummary.find("ul").append(errorMessages);

                // Cancel the changes.
                var grid = $(this.gridId).data("kendoGrid");
                grid.one("dataBinding", function(e) {
                    e.preventDefault(); // cancel grid rebind if error occurs                             
                });

                $(".k-button")
                    .click(function() {
                        var validationSummary = $("#validationSummaryUnitTranslation");

                        validationSummary.addClass("validation-summary-valid");
                        validationSummary.removeClass("validation-summary-errors");
                        validationSummary.find("ul").empty(); // remove li elements from the validation Summary list. valid form also have empty li element
                    });
            }
        }
    </script>
}